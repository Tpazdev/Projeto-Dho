{"file_contents":{"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/pages/DesligamentosFuncionario.tsx":{"content":"import { Link } from \"wouter\";\nimport { Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { DesligamentosTable, type DesligamentoData } from \"@/components/DesligamentosTable\";\nimport { EnviarQuestionario } from \"@/components/EnviarQuestionario\";\nimport { VisualizarPerguntasQuestionario } from \"@/components/VisualizarPerguntasQuestionario\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface DesligamentoCompleto extends DesligamentoData {\n  motivo: string | null;\n  tipoDesligamento: string;\n  funcionarioId: number;\n  empresaId: number;\n  gestorId: number;\n}\n\nexport default function DesligamentosFuncionario() {\n  const { usuario } = useAuth();\n  const { data: desligamentos = [], isLoading } = useQuery<DesligamentoCompleto[]>({\n    queryKey: [\"/api/desligamentos\"],\n  });\n\n  // Filtra desligamentos iniciados pelo funcionário\n  const desligamentosPorFuncionario = desligamentos.filter((d) => \n    d.tipoDesligamento === \"funcionario\"\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Entrevista de desligamento – por parte do colaborador</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Desligamentos iniciados pelo colaborador (pedido de demissão, abandono, etc.)\n          </p>\n        </div>\n        <Link href=\"/desligamento/novo\">\n          <Button data-testid=\"button-novo-desligamento\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Novo Desligamento\n          </Button>\n        </Link>\n      </div>\n\n      {usuario?.role === \"admin\" && (\n        <VisualizarPerguntasQuestionario tipoDesligamento=\"funcionario\" />\n      )}\n\n      <EnviarQuestionario tipoDesligamento=\"funcionario\" />\n\n      {isLoading ? (\n        <div className=\"text-center text-muted-foreground py-8\">Carregando...</div>\n      ) : desligamentosPorFuncionario.length === 0 ? (\n        <div className=\"text-center text-muted-foreground py-8\">\n          Nenhum desligamento por funcionário encontrado\n        </div>\n      ) : (\n        <DesligamentosTable desligamentos={desligamentosPorFuncionario} />\n      )}\n    </div>\n  );\n}\n","size_bytes":2257},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/DesligamentoForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertDesligamentoSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\nimport { Calendar as CalendarIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nconst formSchema = insertDesligamentoSchema.omit({ \n  dataDesligamento: true \n}).extend({\n  dataDesligamento: z.string().min(1, \"Data é obrigatória\"),\n  empresaId: z.number().min(1, \"Empresa é obrigatória\"),\n  gestorId: z.number().min(1, \"Gestor é obrigatório\"),\n  funcionarioId: z.number().min(1, \"Funcionário é obrigatório\"),\n  tipoDesligamento: z.enum([\"funcionario\", \"gestor\"]),\n});\n\ninterface DesligamentoFormProps {\n  empresas: Array<{ id: number; nome: string }>;\n  gestores: Array<{ id: number; nome: string; empresaId: number }>;\n  funcionarios: Array<{ id: number; nome: string; cargo: string; gestorId: number }>;\n  onSubmit: (data: z.infer<typeof formSchema>) => void;\n  isLoading?: boolean;\n}\n\nexport function DesligamentoForm({\n  empresas,\n  gestores,\n  funcionarios,\n  onSubmit,\n  isLoading = false,\n}: DesligamentoFormProps) {\n  const [selectedEmpresaId, setSelectedEmpresaId] = useState<number | null>(null);\n  const [selectedGestorId, setSelectedGestorId] = useState<number | null>(null);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      dataDesligamento: \"\",\n      motivo: \"\",\n      tipoDesligamento: \"gestor\" as const,\n      funcionarioId: 0,\n      empresaId: 0,\n      gestorId: 0,\n    },\n  });\n\n  const filteredGestores = selectedEmpresaId\n    ? gestores.filter((g) => g.empresaId === selectedEmpresaId)\n    : gestores;\n\n  const filteredFuncionarios = selectedGestorId\n    ? funcionarios.filter((f) => f.gestorId === selectedGestorId)\n    : funcionarios;\n\n  const handleSubmit = (data: z.infer<typeof formSchema>) => {\n    console.log(\"Form submitted with data:\", data);\n    onSubmit(data);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Registrar Novo Desligamento</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"empresaId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Empresa *</FormLabel>\n                    <Select\n                      onValueChange={(value) => {\n                        const id = parseInt(value);\n                        field.onChange(id);\n                        setSelectedEmpresaId(id);\n                        setSelectedGestorId(null);\n                        form.setValue(\"gestorId\", 0);\n                        form.setValue(\"funcionarioId\", 0);\n                      }}\n                      value={field.value?.toString()}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-empresa\">\n                          <SelectValue placeholder=\"Selecione uma empresa\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {empresas.map((empresa) => (\n                          <SelectItem key={empresa.id} value={empresa.id.toString()}>\n                            {empresa.nome}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"gestorId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Gestor *</FormLabel>\n                    <Select\n                      disabled={!selectedEmpresaId}\n                      onValueChange={(value) => {\n                        const id = parseInt(value);\n                        field.onChange(id);\n                        setSelectedGestorId(id);\n                        form.setValue(\"funcionarioId\", 0);\n                      }}\n                      value={field.value?.toString()}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-gestor\">\n                          <SelectValue placeholder=\"Selecione um gestor\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {filteredGestores.map((gestor) => (\n                          <SelectItem key={gestor.id} value={gestor.id.toString()}>\n                            {gestor.nome}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"funcionarioId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Funcionário *</FormLabel>\n                    <Select\n                      disabled={!selectedGestorId}\n                      onValueChange={(value) => field.onChange(parseInt(value))}\n                      value={field.value?.toString()}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-funcionario\">\n                          <SelectValue placeholder=\"Selecione um funcionário\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {filteredFuncionarios.map((funcionario) => (\n                          <SelectItem key={funcionario.id} value={funcionario.id.toString()}>\n                            {funcionario.nome} - {funcionario.cargo}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"tipoDesligamento\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tipo de Desligamento *</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      value={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-tipo-desligamento\">\n                          <SelectValue placeholder=\"Selecione o tipo\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"funcionario\">Entrevista de desligamento – por parte do colaborador</SelectItem>\n                        <SelectItem value=\"gestor\">Entrevista de desligamento – por parte da empresa</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"dataDesligamento\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-col\">\n                    <FormLabel>Data do Desligamento *</FormLabel>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <FormControl>\n                          <Button\n                            variant=\"outline\"\n                            className={cn(\n                              \"w-full pl-3 text-left font-normal\",\n                              !field.value && \"text-muted-foreground\"\n                            )}\n                            data-testid=\"button-date-picker\"\n                          >\n                            {field.value ? (\n                              format(new Date(field.value), \"dd/MM/yyyy\")\n                            ) : (\n                              <span>Selecione uma data</span>\n                            )}\n                            <CalendarIcon className=\"ml-auto h-4 w-4 opacity-50\" />\n                          </Button>\n                        </FormControl>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={field.value ? new Date(field.value) : undefined}\n                          onSelect={(date) => {\n                            if (date) {\n                              field.onChange(format(date, \"yyyy-MM-dd\"));\n                            }\n                          }}\n                          disabled={(date) =>\n                            date > new Date() || date < new Date(\"1900-01-01\")\n                          }\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"motivo\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Motivo (opcional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Descreva o motivo do desligamento...\"\n                      className=\"resize-none\"\n                      rows={4}\n                      data-testid=\"input-motivo\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-4\">\n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                data-testid=\"button-submit-desligamento\"\n              >\n                {isLoading ? \"Salvando...\" : \"Registrar Desligamento\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11199},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/pages/PDIDetalhes.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useParams, Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { insertPdiMetaSchema, insertPdiCompetenciaSchema, insertPdiAcaoSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { ArrowLeft, Plus, Calendar, CheckCircle, XCircle, TrendingUp, Target, Lightbulb, Trash2 } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\n\nconst metaFormSchema = insertPdiMetaSchema.extend({\n  descricao: z.string().min(1, \"Descrição é obrigatória\"),\n  prazo: z.string(),\n  status: z.string().default(\"pendente\"),\n});\n\nconst competenciaFormSchema = insertPdiCompetenciaSchema.extend({\n  competencia: z.string().min(1, \"Competência é obrigatória\"),\n  nivelAtual: z.number().min(1).max(10),\n  nivelDesejado: z.number().min(1).max(10),\n});\n\nconst acaoFormSchema = insertPdiAcaoSchema.extend({\n  acao: z.string().min(1, \"Ação é obrigatória\"),\n  tipo: z.string().min(1, \"Tipo é obrigatório\"),\n  prazo: z.string(),\n  status: z.string().default(\"pendente\"),\n});\n\nconst statusLabels = {\n  em_elaboracao: \"Em Elaboração\",\n  em_andamento: \"Em Andamento\",\n  concluido: \"Concluído\",\n  cancelado: \"Cancelado\",\n  pendente: \"Pendente\",\n  em_progresso: \"Em Progresso\",\n};\n\nconst statusColors = {\n  em_elaboracao: \"bg-yellow-500\",\n  em_andamento: \"bg-blue-500\",\n  concluido: \"bg-green-500\",\n  cancelado: \"bg-gray-500\",\n  pendente: \"bg-yellow-500\",\n  em_progresso: \"bg-blue-500\",\n};\n\nexport default function PDIDetalhes() {\n  const { id } = useParams();\n  const { toast } = useToast();\n  const [openMetaDialog, setOpenMetaDialog] = useState(false);\n  const [openCompetenciaDialog, setOpenCompetenciaDialog] = useState(false);\n  const [openAcaoDialog, setOpenAcaoDialog] = useState(false);\n\n  const { data: pdi, isLoading } = useQuery<any>({\n    queryKey: [\"/api/pdis\", id],\n    queryFn: async () => {\n      const res = await fetch(`/api/pdis/${id}`);\n      if (!res.ok) throw new Error(\"PDI não encontrado\");\n      return res.json();\n    },\n  });\n\n  const { data: metas = [] } = useQuery<any[]>({\n    queryKey: [\"/api/pdis\", id, \"metas\"],\n    queryFn: async () => {\n      const res = await fetch(`/api/pdis/${id}/metas`);\n      return res.json();\n    },\n    enabled: !!id,\n  });\n\n  const { data: competencias = [] } = useQuery<any[]>({\n    queryKey: [\"/api/pdis\", id, \"competencias\"],\n    queryFn: async () => {\n      const res = await fetch(`/api/pdis/${id}/competencias`);\n      return res.json();\n    },\n    enabled: !!id,\n  });\n\n  const { data: acoes = [] } = useQuery<any[]>({\n    queryKey: [\"/api/pdis\", id, \"acoes\"],\n    queryFn: async () => {\n      const res = await fetch(`/api/pdis/${id}/acoes`);\n      return res.json();\n    },\n    enabled: !!id,\n  });\n\n  const metaForm = useForm<z.infer<typeof metaFormSchema>>({\n    resolver: zodResolver(metaFormSchema),\n    defaultValues: {\n      pdiId: Number(id),\n      descricao: \"\",\n      prazo: \"\",\n      status: \"pendente\",\n      resultado: \"\",\n    },\n  });\n\n  const competenciaForm = useForm<z.infer<typeof competenciaFormSchema>>({\n    resolver: zodResolver(competenciaFormSchema),\n    defaultValues: {\n      pdiId: Number(id),\n      competencia: \"\",\n      nivelAtual: 1,\n      nivelDesejado: 10,\n      observacoes: \"\",\n    },\n  });\n\n  const acaoForm = useForm<z.infer<typeof acaoFormSchema>>({\n    resolver: zodResolver(acaoFormSchema),\n    defaultValues: {\n      pdiId: Number(id),\n      acao: \"\",\n      tipo: \"\",\n      prazo: \"\",\n      status: \"pendente\",\n      resultado: \"\",\n    },\n  });\n\n  const onSubmitMeta = async (data: z.infer<typeof metaFormSchema>) => {\n    try {\n      await apiRequest(\"POST\", `/api/pdis/${id}/metas`, data);\n\n      await queryClient.invalidateQueries({ queryKey: [\"/api/pdis\", id, \"metas\"] });\n      toast({ title: \"Sucesso\", description: \"Meta adicionada com sucesso\" });\n      setOpenMetaDialog(false);\n      metaForm.reset();\n    } catch (error) {\n      toast({ variant: \"destructive\", title: \"Erro\", description: \"Erro ao adicionar meta\" });\n    }\n  };\n\n  const onSubmitCompetencia = async (data: z.infer<typeof competenciaFormSchema>) => {\n    try {\n      await apiRequest(\"POST\", `/api/pdis/${id}/competencias`, data);\n\n      await queryClient.invalidateQueries({ queryKey: [\"/api/pdis\", id, \"competencias\"] });\n      toast({ title: \"Sucesso\", description: \"Competência adicionada com sucesso\" });\n      setOpenCompetenciaDialog(false);\n      competenciaForm.reset();\n    } catch (error) {\n      toast({ variant: \"destructive\", title: \"Erro\", description: \"Erro ao adicionar competência\" });\n    }\n  };\n\n  const onSubmitAcao = async (data: z.infer<typeof acaoFormSchema>) => {\n    try {\n      await apiRequest(\"POST\", `/api/pdis/${id}/acoes`, data);\n\n      await queryClient.invalidateQueries({ queryKey: [\"/api/pdis\", id, \"acoes\"] });\n      toast({ title: \"Sucesso\", description: \"Ação adicionada com sucesso\" });\n      setOpenAcaoDialog(false);\n      acaoForm.reset();\n    } catch (error) {\n      toast({ variant: \"destructive\", title: \"Erro\", description: \"Erro ao adicionar ação\" });\n    }\n  };\n\n  const handleUpdateStatus = async (type: \"meta\" | \"competencia\" | \"acao\", itemId: number, newStatus: string) => {\n    try {\n      const endpoint = type === \"meta\" ? `/api/pdi-metas/${itemId}` : \n                      type === \"competencia\" ? `/api/pdi-competencias/${itemId}` :\n                      `/api/pdi-acoes/${itemId}`;\n      \n      await apiRequest(\"PATCH\", endpoint, { status: newStatus });\n\n      await queryClient.invalidateQueries({ queryKey: [\"/api/pdis\", id, type === \"meta\" ? \"metas\" : type === \"competencia\" ? \"competencias\" : \"acoes\"] });\n      toast({ title: \"Sucesso\", description: \"Status atualizado\" });\n    } catch (error) {\n      toast({ variant: \"destructive\", title: \"Erro\", description: \"Erro ao atualizar status\" });\n    }\n  };\n\n  const handleDelete = async (type: \"meta\" | \"competencia\" | \"acao\", itemId: number) => {\n    try {\n      const endpoint = type === \"meta\" ? `/api/pdi-metas/${itemId}` : \n                      type === \"competencia\" ? `/api/pdi-competencias/${itemId}` :\n                      `/api/pdi-acoes/${itemId}`;\n      \n      await apiRequest(\"DELETE\", endpoint);\n\n      await queryClient.invalidateQueries({ queryKey: [\"/api/pdis\", id, type === \"meta\" ? \"metas\" : type === \"competencia\" ? \"competencias\" : \"acoes\"] });\n      toast({ title: \"Sucesso\", description: `${type === \"meta\" ? \"Meta\" : type === \"competencia\" ? \"Competência\" : \"Ação\"} removida` });\n    } catch (error) {\n      toast({ variant: \"destructive\", title: \"Erro\", description: \"Erro ao remover item\" });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <p className=\"text-muted-foreground\">Carregando...</p>\n      </div>\n    );\n  }\n\n  if (!pdi) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <p className=\"text-muted-foreground\">PDI não encontrado</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full overflow-auto p-8\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/pdi\">\n            <Button variant=\"outline\" size=\"icon\" data-testid=\"button-voltar\">\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n          </Link>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n              PDI - {pdi.funcionarioNome}\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              {pdi.funcionarioCargo && `${pdi.funcionarioCargo} • `}\n              Gestor: {pdi.gestorNome}\n            </p>\n          </div>\n          <Badge className={statusColors[pdi.status as keyof typeof statusColors]}>\n            {statusLabels[pdi.status as keyof typeof statusLabels]}\n          </Badge>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Informações do PDI</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n              <span>\n                Período: {format(new Date(pdi.dataInicio), \"dd/MM/yyyy\", { locale: ptBR })} -{\" \"}\n                {format(new Date(pdi.dataFim), \"dd/MM/yyyy\", { locale: ptBR })}\n              </span>\n            </div>\n            {pdi.observacoes && (\n              <div className=\"pt-2\">\n                <p className=\"text-sm font-medium\">Observações:</p>\n                <p className=\"text-sm text-muted-foreground\">{pdi.observacoes}</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Tabs defaultValue=\"metas\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"metas\" data-testid=\"tab-metas\">\n              <Target className=\"w-4 h-4 mr-2\" />\n              Metas ({metas.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"competencias\" data-testid=\"tab-competencias\">\n              <TrendingUp className=\"w-4 h-4 mr-2\" />\n              Competências ({competencias.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"acoes\" data-testid=\"tab-acoes\">\n              <Lightbulb className=\"w-4 h-4 mr-2\" />\n              Ações ({acoes.length})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"metas\" className=\"space-y-4 mt-4\">\n            <div className=\"flex justify-end\">\n              <Dialog open={openMetaDialog} onOpenChange={setOpenMetaDialog}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-adicionar-meta\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Adicionar Meta\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Adicionar Meta</DialogTitle>\n                  </DialogHeader>\n                  <Form {...metaForm}>\n                    <form onSubmit={metaForm.handleSubmit(onSubmitMeta)} className=\"space-y-4\">\n                      <FormField\n                        control={metaForm.control}\n                        name=\"descricao\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Descrição da Meta</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Descreva a meta\" data-testid=\"textarea-meta-descricao\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={metaForm.control}\n                        name=\"prazo\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Prazo</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} data-testid=\"input-meta-prazo\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={metaForm.control}\n                        name=\"status\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Status</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-meta-status\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"pendente\">Pendente</SelectItem>\n                                <SelectItem value=\"em_progresso\">Em Progresso</SelectItem>\n                                <SelectItem value=\"concluido\">Concluído</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex justify-end gap-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setOpenMetaDialog(false)}>\n                          Cancelar\n                        </Button>\n                        <Button type=\"submit\" data-testid=\"button-salvar-meta\">Adicionar</Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {metas.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <Target className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">Nenhuma meta cadastrada ainda.</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-3\">\n                {metas.map((meta: any) => (\n                  <Card key={meta.id} data-testid={`card-meta-${meta.id}`}>\n                    <CardContent className=\"py-4\">\n                      <div className=\"flex items-start justify-between gap-4\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium\">{meta.descricao}</p>\n                          <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                            <span>\n                              Prazo: {format(new Date(meta.prazo), \"dd/MM/yyyy\", { locale: ptBR })}\n                            </span>\n                            <Badge className={statusColors[meta.status as keyof typeof statusColors]} variant=\"secondary\">\n                              {statusLabels[meta.status as keyof typeof statusLabels]}\n                            </Badge>\n                          </div>\n                          {meta.resultado && (\n                            <p className=\"text-sm text-muted-foreground mt-2\">Resultado: {meta.resultado}</p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {meta.status !== \"concluido\" && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleUpdateStatus(\"meta\", meta.id, \"concluido\")}\n                              data-testid={`button-concluir-meta-${meta.id}`}\n                            >\n                              <CheckCircle className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleDelete(\"meta\", meta.id)}\n                            data-testid={`button-deletar-meta-${meta.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"competencias\" className=\"space-y-4 mt-4\">\n            <div className=\"flex justify-end\">\n              <Dialog open={openCompetenciaDialog} onOpenChange={setOpenCompetenciaDialog}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-adicionar-competencia\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Adicionar Competência\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Adicionar Competência</DialogTitle>\n                  </DialogHeader>\n                  <Form {...competenciaForm}>\n                    <form onSubmit={competenciaForm.handleSubmit(onSubmitCompetencia)} className=\"space-y-4\">\n                      <FormField\n                        control={competenciaForm.control}\n                        name=\"competencia\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Competência</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Nome da competência\" data-testid=\"input-competencia\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={competenciaForm.control}\n                          name=\"nivelAtual\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Nível Atual (1-10)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  min=\"1\"\n                                  max=\"10\"\n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                  data-testid=\"input-nivel-atual\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={competenciaForm.control}\n                          name=\"nivelDesejado\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Nível Desejado (1-10)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  min=\"1\"\n                                  max=\"10\"\n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value))}\n                                  data-testid=\"input-nivel-desejado\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <FormField\n                        control={competenciaForm.control}\n                        name=\"observacoes\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Observações</FormLabel>\n                            <FormControl>\n                              <Textarea\n                                {...field}\n                                placeholder=\"Observações sobre a competência\"\n                                value={field.value || \"\"}\n                                data-testid=\"textarea-competencia-obs\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex justify-end gap-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setOpenCompetenciaDialog(false)}>\n                          Cancelar\n                        </Button>\n                        <Button type=\"submit\" data-testid=\"button-salvar-competencia\">Adicionar</Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {competencias.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <TrendingUp className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">Nenhuma competência cadastrada ainda.</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-3\">\n                {competencias.map((comp: any) => (\n                  <Card key={comp.id} data-testid={`card-competencia-${comp.id}`}>\n                    <CardContent className=\"py-4\">\n                      <div className=\"flex items-start justify-between gap-4\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium\">{comp.competencia}</p>\n                          <div className=\"flex items-center gap-6 mt-2\">\n                            <div className=\"text-sm\">\n                              <span className=\"text-muted-foreground\">Atual:</span>{\" \"}\n                              <span className=\"font-medium\">{comp.nivelAtual}/10</span>\n                            </div>\n                            <div className=\"text-sm\">\n                              <span className=\"text-muted-foreground\">Desejado:</span>{\" \"}\n                              <span className=\"font-medium\">{comp.nivelDesejado}/10</span>\n                            </div>\n                            <div className=\"text-sm\">\n                              <span className=\"text-muted-foreground\">Gap:</span>{\" \"}\n                              <span className=\"font-medium text-blue-600\">\n                                {comp.nivelDesejado - comp.nivelAtual}\n                              </span>\n                            </div>\n                          </div>\n                          {comp.observacoes && (\n                            <p className=\"text-sm text-muted-foreground mt-2\">{comp.observacoes}</p>\n                          )}\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleDelete(\"competencia\", comp.id)}\n                          data-testid={`button-deletar-competencia-${comp.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"acoes\" className=\"space-y-4 mt-4\">\n            <div className=\"flex justify-end\">\n              <Dialog open={openAcaoDialog} onOpenChange={setOpenAcaoDialog}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-adicionar-acao\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Adicionar Ação\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Adicionar Ação</DialogTitle>\n                  </DialogHeader>\n                  <Form {...acaoForm}>\n                    <form onSubmit={acaoForm.handleSubmit(onSubmitAcao)} className=\"space-y-4\">\n                      <FormField\n                        control={acaoForm.control}\n                        name=\"acao\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Descrição da Ação</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Descreva a ação\" data-testid=\"textarea-acao\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={acaoForm.control}\n                        name=\"tipo\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Tipo</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-acao-tipo\">\n                                  <SelectValue placeholder=\"Selecione o tipo\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"treinamento\">Treinamento</SelectItem>\n                                <SelectItem value=\"mentoria\">Mentoria</SelectItem>\n                                <SelectItem value=\"projeto\">Projeto Prático</SelectItem>\n                                <SelectItem value=\"leitura\">Leitura/Estudo</SelectItem>\n                                <SelectItem value=\"curso\">Curso</SelectItem>\n                                <SelectItem value=\"outro\">Outro</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={acaoForm.control}\n                        name=\"prazo\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Prazo</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} data-testid=\"input-acao-prazo\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={acaoForm.control}\n                        name=\"status\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Status</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-acao-status\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"pendente\">Pendente</SelectItem>\n                                <SelectItem value=\"em_progresso\">Em Progresso</SelectItem>\n                                <SelectItem value=\"concluido\">Concluído</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex justify-end gap-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setOpenAcaoDialog(false)}>\n                          Cancelar\n                        </Button>\n                        <Button type=\"submit\" data-testid=\"button-salvar-acao\">Adicionar</Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {acoes.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <Lightbulb className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">Nenhuma ação cadastrada ainda.</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-3\">\n                {acoes.map((acao: any) => (\n                  <Card key={acao.id} data-testid={`card-acao-${acao.id}`}>\n                    <CardContent className=\"py-4\">\n                      <div className=\"flex items-start justify-between gap-4\">\n                        <div className=\"flex-1\">\n                          <p className=\"font-medium\">{acao.acao}</p>\n                          <div className=\"flex items-center gap-4 mt-2 text-sm text-muted-foreground\">\n                            <Badge variant=\"outline\">{acao.tipo}</Badge>\n                            <span>\n                              Prazo: {format(new Date(acao.prazo), \"dd/MM/yyyy\", { locale: ptBR })}\n                            </span>\n                            <Badge className={statusColors[acao.status as keyof typeof statusColors]} variant=\"secondary\">\n                              {statusLabels[acao.status as keyof typeof statusLabels]}\n                            </Badge>\n                          </div>\n                          {acao.resultado && (\n                            <p className=\"text-sm text-muted-foreground mt-2\">Resultado: {acao.resultado}</p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {acao.status !== \"concluido\" && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleUpdateStatus(\"acao\", acao.id, \"concluido\")}\n                              data-testid={`button-concluir-acao-${acao.id}`}\n                            >\n                              <CheckCircle className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleDelete(\"acao\", acao.id)}\n                            data-testid={`button-deletar-acao-${acao.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":31832},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/FormularioExperienciaForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\n\ntype FormularioExperienciaItem = {\n  id: number;\n  funcionarioId: number;\n  funcionarioNome: string;\n  gestorId: number;\n  gestorNome: string;\n  dataLimite: string;\n  status: \"pendente\" | \"preenchido\" | \"aprovado\" | \"reprovado\";\n  dataPreenchimento?: string | null;\n  desempenho?: number | null;\n  pontosFortes?: string | null;\n  pontosMelhoria?: string | null;\n  recomendacao?: string | null;\n  observacoes?: string | null;\n};\n\nconst formularioSchema = z.object({\n  desempenho: z.coerce.number().min(1, \"Obrigatório\").max(10, \"Nota máxima é 10\"),\n  pontosFortes: z.string().min(1, \"Campo obrigatório\"),\n  pontosMelhoria: z.string().min(1, \"Campo obrigatório\"),\n  recomendacao: z.enum([\"aprovado\", \"reprovado\"]),\n  observacoes: z.string().optional(),\n});\n\ntype FormularioFormData = z.infer<typeof formularioSchema>;\n\ninterface FormularioExperienciaFormProps {\n  formulario: FormularioExperienciaItem;\n  onClose: () => void;\n}\n\nexport function FormularioExperienciaForm({ formulario, onClose }: FormularioExperienciaFormProps) {\n  const { toast } = useToast();\n  const isPendente = formulario.status === \"pendente\";\n\n  const form = useForm<FormularioFormData>({\n    resolver: zodResolver(formularioSchema),\n    defaultValues: {\n      desempenho: formulario.desempenho || 5,\n      pontosFortes: formulario.pontosFortes || \"\",\n      pontosMelhoria: formulario.pontosMelhoria || \"\",\n      recomendacao: (formulario.recomendacao as \"aprovado\" | \"reprovado\") || \"aprovado\",\n      observacoes: formulario.observacoes || \"\",\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: FormularioFormData) => {\n      const payload = {\n        ...data,\n        status: \"preenchido\",\n        dataPreenchimento: new Date().toISOString().split(\"T\")[0],\n      };\n      return await apiRequest(\"PATCH\", `/api/formularios-experiencia/${formulario.id}`, payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/formularios-experiencia\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Avaliação salva com sucesso\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível salvar a avaliação\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormularioFormData) => {\n    updateMutation.mutate(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"desempenho\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Desempenho (0-10)</FormLabel>\n              <FormControl>\n                <Input\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"10\"\n                  {...field}\n                  disabled={!isPendente}\n                  data-testid=\"input-desempenho\"\n                />\n              </FormControl>\n              <FormDescription>Avalie o desempenho geral do funcionário de 0 a 10</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"pontosFortes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Pontos Fortes</FormLabel>\n              <FormControl>\n                <Textarea\n                  {...field}\n                  placeholder=\"Descreva os principais pontos fortes do funcionário...\"\n                  className=\"min-h-[100px]\"\n                  disabled={!isPendente}\n                  data-testid=\"textarea-pontos-fortes\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"pontosMelhoria\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Pontos de Melhoria</FormLabel>\n              <FormControl>\n                <Textarea\n                  {...field}\n                  placeholder=\"Descreva os pontos que precisam de melhoria...\"\n                  className=\"min-h-[100px]\"\n                  disabled={!isPendente}\n                  data-testid=\"textarea-pontos-melhoria\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"recomendacao\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Recomendação Final</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value} disabled={!isPendente}>\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-recomendacao\">\n                    <SelectValue placeholder=\"Selecione a recomendação\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"aprovado\" data-testid=\"option-aprovado\">\n                    Aprovado - Efetivar Funcionário\n                  </SelectItem>\n                  <SelectItem value=\"reprovado\" data-testid=\"option-reprovado\">\n                    Reprovado - Encerrar Contrato\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n              <FormDescription>Sua recomendação sobre a efetivação do funcionário</FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"observacoes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Observações Adicionais (Opcional)</FormLabel>\n              <FormControl>\n                <Textarea\n                  {...field}\n                  placeholder=\"Adicione observações adicionais se necessário...\"\n                  className=\"min-h-[100px]\"\n                  disabled={!isPendente}\n                  data-testid=\"textarea-observacoes\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end gap-2\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose} data-testid=\"button-cancelar\">\n            {isPendente ? \"Cancelar\" : \"Fechar\"}\n          </Button>\n          {isPendente && (\n            <Button type=\"submit\" disabled={updateMutation.isPending} data-testid=\"button-salvar\">\n              {updateMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n              Salvar Avaliação\n            </Button>\n          )}\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":7461},"client/src/pages/NovoDesligamento.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { DesligamentoForm } from \"@/components/DesligamentoForm\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertDesligamentoSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ntype DesligamentoFormData = z.infer<typeof insertDesligamentoSchema> & {\n  dataDesligamento: string;\n};\n\nexport default function NovoDesligamento() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: empresas = [], isLoading: loadingEmpresas } = useQuery({\n    queryKey: [\"/api/empresas\"],\n  });\n\n  const { data: gestores = [], isLoading: loadingGestores } = useQuery({\n    queryKey: [\"/api/gestores\"],\n  });\n\n  const { data: funcionarios = [], isLoading: loadingFuncionarios } = useQuery({\n    queryKey: [\"/api/funcionarios\"],\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: DesligamentoFormData) => {\n      return await apiRequest(\"POST\", \"/api/desligamentos\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/desligamentos\"] });\n      toast({\n        title: \"Desligamento registrado\",\n        description: \"O desligamento foi registrado com sucesso.\",\n      });\n      setTimeout(() => setLocation(\"/\"), 1000);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao registrar desligamento.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const isLoading = loadingEmpresas || loadingGestores || loadingFuncionarios;\n\n  if (isLoading) {\n    return <div className=\"text-center py-8\">Carregando...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Novo Desligamento</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Registre um novo desligamento de funcionário\n        </p>\n      </div>\n\n      <DesligamentoForm\n        empresas={empresas}\n        gestores={gestores}\n        funcionarios={funcionarios}\n        onSubmit={(data) => mutation.mutate(data)}\n        isLoading={mutation.isPending}\n      />\n    </div>\n  );\n}\n","size_bytes":2211},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, date, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const empresas = pgTable(\"empresas\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  nome: text(\"nome\").notNull().unique(),\n});\n\nexport const gestores = pgTable(\"gestores\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  nome: text(\"nome\").notNull(),\n  empresaId: integer(\"empresa_id\").notNull().references(() => empresas.id),\n});\n\nexport const funcionarios = pgTable(\"funcionarios\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  nome: text(\"nome\").notNull(),\n  cpf: text(\"cpf\"),\n  cargo: text(\"cargo\"),\n  gestorId: integer(\"gestor_id\").notNull().references(() => gestores.id),\n  dataAdmissao: date(\"data_admissao\"),\n});\n\nexport const desligamentos = pgTable(\"desligamentos\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  dataDesligamento: date(\"data_desligamento\").notNull(),\n  motivo: text(\"motivo\"),\n  tipoDesligamento: text(\"tipo_desligamento\").notNull().default(\"gestor\"), // \"funcionario\" ou \"gestor\"\n  funcionarioId: integer(\"funcionario_id\").notNull().references(() => funcionarios.id),\n  empresaId: integer(\"empresa_id\").notNull().references(() => empresas.id),\n  gestorId: integer(\"gestor_id\").notNull().references(() => gestores.id),\n  emailColaborador: text(\"email_colaborador\"),\n  tokenQuestionario: text(\"token_questionario\"),\n  tokenExpiraEm: timestamp(\"token_expira_em\"),\n  questionarioEnviado: integer(\"questionario_enviado\").notNull().default(0),\n  questionarioRespondido: integer(\"questionario_respondido\").notNull().default(0),\n});\n\nexport const documentosFuncionario = pgTable(\"documentos_funcionario\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  funcionarioId: integer(\"funcionario_id\").notNull().references(() => funcionarios.id),\n  tipoDocumento: text(\"tipo_documento\").notNull(),\n  numeroDocumento: text(\"numero_documento\").notNull(),\n  observacoes: text(\"observacoes\"),\n});\n\nexport const documentosGestor = pgTable(\"documentos_gestor\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  gestorId: integer(\"gestor_id\").notNull().references(() => gestores.id),\n  tipoDocumento: text(\"tipo_documento\").notNull(),\n  numeroDocumento: text(\"numero_documento\").notNull(),\n  observacoes: text(\"observacoes\"),\n});\n\nexport const formulariosExperiencia = pgTable(\"formularios_experiencia\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  funcionarioId: integer(\"funcionario_id\").notNull().references(() => funcionarios.id),\n  gestorId: integer(\"gestor_id\").notNull().references(() => gestores.id),\n  periodo: text(\"periodo\").notNull().default(\"1\"),\n  dataLimite: date(\"data_limite\").notNull(),\n  status: text(\"status\").notNull().default(\"pendente\"),\n  dataPreenchimento: date(\"data_preenchimento\"),\n  desempenho: integer(\"desempenho\"),\n  pontosFortes: text(\"pontos_fortes\"),\n  pontosMelhoria: text(\"pontos_melhoria\"),\n  recomendacao: text(\"recomendacao\"),\n  observacoes: text(\"observacoes\"),\n});\n\nexport const pesquisasClima = pgTable(\"pesquisas_clima\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  titulo: text(\"titulo\").notNull(),\n  descricao: text(\"descricao\"),\n  dataInicio: date(\"data_inicio\").notNull(),\n  dataFim: date(\"data_fim\").notNull(),\n  status: text(\"status\").notNull().default(\"ativa\"),\n  anonima: integer(\"anonima\").notNull().default(1),\n  empresaId: integer(\"empresa_id\").references(() => empresas.id),\n});\n\nexport const perguntasClima = pgTable(\"perguntas_clima\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  pesquisaId: integer(\"pesquisa_id\").notNull().references(() => pesquisasClima.id),\n  texto: text(\"texto\").notNull(),\n  tipo: text(\"tipo\").notNull(),\n  opcoes: text(\"opcoes\").array(),\n  ordem: integer(\"ordem\").notNull(),\n  obrigatoria: integer(\"obrigatoria\").notNull().default(1),\n});\n\nexport const respostasClima = pgTable(\"respostas_clima\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  pesquisaId: integer(\"pesquisa_id\").notNull().references(() => pesquisasClima.id),\n  perguntaId: integer(\"pergunta_id\").notNull().references(() => perguntasClima.id),\n  funcionarioId: integer(\"funcionario_id\").references(() => funcionarios.id),\n  valorEscala: integer(\"valor_escala\"),\n  textoResposta: text(\"texto_resposta\"),\n  dataResposta: date(\"data_resposta\").notNull(),\n});\n\nexport const treinamentos = pgTable(\"treinamentos\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  titulo: text(\"titulo\").notNull(),\n  tipo: text(\"tipo\").notNull(),\n  descricao: text(\"descricao\"),\n  gestorId: integer(\"gestor_id\").notNull().references(() => gestores.id),\n  dataInicio: date(\"data_inicio\").notNull(),\n  dataFim: date(\"data_fim\").notNull(),\n  cargaHoraria: integer(\"carga_horaria\"),\n  status: text(\"status\").notNull().default(\"planejado\"),\n});\n\nexport const treinamentoParticipantes = pgTable(\"treinamento_participantes\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  treinamentoId: integer(\"treinamento_id\").notNull().references(() => treinamentos.id),\n  funcionarioId: integer(\"funcionario_id\").notNull().references(() => funcionarios.id),\n  status: text(\"status\").notNull().default(\"inscrito\"),\n  dataInscricao: date(\"data_inscricao\").notNull(),\n  dataConclusao: date(\"data_conclusao\"),\n  avaliacaoNota: integer(\"avaliacao_nota\"),\n  observacoes: text(\"observacoes\"),\n});\n\nexport const pdis = pgTable(\"pdis\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  funcionarioId: integer(\"funcionario_id\").notNull().references(() => funcionarios.id),\n  gestorId: integer(\"gestor_id\").notNull().references(() => gestores.id),\n  dataInicio: date(\"data_inicio\").notNull(),\n  dataFim: date(\"data_fim\").notNull(),\n  status: text(\"status\").notNull().default(\"em_elaboracao\"),\n  observacoes: text(\"observacoes\"),\n});\n\nexport const pdiMetas = pgTable(\"pdi_metas\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  pdiId: integer(\"pdi_id\").notNull().references(() => pdis.id),\n  descricao: text(\"descricao\").notNull(),\n  prazo: date(\"prazo\").notNull(),\n  status: text(\"status\").notNull().default(\"pendente\"),\n  resultado: text(\"resultado\"),\n});\n\nexport const pdiCompetencias = pgTable(\"pdi_competencias\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  pdiId: integer(\"pdi_id\").notNull().references(() => pdis.id),\n  competencia: text(\"competencia\").notNull(),\n  nivelAtual: integer(\"nivel_atual\").notNull(),\n  nivelDesejado: integer(\"nivel_desejado\").notNull(),\n  observacoes: text(\"observacoes\"),\n});\n\nexport const pdiAcoes = pgTable(\"pdi_acoes\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  pdiId: integer(\"pdi_id\").notNull().references(() => pdis.id),\n  acao: text(\"acao\").notNull(),\n  tipo: text(\"tipo\").notNull(),\n  prazo: date(\"prazo\").notNull(),\n  status: text(\"status\").notNull().default(\"pendente\"),\n  resultado: text(\"resultado\"),\n});\n\nexport const questionariosDesligamento = pgTable(\"questionarios_desligamento\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  titulo: text(\"titulo\").notNull(),\n  descricao: text(\"descricao\"),\n  tipoDesligamento: text(\"tipo_desligamento\").notNull(), // \"funcionario\" ou \"gestor\"\n  ativo: integer(\"ativo\").notNull().default(1), // 1 = ativo, 0 = inativo\n  dataCriacao: date(\"data_criacao\").notNull().default(sql`CURRENT_DATE`),\n});\n\nexport const perguntasDesligamento = pgTable(\"perguntas_desligamento\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  questionarioId: integer(\"questionario_id\").notNull().references(() => questionariosDesligamento.id),\n  pergunta: text(\"pergunta\").notNull(),\n  tipo: text(\"tipo\").notNull(), // \"texto\", \"multipla_escolha\", \"escala\", \"data\"\n  opcoes: text(\"opcoes\").array(), // Para perguntas de múltipla escolha\n  obrigatoria: integer(\"obrigatoria\").notNull().default(1), // 1 = sim, 0 = não\n  ordem: integer(\"ordem\").notNull(),\n});\n\nexport const respostasDesligamento = pgTable(\"respostas_desligamento\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  desligamentoId: integer(\"desligamento_id\").notNull().references(() => desligamentos.id),\n  questionarioId: integer(\"questionario_id\").notNull().references(() => questionariosDesligamento.id),\n  perguntaId: integer(\"pergunta_id\").notNull().references(() => perguntasDesligamento.id),\n  valorEscala: integer(\"valor_escala\"),\n  textoResposta: text(\"texto_resposta\"),\n  valorData: date(\"valor_data\"), // Para perguntas do tipo \"data\"\n  dataResposta: date(\"data_resposta\").notNull().default(sql`CURRENT_DATE`),\n});\n\nexport const usuarios = pgTable(\"usuarios\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  nome: text(\"nome\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  senhaHash: text(\"senha_hash\").notNull(),\n  role: text(\"role\").notNull().default(\"funcionario\"), // \"admin\", \"gestor\", \"funcionario\"\n  ativo: integer(\"ativo\").notNull().default(1), // 1 = ativo, 0 = inativo\n  criadoEm: timestamp(\"criado_em\").notNull().default(sql`CURRENT_TIMESTAMP`),\n  atualizadoEm: timestamp(\"atualizado_em\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const sessoesTokens = pgTable(\"sessoes_tokens\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  usuarioId: integer(\"usuario_id\").notNull().references(() => usuarios.id),\n  tokenHash: text(\"token_hash\").notNull().unique(),\n  expiraEm: timestamp(\"expira_em\").notNull(),\n  criadoEm: timestamp(\"criado_em\").notNull().default(sql`CURRENT_TIMESTAMP`),\n});\n\nexport const insertEmpresaSchema = createInsertSchema(empresas).omit({ id: true });\n\nexport const insertGestorSchema = createInsertSchema(gestores).omit({ id: true });\n\nexport const insertFuncionarioSchema = createInsertSchema(funcionarios).omit({ id: true });\n\nexport const insertDesligamentoSchema = createInsertSchema(desligamentos).omit({ id: true });\n\nexport const insertDocumentoFuncionarioSchema = createInsertSchema(documentosFuncionario).omit({ id: true });\n\nexport const insertDocumentoGestorSchema = createInsertSchema(documentosGestor).omit({ id: true });\n\nexport const insertFormularioExperienciaSchema = createInsertSchema(formulariosExperiencia).omit({ id: true });\n\nexport const insertPesquisaClimaSchema = createInsertSchema(pesquisasClima).omit({ id: true });\n\nexport const insertPerguntaClimaSchema = createInsertSchema(perguntasClima).omit({ id: true });\n\nexport const insertRespostaClimaSchema = createInsertSchema(respostasClima).omit({ id: true });\n\nexport const insertTreinamentoSchema = createInsertSchema(treinamentos).omit({ id: true });\n\nexport const insertTreinamentoParticipanteSchema = createInsertSchema(treinamentoParticipantes).omit({ id: true });\n\nexport const insertPdiSchema = createInsertSchema(pdis).omit({ id: true });\n\nexport const insertPdiMetaSchema = createInsertSchema(pdiMetas).omit({ id: true });\n\nexport const insertPdiCompetenciaSchema = createInsertSchema(pdiCompetencias).omit({ id: true });\n\nexport const insertPdiAcaoSchema = createInsertSchema(pdiAcoes).omit({ id: true });\n\nexport const insertQuestionarioDesligamentoSchema = createInsertSchema(questionariosDesligamento).omit({ id: true, dataCriacao: true });\n\nexport const insertPerguntaDesligamentoSchema = createInsertSchema(perguntasDesligamento).omit({ id: true });\n\nexport const insertRespostaDesligamentoSchema = createInsertSchema(respostasDesligamento).omit({ id: true, dataResposta: true });\n\nexport type InsertEmpresa = z.infer<typeof insertEmpresaSchema>;\nexport type Empresa = typeof empresas.$inferSelect;\n\nexport type InsertGestor = z.infer<typeof insertGestorSchema>;\nexport type Gestor = typeof gestores.$inferSelect;\n\nexport type InsertFuncionario = z.infer<typeof insertFuncionarioSchema>;\nexport type Funcionario = typeof funcionarios.$inferSelect;\n\nexport type InsertDesligamento = z.infer<typeof insertDesligamentoSchema>;\nexport type Desligamento = typeof desligamentos.$inferSelect;\n\nexport type InsertDocumentoFuncionario = z.infer<typeof insertDocumentoFuncionarioSchema>;\nexport type DocumentoFuncionario = typeof documentosFuncionario.$inferSelect;\n\nexport type InsertDocumentoGestor = z.infer<typeof insertDocumentoGestorSchema>;\nexport type DocumentoGestor = typeof documentosGestor.$inferSelect;\n\nexport type InsertFormularioExperiencia = z.infer<typeof insertFormularioExperienciaSchema>;\nexport type FormularioExperiencia = typeof formulariosExperiencia.$inferSelect;\n\nexport type InsertPesquisaClima = z.infer<typeof insertPesquisaClimaSchema>;\nexport type PesquisaClima = typeof pesquisasClima.$inferSelect;\n\nexport type InsertPerguntaClima = z.infer<typeof insertPerguntaClimaSchema>;\nexport type PerguntaClima = typeof perguntasClima.$inferSelect;\n\nexport type InsertRespostaClima = z.infer<typeof insertRespostaClimaSchema>;\nexport type RespostaClima = typeof respostasClima.$inferSelect;\n\nexport type InsertTreinamento = z.infer<typeof insertTreinamentoSchema>;\nexport type Treinamento = typeof treinamentos.$inferSelect;\n\nexport type InsertTreinamentoParticipante = z.infer<typeof insertTreinamentoParticipanteSchema>;\nexport type TreinamentoParticipante = typeof treinamentoParticipantes.$inferSelect;\n\nexport type InsertPdi = z.infer<typeof insertPdiSchema>;\nexport type Pdi = typeof pdis.$inferSelect;\n\nexport type InsertPdiMeta = z.infer<typeof insertPdiMetaSchema>;\nexport type PdiMeta = typeof pdiMetas.$inferSelect;\n\nexport type InsertPdiCompetencia = z.infer<typeof insertPdiCompetenciaSchema>;\nexport type PdiCompetencia = typeof pdiCompetencias.$inferSelect;\n\nexport type InsertPdiAcao = z.infer<typeof insertPdiAcaoSchema>;\nexport type PdiAcao = typeof pdiAcoes.$inferSelect;\n\nexport type InsertQuestionarioDesligamento = z.infer<typeof insertQuestionarioDesligamentoSchema>;\nexport type QuestionarioDesligamento = typeof questionariosDesligamento.$inferSelect;\n\nexport type InsertPerguntaDesligamento = z.infer<typeof insertPerguntaDesligamentoSchema>;\nexport type PerguntaDesligamento = typeof perguntasDesligamento.$inferSelect;\n\nexport type InsertRespostaDesligamento = z.infer<typeof insertRespostaDesligamentoSchema>;\nexport type RespostaDesligamento = typeof respostasDesligamento.$inferSelect;\n\nexport const insertUsuarioSchema = createInsertSchema(usuarios)\n  .omit({ id: true, criadoEm: true, atualizadoEm: true })\n  .extend({\n    role: z.enum([\"admin\", \"gestor\", \"funcionario\"]),\n  });\n\nexport const insertSessaoTokenSchema = createInsertSchema(sessoesTokens).omit({ id: true, criadoEm: true });\n\nexport type InsertUsuario = z.infer<typeof insertUsuarioSchema>;\nexport type Usuario = typeof usuarios.$inferSelect;\n\nexport type InsertSessaoToken = z.infer<typeof insertSessaoTokenSchema>;\nexport type SessaoToken = typeof sessoesTokens.$inferSelect;\n","size_bytes":14871},"client/src/pages/PDI.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function PDI() {\n  return (\n    <div className=\"h-full overflow-auto p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n            PDI - Plano de Desenvolvimento Individual\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Gerencie os planos de desenvolvimento individual dos funcionários\n          </p>\n        </div>\n\n        <Card>\n          <CardContent className=\"py-16 text-center\">\n            <Construction className=\"w-16 h-16 mx-auto text-muted-foreground mb-6\" />\n            <h2 className=\"text-2xl font-semibold mb-2\" data-testid=\"text-em-construcao\">\n              Em Construção\n            </h2>\n            <p className=\"text-muted-foreground max-w-md mx-auto\">\n              Esta funcionalidade está sendo desenvolvida e estará disponível em breve.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1116},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/AddDialog.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface Field {\n  name: string;\n  label: string;\n  type: \"text\" | \"select\";\n  placeholder?: string;\n  options?: Array<{ value: string; label: string }>;\n  required?: boolean;\n}\n\ninterface AddDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  title: string;\n  description: string;\n  fields: Field[];\n  onSubmit: (data: Record<string, string>) => void;\n}\n\nexport function AddDialog({\n  open,\n  onOpenChange,\n  title,\n  description,\n  fields,\n  onSubmit,\n}: AddDialogProps) {\n  const [formData, setFormData] = useState<Record<string, string>>({});\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(`${title} form submitted:`, formData);\n    onSubmit(formData);\n    setFormData({});\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent data-testid={`dialog-add-${title.toLowerCase()}`}>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription>{description}</DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {fields.map((field) => (\n            <div key={field.name} className=\"space-y-2\">\n              <Label htmlFor={field.name}>\n                {field.label} {field.required && <span className=\"text-destructive\">*</span>}\n              </Label>\n              {field.type === \"text\" ? (\n                <Input\n                  id={field.name}\n                  placeholder={field.placeholder}\n                  value={formData[field.name] || \"\"}\n                  onChange={(e) =>\n                    setFormData({ ...formData, [field.name]: e.target.value })\n                  }\n                  required={field.required}\n                  data-testid={`input-${field.name}`}\n                />\n              ) : (\n                <Select\n                  value={formData[field.name] || \"\"}\n                  onValueChange={(value) =>\n                    setFormData({ ...formData, [field.name]: value })\n                  }\n                  required={field.required}\n                >\n                  <SelectTrigger data-testid={`select-${field.name}`}>\n                    <SelectValue placeholder={field.placeholder} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {field.options?.map((option) => (\n                      <SelectItem key={option.value} value={option.value}>\n                        {option.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              )}\n            </div>\n          ))}\n          <div className=\"flex justify-end gap-4 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancelar\n            </Button>\n            <Button type=\"submit\" data-testid=\"button-submit\">\n              Adicionar\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3533},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\") as Theme;\n    return stored || defaultTheme;\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1112},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/FuncionarioDetalhesDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Trash2 } from \"lucide-react\";\n\ninterface FuncionarioDetalhesDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  funcionario: {\n    id: number;\n    nome: string;\n    cargo?: string;\n    gestorNome?: string;\n  } | null;\n}\n\nconst tiposDocumento = [\n  { value: \"CPF\", label: \"CPF\" },\n  { value: \"RG\", label: \"RG\" },\n  { value: \"CNH\", label: \"CNH\" },\n  { value: \"CTPS\", label: \"CTPS\" },\n  { value: \"Título de Eleitor\", label: \"Título de Eleitor\" },\n  { value: \"PIS/PASEP\", label: \"PIS/PASEP\" },\n  { value: \"Certificado Reservista\", label: \"Certificado Reservista\" },\n  { value: \"Outro\", label: \"Outro\" },\n];\n\nexport function FuncionarioDetalhesDialog({\n  open,\n  onOpenChange,\n  funcionario,\n}: FuncionarioDetalhesDialogProps) {\n  const { toast } = useToast();\n  const [showAddDocumento, setShowAddDocumento] = useState(false);\n  const [novoDocumento, setNovoDocumento] = useState({\n    tipoDocumento: \"\",\n    numeroDocumento: \"\",\n    observacoes: \"\",\n  });\n\n  const { data: documentos = [], isLoading } = useQuery({\n    queryKey: [\"/api/funcionarios\", funcionario?.id, \"documentos\"],\n    enabled: !!funcionario?.id && open,\n  });\n\n  const addDocumentoMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\n        \"POST\",\n        `/api/funcionarios/${funcionario?.id}/documentos`,\n        data\n      );\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/funcionarios\", funcionario?.id, \"documentos\"],\n      });\n      toast({\n        title: \"Documento adicionado\",\n        description: \"O documento foi adicionado com sucesso.\",\n      });\n      setNovoDocumento({ tipoDocumento: \"\", numeroDocumento: \"\", observacoes: \"\" });\n      setShowAddDocumento(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao adicionar documento.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDocumentoMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/documentos/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/funcionarios\", funcionario?.id, \"documentos\"],\n      });\n      toast({\n        title: \"Documento removido\",\n        description: \"O documento foi removido com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao remover documento.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddDocumento = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!novoDocumento.tipoDocumento || !novoDocumento.numeroDocumento) {\n      toast({\n        title: \"Erro\",\n        description: \"Preencha todos os campos obrigatórios.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    addDocumentoMutation.mutate(novoDocumento);\n  };\n\n  if (!funcionario) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\" data-testid=\"dialog-funcionario-detalhes\">\n        <DialogHeader>\n          <DialogTitle>Detalhes do Funcionário</DialogTitle>\n          <DialogDescription>\n            Visualize e gerencie os documentos do funcionário\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Informações Básicas</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <div>\n                <span className=\"font-medium\">Nome:</span> {funcionario.nome}\n              </div>\n              {funcionario.cargo && (\n                <div>\n                  <span className=\"font-medium\">Cargo:</span> {funcionario.cargo}\n                </div>\n              )}\n              {funcionario.gestorNome && (\n                <div>\n                  <span className=\"font-medium\">Gestor:</span> {funcionario.gestorNome}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-4 space-y-0\">\n              <CardTitle className=\"text-lg\">Documentos</CardTitle>\n              <Button\n                onClick={() => setShowAddDocumento(!showAddDocumento)}\n                size=\"sm\"\n                data-testid=\"button-toggle-add-documento\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Adicionar Documento\n              </Button>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {showAddDocumento && (\n                <form onSubmit={handleAddDocumento} className=\"space-y-4 p-4 border rounded-md\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"tipoDocumento\">\n                      Tipo de Documento <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Select\n                      value={novoDocumento.tipoDocumento}\n                      onValueChange={(value) =>\n                        setNovoDocumento({ ...novoDocumento, tipoDocumento: value })\n                      }\n                      required\n                    >\n                      <SelectTrigger data-testid=\"select-tipo-documento\">\n                        <SelectValue placeholder=\"Selecione o tipo\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {tiposDocumento.map((tipo) => (\n                          <SelectItem key={tipo.value} value={tipo.value}>\n                            {tipo.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"numeroDocumento\">\n                      Número do Documento <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Input\n                      id=\"numeroDocumento\"\n                      value={novoDocumento.numeroDocumento}\n                      onChange={(e) =>\n                        setNovoDocumento({ ...novoDocumento, numeroDocumento: e.target.value })\n                      }\n                      placeholder=\"Digite o número do documento\"\n                      required\n                      data-testid=\"input-numero-documento\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"observacoes\">Observações</Label>\n                    <Textarea\n                      id=\"observacoes\"\n                      value={novoDocumento.observacoes}\n                      onChange={(e) =>\n                        setNovoDocumento({ ...novoDocumento, observacoes: e.target.value })\n                      }\n                      placeholder=\"Observações adicionais (opcional)\"\n                      data-testid=\"input-observacoes\"\n                    />\n                  </div>\n\n                  <div className=\"flex justify-end gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setShowAddDocumento(false);\n                        setNovoDocumento({ tipoDocumento: \"\", numeroDocumento: \"\", observacoes: \"\" });\n                      }}\n                      data-testid=\"button-cancel-documento\"\n                    >\n                      Cancelar\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={addDocumentoMutation.isPending}\n                      data-testid=\"button-submit-documento\"\n                    >\n                      Adicionar\n                    </Button>\n                  </div>\n                </form>\n              )}\n\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Tipo</TableHead>\n                      <TableHead>Número</TableHead>\n                      <TableHead>Observações</TableHead>\n                      <TableHead>Ações</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {isLoading ? (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center\">\n                          Carregando...\n                        </TableCell>\n                      </TableRow>\n                    ) : documentos.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center text-muted-foreground\">\n                          Nenhum documento cadastrado\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      documentos.map((doc: any) => (\n                        <TableRow key={doc.id} data-testid={`row-documento-${doc.id}`}>\n                          <TableCell>{doc.tipoDocumento}</TableCell>\n                          <TableCell>{doc.numeroDocumento}</TableCell>\n                          <TableCell>{doc.observacoes || \"-\"}</TableCell>\n                          <TableCell>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => deleteDocumentoMutation.mutate(doc.id)}\n                              disabled={deleteDocumentoMutation.isPending}\n                              data-testid={`button-delete-documento-${doc.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 text-destructive\" />\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11115},"client/src/components/app-sidebar.tsx":{"content":"import { LayoutDashboard, Users, Building2, UserCog, UserX, FileText, BarChart, GraduationCap, Target, ChevronRight, UserMinus, ClipboardList, Calendar, FileCheck, ClipboardCheck } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n} from \"@/components/ui/sidebar\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface MenuItem {\n  title: string;\n  url?: string;\n  icon: LucideIcon;\n  adminOnly?: boolean;\n  subItems?: MenuItem[];\n}\n\nconst items: MenuItem[] = [\n  {\n    title: \"Dashboard\",\n    url: \"/dashboard\",\n    icon: LayoutDashboard,\n  },\n  {\n    title: \"Desligamentos\",\n    icon: UserX,\n    subItems: [\n      {\n        title: \"Entrevista de desligamento – por parte do colaborador\",\n        url: \"/desligamentos/funcionario\",\n        icon: UserMinus,\n      },\n      {\n        title: \"Entrevista de desligamento – por parte da empresa\",\n        url: \"/desligamentos/gestor\",\n        icon: UserCog,\n      },\n      {\n        title: \"Questionários Preenchidos\",\n        icon: FileCheck,\n        adminOnly: true,\n        subItems: [\n          {\n            title: \"Por iniciativa do colaborador\",\n            url: \"/questionarios-preenchidos/funcionario\",\n            icon: UserMinus,\n          },\n          {\n            title: \"Por iniciativa da empresa\",\n            url: \"/questionarios-preenchidos/gestor\",\n            icon: UserCog,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: \"Avaliações de Experiência\",\n    icon: FileText,\n    subItems: [\n      {\n        title: \"01° Período\",\n        url: \"/formularios-experiencia/primeiro-periodo\",\n        icon: Calendar,\n      },\n      {\n        title: \"02° Período\",\n        url: \"/formularios-experiencia/segundo-periodo\",\n        icon: Calendar,\n      },\n    ],\n  },\n  {\n    title: \"Treinamentos\",\n    icon: GraduationCap,\n    subItems: [\n      {\n        title: \"Gerenciar Treinamentos\",\n        url: \"/treinamentos\",\n        icon: GraduationCap,\n      },\n      {\n        title: \"Avaliação de Eficácia\",\n        url: \"/treinamentos/avaliacao-eficacia\",\n        icon: ClipboardCheck,\n      },\n    ],\n  },\n  {\n    title: \"PDI\",\n    url: \"/pdi\",\n    icon: Target,\n  },\n  {\n    title: \"Ambiencia - Clima\",\n    url: \"/ambiencia\",\n    icon: BarChart,\n  },\n  {\n    title: \"Responder Pesquisas\",\n    url: \"/ambiencia/responder\",\n    icon: FileText,\n  },\n];\n\nconst cadastroItems = [\n  {\n    title: \"Empresas\",\n    url: \"/empresas\",\n    icon: Building2,\n  },\n  {\n    title: \"Gestores\",\n    url: \"/gestores\",\n    icon: UserCog,\n  },\n  {\n    title: \"Funcionários\",\n    url: \"/funcionarios\",\n    icon: Users,\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { usuario } = useAuth();\n\n  // Filtrar menus baseado no role do usuário\n  const visibleItems = items.filter(item => {\n    // Se o item é admin-only e o usuário não é admin, esconder\n    if (item.adminOnly && usuario?.role !== \"admin\") {\n      return false;\n    }\n    return true;\n  });\n  const visibleCadastroItems = cadastroItems;\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Menu Principal</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {visibleItems.map((item) => {\n                // Se o item tem subItems, renderiza um menu expansível\n                if (item.subItems) {\n                  return (\n                    <Collapsible key={item.title} asChild defaultOpen className=\"group/collapsible\">\n                      <SidebarMenuItem>\n                        <CollapsibleTrigger asChild>\n                          <SidebarMenuButton tooltip={item.title} data-testid={`link-${item.title.toLowerCase()}`}>\n                            <item.icon />\n                            <span>{item.title}</span>\n                            <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\" />\n                          </SidebarMenuButton>\n                        </CollapsibleTrigger>\n                        <CollapsibleContent>\n                          <SidebarMenuSub>\n                            {item.subItems\n                              .filter((subItem) => {\n                                // Filtrar sub-items admin-only\n                                if (subItem.adminOnly && usuario?.role !== \"admin\") {\n                                  return false;\n                                }\n                                return true;\n                              })\n                              .map((subItem) => {\n                                // Se o subItem tem subItems (nested menu), renderiza um collapsible aninhado\n                                if (subItem.subItems) {\n                                  return (\n                                    <Collapsible key={subItem.title} asChild defaultOpen className=\"group/nested-collapsible\">\n                                      <SidebarMenuSubItem>\n                                        <CollapsibleTrigger asChild>\n                                          <SidebarMenuSubButton data-testid={`link-${subItem.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                                            <subItem.icon />\n                                            <span>{subItem.title}</span>\n                                            <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/nested-collapsible:rotate-90\" />\n                                          </SidebarMenuSubButton>\n                                        </CollapsibleTrigger>\n                                        <CollapsibleContent>\n                                          <SidebarMenuSub>\n                                            {subItem.subItems.map((nestedItem) => nestedItem.url && (\n                                              <SidebarMenuSubItem key={nestedItem.title}>\n                                                <SidebarMenuSubButton\n                                                  asChild\n                                                  className={location === nestedItem.url ? \"bg-sidebar-accent\" : \"\"}\n                                                  data-testid={`link-${nestedItem.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                                                >\n                                                  <Link href={nestedItem.url}>\n                                                    <nestedItem.icon />\n                                                    <span>{nestedItem.title}</span>\n                                                  </Link>\n                                                </SidebarMenuSubButton>\n                                              </SidebarMenuSubItem>\n                                            ))}\n                                          </SidebarMenuSub>\n                                        </CollapsibleContent>\n                                      </SidebarMenuSubItem>\n                                    </Collapsible>\n                                  );\n                                }\n\n                                // Caso contrário, renderiza um subItem normal\n                                if (!subItem.url) return null;\n                                return (\n                                  <SidebarMenuSubItem key={subItem.title}>\n                                    <SidebarMenuSubButton\n                                      asChild\n                                      className={location === subItem.url ? \"bg-sidebar-accent\" : \"\"}\n                                      data-testid={`link-${subItem.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                                    >\n                                      <Link href={subItem.url}>\n                                        <subItem.icon />\n                                        <span>{subItem.title}</span>\n                                      </Link>\n                                    </SidebarMenuSubButton>\n                                  </SidebarMenuSubItem>\n                                );\n                              })}\n                          </SidebarMenuSub>\n                        </CollapsibleContent>\n                      </SidebarMenuItem>\n                    </Collapsible>\n                  );\n                }\n                \n                // Caso contrário, renderiza um item normal\n                if (!item.url) return null;\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton\n                      asChild\n                      className={location === item.url ? \"bg-sidebar-accent\" : \"\"}\n                      data-testid={`link-${item.title.toLowerCase()}`}\n                    >\n                      <Link href={item.url}>\n                        <item.icon />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        <SidebarGroup>\n          <SidebarGroupLabel>Cadastros</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {visibleCadastroItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    className={location === item.url ? \"bg-sidebar-accent\" : \"\"}\n                    data-testid={`link-${item.title.toLowerCase()}`}\n                  >\n                    <Link href={item.url}>\n                      <item.icon />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}\n","size_bytes":10410},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport { Button } from \"@/components/ui/button\";\nimport { AuthProvider, useAuth } from \"@/contexts/AuthContext\";\nimport { LogOut } from \"lucide-react\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/Login\";\nimport Home from \"@/pages/Home\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport NovoDesligamento from \"@/pages/NovoDesligamento\";\nimport DesligamentosFuncionario from \"@/pages/DesligamentosFuncionario\";\nimport DesligamentosGestor from \"@/pages/DesligamentosGestor\";\nimport Empresas from \"@/pages/Empresas\";\nimport Gestores from \"@/pages/Gestores\";\nimport Funcionarios from \"@/pages/Funcionarios\";\nimport FormulariosExperiencia from \"@/pages/FormulariosExperiencia\";\nimport Ambiencia from \"@/pages/Ambiencia\";\nimport AmbienciaPerguntas from \"@/pages/AmbienciaPerguntas\";\nimport AmbienciaResponder from \"@/pages/AmbienciaResponder\";\nimport AmbienciaAnalise from \"@/pages/AmbienciaAnalise\";\nimport Treinamentos from \"@/pages/Treinamentos\";\nimport TreinamentoDetalhes from \"@/pages/TreinamentoDetalhes\";\nimport AvaliacaoEficacia from \"@/pages/AvaliacaoEficacia\";\nimport PDI from \"@/pages/PDI\";\nimport PDIDetalhes from \"@/pages/PDIDetalhes\";\nimport QuestionariosDesligamento from \"@/pages/QuestionariosDesligamento\";\nimport QuestionariosPreenchidos from \"@/pages/QuestionariosPreenchidos\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/desligamento/novo\" component={NovoDesligamento} />\n      <Route path=\"/desligamentos/funcionario\" component={DesligamentosFuncionario} />\n      <Route path=\"/desligamentos/gestor\" component={DesligamentosGestor} />\n      <Route path=\"/questionarios-preenchidos/funcionario\" component={() => <QuestionariosPreenchidos tipoDesligamento=\"funcionario\" />} />\n      <Route path=\"/questionarios-preenchidos/gestor\" component={() => <QuestionariosPreenchidos tipoDesligamento=\"gestor\" />} />\n      <Route path=\"/empresas\" component={Empresas} />\n      <Route path=\"/gestores\" component={Gestores} />\n      <Route path=\"/funcionarios\" component={Funcionarios} />\n      <Route path=\"/formularios-experiencia/primeiro-periodo\" component={() => <FormulariosExperiencia periodo=\"1\" />} />\n      <Route path=\"/formularios-experiencia/segundo-periodo\" component={() => <FormulariosExperiencia periodo=\"2\" />} />\n      <Route path=\"/formularios-experiencia\" component={FormulariosExperiencia} />\n      <Route path=\"/ambiencia\" component={Ambiencia} />\n      <Route path=\"/ambiencia/:id/perguntas\" component={AmbienciaPerguntas} />\n      <Route path=\"/ambiencia/:id/analise\" component={AmbienciaAnalise} />\n      <Route path=\"/ambiencia/responder\" component={AmbienciaResponder} />\n      <Route path=\"/treinamentos\" component={Treinamentos} />\n      <Route path=\"/treinamentos/avaliacao-eficacia\" component={AvaliacaoEficacia} />\n      <Route path=\"/treinamentos/:id\" component={TreinamentoDetalhes} />\n      <Route path=\"/pdi\" component={PDI} />\n      <Route path=\"/pdi/:id\" component={PDIDetalhes} />\n      <Route path=\"/questionarios-desligamento\" component={QuestionariosDesligamento} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const [location] = useLocation();\n  const { usuario, logout, isLoading } = useAuth();\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  // Página de login não precisa de layout\n  if (location === \"/login\") {\n    return <Router />;\n  }\n\n  // Mostrar loading enquanto verifica autenticação ou se não há usuário\n  if (isLoading || !usuario) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-lg\">Carregando...</div>\n      </div>\n    );\n  }\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <div className=\"flex items-center gap-4\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              <h2 className=\"text-xl font-semibold\">Sistema de Gestão de Desligamentos</h2>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              {usuario && (\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"text-usuario-nome\">\n                  {usuario.nome} ({usuario.role})\n                </span>\n              )}\n              <ThemeToggle />\n              {usuario && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={logout}\n                  data-testid=\"button-logout\"\n                >\n                  <LogOut className=\"w-4 h-4 mr-2\" />\n                  Sair\n                </Button>\n              )}\n            </div>\n          </header>\n          <main className=\"flex-1 overflow-auto p-6\">\n            <div className=\"max-w-7xl mx-auto\">\n              <Router />\n            </div>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <AuthProvider>\n            <AppContent />\n          </AuthProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":6090},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/DesligamentosTable.tsx":{"content":"import { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card } from \"@/components/ui/card\";\n\nexport interface DesligamentoData {\n  id: number;\n  funcionarioNome: string;\n  cargo: string;\n  gestorNome: string;\n  empresaNome: string;\n  dataDesligamento: string;\n}\n\ninterface DesligamentosTableProps {\n  desligamentos: DesligamentoData[];\n}\n\nexport function DesligamentosTable({ desligamentos }: DesligamentosTableProps) {\n  return (\n    <Card>\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Funcionário</TableHead>\n              <TableHead>Cargo</TableHead>\n              <TableHead>Gestor</TableHead>\n              <TableHead>Empresa</TableHead>\n              <TableHead>Data do Desligamento</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {desligamentos.length === 0 ? (\n              <TableRow>\n                <TableCell colSpan={5} className=\"text-center text-muted-foreground\">\n                  Nenhum desligamento registrado\n                </TableCell>\n              </TableRow>\n            ) : (\n              desligamentos.map((desligamento) => (\n                <TableRow key={desligamento.id} data-testid={`row-desligamento-${desligamento.id}`}>\n                  <TableCell className=\"font-medium\" data-testid={`text-funcionario-${desligamento.id}`}>\n                    {desligamento.funcionarioNome}\n                  </TableCell>\n                  <TableCell data-testid={`text-cargo-${desligamento.id}`}>\n                    {desligamento.cargo}\n                  </TableCell>\n                  <TableCell data-testid={`text-gestor-${desligamento.id}`}>\n                    {desligamento.gestorNome}\n                  </TableCell>\n                  <TableCell data-testid={`text-empresa-${desligamento.id}`}>\n                    {desligamento.empresaNome}\n                  </TableCell>\n                  <TableCell data-testid={`text-data-${desligamento.id}`}>\n                    {format(new Date(desligamento.dataDesligamento), \"dd/MM/yyyy\", { locale: ptBR })}\n                  </TableCell>\n                </TableRow>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":2416},"design_guidelines.md":{"content":"# Design Guidelines: Employee Termination Management System\n\n## Design Approach\n\n**Selected Approach:** Design System (Shadcn UI + Modern Dashboard Patterns)\n\n**Justification:** As a data-intensive HR management tool focused on efficiency, accuracy, and professional workflows, this system requires a robust, consistent design system. The application prioritizes clear data presentation, efficient form completion, and quick dashboard comprehension over visual flair.\n\n**Key Design Principles:**\n- Clarity over decoration: Every element serves a functional purpose\n- Professional restraint: Corporate-appropriate aesthetics\n- Data-first hierarchy: Information architecture optimized for quick scanning\n- Workflow efficiency: Minimize clicks and cognitive load for repetitive tasks\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Dark Mode (Primary):**\n- Background: 222 47% 11% (deep charcoal)\n- Surface: 217 33% 17% (dark slate)\n- Primary: 217 91% 60% (professional blue)\n- Accent: 142 71% 45% (success green - use sparingly for positive actions)\n- Destructive: 0 72% 51% (alert red - for termination warnings)\n- Muted Text: 215 20% 65%\n\n**Light Mode:**\n- Background: 0 0% 100% (white)\n- Surface: 240 5% 96% (light gray)\n- Primary: 217 91% 60% (consistent blue)\n- Accent: 142 71% 45%\n- Destructive: 0 72% 51%\n- Text: 222 47% 11%\n\n**Semantic Colors:**\n- Chart Colors: Use distinct hues - 217 91% 60% (blue), 142 71% 45% (green), 45 93% 47% (amber), 262 83% 58% (purple)\n- Status Indicators: Green for active, Red for terminated, Amber for pending\n\n### B. Typography\n\n**Font Families:**\n- Primary: 'Inter' (via Google Fonts) - for UI elements, forms, tables\n- Display: 'Inter' with increased letter-spacing for headings\n\n**Type Scale:**\n- Page Titles: text-3xl font-bold (dashboard headings)\n- Section Headers: text-2xl font-semibold\n- Card Titles: text-lg font-semibold\n- Body/Table Text: text-sm font-normal\n- Labels: text-sm font-medium\n- Captions: text-xs text-muted-foreground\n\n### C. Layout System\n\n**Spacing Primitives:** Use Tailwind units of 4, 6, 8, 12 for consistency\n- Component Padding: p-6 (cards, modals)\n- Section Spacing: space-y-6 or gap-6\n- Page Margins: px-4 md:px-8\n- Tight Spacing: gap-4 (form fields)\n- Generous Spacing: gap-8 (between major sections)\n\n**Grid Structure:**\n- Dashboard: 12-column grid with responsive breakpoints\n- Tables: Full-width with horizontal scroll on mobile\n- Forms: Single column on mobile, 2-column on md+ breakpoints\n- Max Container Width: max-w-7xl mx-auto\n\n### D. Component Library\n\n**Navigation:**\n- Top Navigation Bar: Fixed header with logo, primary nav items, user profile dropdown\n- Breadcrumbs: Show current location (Dashboard > Desligamentos > Novo)\n- Sidebar (Optional): Collapsible on mobile with main sections (Dashboard, Desligamentos, Cadastros)\n\n**Data Tables:**\n- Shadcn Table component with alternating row backgrounds\n- Sticky header on scroll\n- Action column (right-aligned) with icon buttons for edit/delete\n- Hover state: subtle background change\n- Pagination controls at bottom-right\n- Sort indicators on column headers\n- Row selection checkboxes for batch operations\n\n**Forms:**\n- Shadcn Form components with clear label-input pairing\n- Dropdown Selects: Search-enabled for large lists (employees, managers)\n- Date Picker: Calendar popup with keyboard navigation\n- Required field indicators: Red asterisk on labels\n- Validation: Inline error messages below fields in destructive color\n- Form Actions: Primary button (right-aligned) + Cancel link (left)\n\n**Cards:**\n- Dashboard stat cards: p-6 with icon, large number, label, trend indicator\n- Bordered cards with subtle shadow: border rounded-lg shadow-sm\n- Metric Cards: Display KPIs (Total Desligamentos, Por Mês, etc.)\n\n**Charts (Using Shadcn Chart Components):**\n- Bar Charts: Primary for manager/company comparisons\n- Consistent color mapping across charts\n- Tooltips on hover showing exact values\n- Legend positioned at top-right\n- Axis labels in muted text color\n- Grid lines: subtle, dashed\n- Chart Container: Card wrapper with title and description\n\n**Buttons:**\n- Primary: Default Shadcn button styling (solid fill)\n- Secondary: variant=\"outline\" for cancel actions\n- Destructive: variant=\"destructive\" for delete confirmations\n- Ghost: variant=\"ghost\" for table row actions\n- Icon Buttons: Square, 40px with centered icon\n\n**Modals/Dialogs:**\n- Shadcn Dialog component for confirmations\n- Delete Confirmation: Show affected records before deletion\n- Max width: max-w-md for confirmations, max-w-2xl for complex forms\n\n**Badges:**\n- Status badges using Shadcn Badge component\n- Empresa badge: subtle background with company name\n- Role badge: for cargo display in tables\n\n### E. Page-Specific Layouts\n\n**Main Page (/) - Terminations Table:**\n- Page header with title \"Gestão de Desligamentos\" + \"Novo Desligamento\" button (top-right)\n- Filter controls above table: Date range picker, company filter, manager filter\n- Table with columns: Funcionário, Cargo, Gestor, Empresa, Data do Desligamento, Ações\n- Pagination: Show \"Mostrando 1-10 de 45 registros\"\n\n**Dashboard (/dashboard):**\n- Grid of metric cards at top (4 columns on lg, 2 on md, 1 on mobile)\n- Chart section: 2-column grid for side-by-side comparison\n- Each chart in a Card component with header\n- Responsive: Stack charts vertically on mobile\n\n**Form Pages (/desligamento/novo):**\n- Centered form with max-w-2xl\n- Card container with title at top\n- Field groups with space-y-4\n- Submit button with loading state\n- Toast notifications for success/error feedback\n\n**CRUD Management Pages:**\n- Tabs component for switching between Empresas, Gestores, Funcionários\n- Each tab shows table + \"Adicionar\" button\n- Inline editing or modal forms for quick updates\n\n### F. Interaction & Animation\n\n**Minimal Animations:**\n- Button hover: subtle background color shift (built-in Shadcn)\n- Table row hover: background color change\n- Page transitions: None (instant navigation)\n- Chart rendering: Fade-in on load (300ms)\n- Modal entry: Scale + fade (built-in Radix)\n\n**No Distracting Animations:** Avoid carousel auto-play, parallax scrolling, or complex SVG animations\n\n---\n\n## Images\n\nThis application should NOT include large hero images or decorative imagery. It's a business tool focused on data and functionality.\n\n**Icon Usage:**\n- Use Lucide React icons (included with Shadcn)\n- Navigation icons: 20px size\n- Stat card icons: 24px with subtle background circle\n- Table action icons: 16px in ghost buttons\n- Chart legends: 12px square color indicators\n\n---\n\n## Accessibility & Responsive Behavior\n\n- Maintain dark mode consistency across all form inputs and text fields\n- Ensure color contrast ratios meet WCAG AA standards\n- Tables: Horizontal scroll container on mobile with sticky first column\n- Forms: Stack to single column below md breakpoint\n- Charts: Reduce height on mobile, maintain readability\n- Touch targets: Minimum 44px for interactive elements on mobile","size_bytes":6972},"client/src/pages/Ambiencia.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function Ambiencia() {\n  return (\n    <div className=\"h-full overflow-auto p-8\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n            Pesquisas de Clima Organizacional\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Gerencie pesquisas de clima e analise o ambiente de trabalho\n          </p>\n        </div>\n\n        <Card>\n          <CardContent className=\"py-16 text-center\">\n            <Construction className=\"w-16 h-16 mx-auto text-muted-foreground mb-6\" />\n            <h2 className=\"text-2xl font-semibold mb-2\" data-testid=\"text-em-construcao\">\n              Em Construção\n            </h2>\n            <p className=\"text-muted-foreground max-w-md mx-auto\">\n              Esta funcionalidade está sendo desenvolvida e estará disponível em breve.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1108},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":533},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"replit.md":{"content":"# Employee Termination Management System\n\n## Overview\n\nA comprehensive web application designed to streamline HR workflows in Portuguese (Brazilian) for managing employee termination processes, experience evaluations, climate surveys, training/development programs, and Individual Development Plans (PDI). The system provides dashboard analytics, detailed record-keeping, and supports both employee-initiated and company-initiated terminations across different companies, managers, and employees. The core purpose is to enhance HR efficiency through robust data visualization and reporting features for critical HR functions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Updates\n\n### User Authentication and Access Control (October 2025)\n- **Complete Authentication System**: Implemented secure JWT-based authentication with role-based access control\n- **User Roles**: Three distinct roles with different permission levels:\n  - **Admin**: Full platform visibility but cannot fill questionnaires or forms (read-only for submissions)\n  - **Gestor** (Manager): Can manage teams, fill manager-specific forms and questionnaires\n  - **Funcionario** (Employee): Can fill employee-specific forms and questionnaires\n- **Security Features**:\n  - JWT access tokens (15 minutes expiration) stored in httpOnly cookies\n  - Rotating refresh tokens (30 days expiration) for enhanced security\n  - Automatic token refresh every 14 minutes to maintain session\n  - Password hashing with bcrypt (10 salt rounds)\n  - Token rotation on each refresh to prevent replay attacks\n  - 78+ API routes protected with `requireAuth` middleware\n- **Backend Protection**:\n  - `requireAuth` middleware: Verifies authentication for all protected routes\n  - `requireNotAdmin` middleware: Blocks Admin from POST routes for questionnaires/forms\n  - Returns clear 403 error messages when access is denied\n  - All auth routes: /api/auth/login, /api/auth/logout, /api/auth/refresh, /api/auth/me\n- **Frontend Features**:\n  - AuthContext manages global authentication state\n  - Automatic redirect to /login for unauthenticated users\n  - Route guards prevent unauthorized access\n  - Visual indicators (yellow warning banners) when Admin views submission pages\n  - Submit buttons disabled for Admin users with clear messaging\n  - Loading states during authentication verification\n- **User Experience**:\n  - Seamless session management with auto-refresh\n  - No interruption during active use (14-minute refresh interval)\n  - Clear visual feedback about role restrictions\n  - Role-based menu visibility - Admin-only items hidden from other users\n- **Default Admin Users**:\n  - admin@sistema.com (password: admin123)\n  - tpazdev@gmail.com (password: 123456)\n\n### Internal Termination Questionnaires (October 2025)\n- **Platform-Based Forms**: Termination questionnaires moved from external Microsoft Forms to internal platform forms\n- **Database Structure**:\n  - `respostasDesligamento` table stores questionnaire responses with references to desligamento, questionario, and pergunta\n  - Full support for text, multiple choice, and scale (1-10) question types\n  - Mandatory/optional question configuration\n- **Navigation**: \n  - Collapsible \"Questionários de Desligamento\" menu with two sub-items\n  - `/questionarios-desligamento/iniciativa-funcionario` - Employee-initiated termination questionnaires\n  - `/questionarios-desligamento/iniciativa-empresa` - Company-initiated termination questionnaires\n- **User Experience**:\n  - Internal dialog-based form filling with dynamic question rendering\n  - Validation for required fields before submission\n  - Automatic questionnaire selection based on termination type (funcionario/gestor)\n  - Searchable desligamento list filtered by type\n  - Success toast notification after submission\n- **Admin Question Preview**:\n  - Admin users can view active questionnaire questions on desligamento pages\n  - Blue collapsible card displays all questions with type badges (Texto Livre, Múltipla Escolha, Escala)\n  - Shows mandatory indicators and question ordering\n  - Yellow warning card appears when no active questionnaire is configured\n  - Available on both `/desligamentos/funcionario` and `/desligamentos/gestor` pages\n- **Technical Implementation**:\n  - `QuestionarioDesligamentoForm` component handles internal form rendering\n  - `EnviarQuestionario` component manages desligamento selection and dialog display\n  - `VisualizarPerguntasQuestionario` component displays questions for Admin review\n  - API endpoints for fetching active questionnaires and saving responses\n  - Support for multiple question types with appropriate UI controls\n\n### Filled Termination Questionnaires Viewing (October 2025)\n- **Admin-Only Feature**: Allows Admin users to view filled termination questionnaires\n- **Security Implementation**:\n  - Backend routes protected with `requireRole([\"admin\"])`\n  - Frontend route guards redirect non-admin users to dashboard\n  - Error handling displays permission messages for unauthorized access\n  - Menu items hidden from non-admin users via adminOnly flag\n- **Navigation**:\n  - Nested within \"Desligamentos\" menu as a collapsible sub-item\n  - \"Questionários Preenchidos\" appears below the two interview options (Admin-only)\n  - Two nested links:\n    - `/questionarios-preenchidos/funcionario` - View employee-initiated questionnaires\n    - `/questionarios-preenchidos/gestor` - View company-initiated questionnaires\n- **Features**:\n  - Lists desligamentos that have submitted questionnaire responses\n  - Search functionality to filter by employee name or position\n  - Dialog interface to view detailed question-answer pairs\n  - Displays text responses, scale values (1-10), and response dates\n  - Shows employee, manager, and termination date context\n- **API Endpoints** (All Admin-only):\n  - GET `/api/desligamentos-com-respostas` - Returns unique desligamento IDs with responses\n  - GET `/api/respostas-desligamento/:desligamentoId` - Returns all responses for a specific termination\n- **Database**:\n  - New `getDesligamentosComRespostas()` storage method returns distinct desligamentoIds\n  - Optimized queries to avoid redundant data\n- **Bug Fixes**:\n  - Corrected question field reference from `texto` to `pergunta` (matches database schema)\n\n### Experience Evaluation Period Management (October 2025)\n- **Two-Period Structure**: Avaliações de Experiência now organized into two separate periods:\n  - **01° Período**: First evaluation period for probationary employees (30 days)\n  - **02° Período**: Second evaluation period for probationary employees (60 days)\n- **Database Enhancement**: Added `periodo` field to formulariosExperiencia table (default: \"1\")\n- **Navigation**: Collapsible sidebar menu with two sub-items for easy access to each period\n- **Filtering**: Each period shows only its relevant evaluation forms\n- **Dedicated Routes**:\n  - `/formularios-experiencia/primeiro-periodo` - First period evaluations\n  - `/formularios-experiencia/segundo-periodo` - Second period evaluations\n- **Microsoft Forms Integration**: \n  - External form filling only - no internal evaluation form\n  - \"Enviar Formulário ao Gestor\" button on each pending evaluation form\n  - Dialog interface with manager/employee context and period information\n  - Single Microsoft Forms URL for all evaluation periods: https://forms.office.com/pages/responsepage.aspx?id=fKhs6GEk4keMILRXyHexKD9hUGoTJTBAh3e6AfxsqZRUREcxQzk3SUJNMkFYMVVKWE04R1IzRjJNUSQlQCN0PWcu&route=shorturl\n  - Copy link and open form functionality with toast notifications\n- **List/Table Layout**:\n  - Converted from card-based to table/list layout for better data visualization\n  - **Pendentes table columns**: ID, Nome do Funcionário, Nome do Gestor, Período, Data Limite, Status, Ações\n  - **Preenchidos table columns**: ID, Nome do Funcionário, Nome do Gestor, Período, Data Preenchimento, Desempenho, Status\n  - Responsive design with horizontal scroll on mobile devices\n  - Overdue evaluations highlighted with red background\n\n### Training Effectiveness Evaluation (October 2025)\n- **Submenu Structure**: Training menu now organized with collapsible submenu for better navigation:\n  - **Gerenciar Treinamentos** (`/treinamentos`) - Main training management page\n  - **Avaliação de Eficácia** (`/treinamentos/avaliacao-eficacia`) - Training effectiveness evaluation page\n- **New Page**: Avaliação de Eficácia de Treinamento\n  - Lists completed trainings (status \"concluido\") available for effectiveness evaluation\n  - Search functionality to filter trainings by title\n  - Table layout with columns: ID, Título, Tipo, Período, Gestor, Avaliações, Ações\n  - Visual status badges for evaluation progress:\n    - **Completo** (Green): 100% of participants evaluated\n    - **Parcial** (Gray): Partial evaluations completed (N/M)\n    - **Pendente** (Red): No evaluations submitted\n  - \"Ver Detalhes\" button navigates to existing training detail page\n- **Navigation Enhancement**: \n  - Icon: GraduationCap for main menu\n  - Icon: ClipboardCheck for evaluation submenu\n  - Collapsible menu structure supports nested navigation\n- **Integration**: Links to existing TreinamentoDetalhes component for viewing participant evaluations\n- **Routes**:\n  - `/treinamentos/avaliacao-eficacia` - Main evaluation listing page\n  - `/treinamentos/:id` - Training details (existing route, shows participant evaluations)\n\n## System Architecture\n\n### Frontend Architecture\n\nThe frontend is built with React and TypeScript using Vite. It utilizes Shadcn UI with Radix UI primitives for a consistent design system, styled with Tailwind CSS. Wouter handles client-side routing, and TanStack Query manages server state. Form handling is implemented with React Hook Form and Zod for validation. The UI/UX prioritizes a professional corporate aesthetic with a dark-mode first approach, consistent typography using the Inter font family, and chart visualizations for analytics.\n\n### Backend Architecture\n\nThe backend is an Express.js (Node.js) application exposing RESTful APIs. It includes middleware for JSON parsing, request logging, and centralized error handling. A storage abstraction layer is in place. The system provides comprehensive APIs for managing companies, managers, employees, terminations, experience evaluations, climate surveys, training programs, individual development plans (PDIs), and a dedicated system for creating and managing termination questionnaires.\n\n### Data Architecture\n\nThe system uses a PostgreSQL database, managed with Drizzle ORM for type-safe schema definitions and migrations. It employs a normalized relational structure with tables for:\n- **Authentication**: `usuarios` (Users with roles), `sessoes_tokens` (Session management with refresh tokens)\n- **Core Entities**: `empresas` (Companies), `gestores` (Managers), `funcionarios` (Employees)\n- **Terminations**: `desligamentos` (Terminations), `questionariosDesligamento` (Termination Questionnaires), `perguntasDesligamento` (Questionnaire Questions), `respostasDesligamento` (Questionnaire Responses)\n- **Evaluations**: `formulariosExperiencia` (Experience Evaluation Forms) with two-period support\n- **Climate**: `pesquisasClima` (Climate Surveys), `perguntasClima` (Survey Questions), `respostasClima` (Survey Responses)\n- **Development**: `treinamentos` (Training Programs), `participantesTreinamento` (Participants), `pdis` (Individual Development Plans), `metasPDI` (PDI Goals), `competenciasPDI` (PDI Competencies), `acoesPDI` (PDI Actions)\n- **Documents**: `documentosFuncionario` (Employee Documents), `documentosGestor` (Manager Documents)\n\n## External Dependencies\n\n### Third-Party Services\n\n- **Neon Database**: Serverless PostgreSQL hosting for all database operations.\n- **Google Fonts**: Inter font family for consistent typography.\n- **Microsoft Forms**: Integrated for experience evaluation forms only:\n  - Single Microsoft Forms URL for all evaluation periods: https://forms.office.com/pages/responsepage.aspx?id=fKhs6GEk4keMILRXyHexKD9hUGoTJTBAh3e6AfxsqZRUREcxQzk3SUJNMkFYMVVKWE04R1IzRjJNUSQlQCN0PWcu&route=shorturl\n  - Dialog interface with copy/open link functionality\n  - **Note**: Termination questionnaires are now handled internally via platform-based forms, no longer using Microsoft Forms\n\n### UI Component Libraries\n\n- **Radix UI Primitives**: Headless components for Dialogs, Popovers, Selects, etc.\n- **Recharts**: Used for data visualization and charting, especially for termination analytics.\n\n### Development Dependencies\n\n- **Vite**: Frontend build tool and development server.\n- **esbuild**: Server-side bundling.\n- **tsx**: TypeScript execution for development.\n- **PostCSS with Tailwind and Autoprefixer**: For styling and CSS processing.\n\n### Utility Libraries\n\n- **clsx** + **tailwind-merge**: For conditional CSS class management.\n- **date-fns**: For date formatting and manipulation, with pt-BR locale support.\n- **class-variance-authority**: For type-safe component variant management.\n- **cmdk**: For command palette functionality.\n- **embla-carousel-react**: For carousel features.\n- **nanoid**: For unique ID generation.","size_bytes":13171},"client/src/pages/AmbienciaResponder.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Slider } from \"@/components/ui/slider\";\n\ntype PesquisaClima = {\n  id: number;\n  titulo: string;\n  descricao: string | null;\n  dataInicio: string;\n  dataFim: string;\n  status: string;\n  anonima: number;\n};\n\ntype PerguntaClima = {\n  id: number;\n  texto: string;\n  tipo: string;\n  opcoes: string[] | null;\n  obrigatoria: number;\n};\n\nexport default function AmbienciaResponder() {\n  const { toast } = useToast();\n  const { usuario } = useAuth();\n  const [respostas, setRespostas] = useState<{ [key: number]: { valorEscala?: number; textoResposta?: string } }>({});\n  \n  const isAdmin = usuario?.role === \"admin\";\n\n  const { data: pesquisas = [] } = useQuery<PesquisaClima[]>({\n    queryKey: [\"/api/pesquisas-clima\"],\n  });\n\n  const pesquisasAtivas = pesquisas.filter(p => p.status === \"ativa\");\n\n  const handleResposta = (perguntaId: number, valor: number | string, tipo: \"escala\" | \"texto\") => {\n    setRespostas(prev => ({\n      ...prev,\n      [perguntaId]: tipo === \"escala\" ? { valorEscala: valor as number } : { textoResposta: valor as string },\n    }));\n  };\n\n  const submitMutation = useMutation({\n    mutationFn: async ({ pesquisaId, perguntas }: { pesquisaId: number; perguntas: PerguntaClima[] }) => {\n      const promises = perguntas.map(pergunta => {\n        const resposta = respostas[pergunta.id];\n        if (!resposta) return null;\n\n        return apiRequest(\"POST\", `/api/pesquisas-clima/${pesquisaId}/respostas`, {\n          perguntaId: pergunta.id,\n          funcionarioId: null,\n          ...resposta,\n        });\n      });\n\n      return await Promise.all(promises.filter(p => p !== null));\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso!\",\n        description: \"Respostas enviadas com sucesso\",\n      });\n      setRespostas({});\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível enviar as respostas\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n          Responder Pesquisas de Clima\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Participe das pesquisas de clima organizacional\n        </p>\n        {isAdmin && (\n          <div className=\"mt-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-md text-sm text-yellow-800 dark:text-yellow-200\">\n            Você está visualizando como administrador. Apenas gestores e funcionários podem responder pesquisas.\n          </div>\n        )}\n      </div>\n\n      <div className=\"space-y-6\">\n        {pesquisasAtivas.map(pesquisa => (\n          <PesquisaCard\n            key={pesquisa.id}\n            pesquisa={pesquisa}\n            respostas={respostas}\n            onResposta={handleResposta}\n            onSubmit={submitMutation.mutate}\n            isSubmitting={submitMutation.isPending}\n            isAdmin={isAdmin}\n          />\n        ))}\n      </div>\n\n      {pesquisasAtivas.length === 0 && (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <CheckCircle className=\"h-16 w-16 text-muted-foreground mb-4\" />\n            <p className=\"text-lg text-muted-foreground\" data-testid=\"text-empty-state\">\n              Não há pesquisas ativas no momento\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\nfunction PesquisaCard({\n  pesquisa,\n  respostas,\n  onResposta,\n  onSubmit,\n  isSubmitting,\n  isAdmin,\n}: {\n  pesquisa: PesquisaClima;\n  respostas: { [key: number]: { valorEscala?: number; textoResposta?: string } };\n  onResposta: (perguntaId: number, valor: number | string, tipo: \"escala\" | \"texto\") => void;\n  onSubmit: (data: { pesquisaId: number; perguntas: PerguntaClima[] }) => void;\n  isSubmitting: boolean;\n  isAdmin: boolean;\n}) {\n  const { data: perguntas = [] } = useQuery<PerguntaClima[]>({\n    queryKey: [\"/api/pesquisas-clima\", pesquisa.id, \"perguntas\"],\n    queryFn: () => fetch(`/api/pesquisas-clima/${pesquisa.id}/perguntas`).then(res => res.json()),\n  });\n\n  const handleSubmit = () => {\n    const obrigatorias = perguntas.filter(p => p.obrigatoria === 1);\n    const respondidas = obrigatorias.filter(p => respostas[p.id]);\n\n    if (respondidas.length < obrigatorias.length) {\n      alert(\"Por favor, responda todas as perguntas obrigatórias\");\n      return;\n    }\n\n    onSubmit({ pesquisaId: pesquisa.id, perguntas });\n  };\n\n  return (\n    <Card data-testid={`card-pesquisa-${pesquisa.id}`}>\n      <CardHeader>\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-2xl\">{pesquisa.titulo}</CardTitle>\n            {pesquisa.descricao && (\n              <CardDescription className=\"mt-2 text-base\">{pesquisa.descricao}</CardDescription>\n            )}\n          </div>\n          {pesquisa.anonima === 1 && (\n            <Badge variant=\"outline\" className=\"bg-blue-500/10 text-blue-500 border-blue-500/20\">\n              Anônima\n            </Badge>\n          )}\n        </div>\n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground mt-2\">\n          <Calendar className=\"h-4 w-4\" />\n          <span>\n            Até {format(new Date(pesquisa.dataFim), \"dd/MM/yyyy\", { locale: ptBR })}\n          </span>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {perguntas.map((pergunta, index) => (\n          <div key={pergunta.id} className=\"space-y-3\" data-testid={`pergunta-${pergunta.id}`}>\n            <Label className=\"text-base\">\n              {index + 1}. {pergunta.texto}\n              {pergunta.obrigatoria === 1 && <span className=\"text-red-500 ml-1\">*</span>}\n            </Label>\n\n            {pergunta.tipo === \"escala\" && (\n              <div className=\"space-y-2\">\n                <Slider\n                  min={1}\n                  max={10}\n                  step={1}\n                  value={[respostas[pergunta.id]?.valorEscala || 5]}\n                  onValueChange={(value) => onResposta(pergunta.id, value[0], \"escala\")}\n                  className=\"w-full\"\n                  data-testid={`slider-${pergunta.id}`}\n                />\n                <div className=\"flex justify-between text-sm text-muted-foreground\">\n                  <span>1 - Muito Insatisfeito</span>\n                  <span className=\"font-semibold text-foreground\">\n                    {respostas[pergunta.id]?.valorEscala || 5}\n                  </span>\n                  <span>10 - Muito Satisfeito</span>\n                </div>\n              </div>\n            )}\n\n            {pergunta.tipo === \"multipla_escolha\" && pergunta.opcoes && (\n              <RadioGroup\n                onValueChange={(value) => onResposta(pergunta.id, value, \"texto\")}\n                value={respostas[pergunta.id]?.textoResposta || \"\"}\n                data-testid={`radio-group-${pergunta.id}`}\n              >\n                {pergunta.opcoes.map((opcao, idx) => (\n                  <div key={idx} className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value={opcao} id={`${pergunta.id}-${idx}`} data-testid={`radio-${pergunta.id}-${idx}`} />\n                    <Label htmlFor={`${pergunta.id}-${idx}`} className=\"font-normal\">{opcao}</Label>\n                  </div>\n                ))}\n              </RadioGroup>\n            )}\n\n            {pergunta.tipo === \"texto_livre\" && (\n              <Textarea\n                placeholder=\"Escreva sua resposta aqui...\"\n                value={respostas[pergunta.id]?.textoResposta || \"\"}\n                onChange={(e) => onResposta(pergunta.id, e.target.value, \"texto\")}\n                className=\"min-h-[100px]\"\n                data-testid={`textarea-${pergunta.id}`}\n              />\n            )}\n          </div>\n        ))}\n\n        {perguntas.length > 0 && (\n          <Button\n            onClick={handleSubmit}\n            disabled={isSubmitting || isAdmin}\n            className=\"w-full\"\n            data-testid={`button-enviar-${pesquisa.id}`}\n          >\n            <CheckCircle className=\"h-4 w-4 mr-2\" />\n            Enviar Respostas\n          </Button>\n        )}\n\n        {perguntas.length === 0 && (\n          <p className=\"text-center text-muted-foreground py-4\">\n            Esta pesquisa ainda não possui perguntas\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9317},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/pages/QuestionariosDesligamento.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Trash2, Edit } from \"lucide-react\";\nimport type { QuestionarioDesligamento, PerguntaDesligamento } from \"@shared/schema\";\n\nexport default function QuestionariosDesligamento() {\n  const { toast } = useToast();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [perguntasDialogOpen, setPerguntasDialogOpen] = useState(false);\n  const [selectedQuestionario, setSelectedQuestionario] = useState<number | null>(null);\n  const [novoQuestionario, setNovoQuestionario] = useState({\n    titulo: \"\",\n    descricao: \"\",\n    tipoDesligamento: \"funcionario\" as \"funcionario\" | \"gestor\",\n  });\n  const [novaPergunta, setNovaPergunta] = useState({\n    pergunta: \"\",\n    tipo: \"texto_livre\" as \"escala\" | \"multipla_escolha\" | \"texto_livre\",\n    obrigatoria: 1,\n    ordem: 1,\n  });\n\n  const { data: questionarios = [] } = useQuery<QuestionarioDesligamento[]>({\n    queryKey: [\"/api/questionarios-desligamento\"],\n  });\n\n  const { data: perguntas = [] } = useQuery<PerguntaDesligamento[]>({\n    queryKey: [\"/api/questionarios-desligamento\", selectedQuestionario, \"perguntas\"],\n    enabled: selectedQuestionario !== null,\n  });\n\n  const criarQuestionarioMutation = useMutation({\n    mutationFn: async (data: typeof novoQuestionario) => {\n      const response = await apiRequest(\n        \"POST\",\n        \"/api/questionarios-desligamento\",\n        { ...data, dataCriacao: new Date().toISOString().split('T')[0], ativo: 1 }\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questionarios-desligamento\"] });\n      setDialogOpen(false);\n      setNovoQuestionario({ titulo: \"\", descricao: \"\", tipoDesligamento: \"funcionario\" });\n      toast({\n        title: \"Questionário criado\",\n        description: \"O questionário foi criado com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível criar o questionário\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletarQuestionarioMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/questionarios-desligamento/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questionarios-desligamento\"] });\n      toast({\n        title: \"Questionário deletado\",\n        description: \"O questionário foi removido com sucesso\",\n      });\n    },\n  });\n\n  const criarPerguntaMutation = useMutation({\n    mutationFn: async (data: typeof novaPergunta) => {\n      const response = await apiRequest(\n        \"POST\",\n        `/api/questionarios-desligamento/${selectedQuestionario}/perguntas`,\n        data\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questionarios-desligamento\", selectedQuestionario, \"perguntas\"] });\n      setNovaPergunta({ pergunta: \"\", tipo: \"texto_livre\", obrigatoria: 1, ordem: (perguntas.length || 0) + 1 });\n      toast({\n        title: \"Pergunta adicionada\",\n        description: \"A pergunta foi adicionada ao questionário\",\n      });\n    },\n  });\n\n  const deletarPerguntaMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/perguntas-desligamento/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questionarios-desligamento\", selectedQuestionario, \"perguntas\"] });\n      toast({\n        title: \"Pergunta removida\",\n        description: \"A pergunta foi removida do questionário\",\n      });\n    },\n  });\n\n  const handleCriarQuestionario = () => {\n    if (!novoQuestionario.titulo.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"O título do questionário é obrigatório\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    criarQuestionarioMutation.mutate(novoQuestionario);\n  };\n\n  const handleAdicionarPergunta = () => {\n    if (!novaPergunta.pergunta.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"O texto da pergunta é obrigatório\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    criarPerguntaMutation.mutate(novaPergunta);\n  };\n\n  const abrirPerguntasDialog = (questionarioId: number) => {\n    setSelectedQuestionario(questionarioId);\n    setPerguntasDialogOpen(true);\n  };\n\n  return (\n    <div className=\"flex-1 overflow-auto p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Questionários de Desligamento</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Gerencie os questionários enviados aos funcionários e gestores\n            </p>\n          </div>\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-novo-questionario\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Novo Questionário\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Criar Questionário</DialogTitle>\n                <DialogDescription>\n                  Preencha os dados do novo questionário de desligamento\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"titulo\">Título</Label>\n                  <Input\n                    id=\"titulo\"\n                    data-testid=\"input-titulo-questionario\"\n                    value={novoQuestionario.titulo}\n                    onChange={(e) => setNovoQuestionario({ ...novoQuestionario, titulo: e.target.value })}\n                    placeholder=\"Ex: Questionário de Desligamento - 2025\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"descricao\">Descrição</Label>\n                  <Textarea\n                    id=\"descricao\"\n                    data-testid=\"input-descricao-questionario\"\n                    value={novoQuestionario.descricao || \"\"}\n                    onChange={(e) => setNovoQuestionario({ ...novoQuestionario, descricao: e.target.value })}\n                    placeholder=\"Descreva o objetivo do questionário\"\n                    rows={3}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"tipo\">Tipo</Label>\n                  <Select\n                    value={novoQuestionario.tipoDesligamento}\n                    onValueChange={(value: \"funcionario\" | \"gestor\") => \n                      setNovoQuestionario({ ...novoQuestionario, tipoDesligamento: value })\n                    }\n                  >\n                    <SelectTrigger id=\"tipo\" data-testid=\"select-tipo-questionario\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"funcionario\">Funcionário</SelectItem>\n                      <SelectItem value=\"gestor\">Gestor</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <DialogFooter>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setDialogOpen(false)}\n                  data-testid=\"button-cancelar-questionario\"\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  onClick={handleCriarQuestionario}\n                  disabled={criarQuestionarioMutation.isPending}\n                  data-testid=\"button-salvar-questionario\"\n                >\n                  Criar Questionário\n                </Button>\n              </DialogFooter>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"grid gap-4\">\n          {questionarios.map((questionario) => (\n            <Card key={questionario.id}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-xl\">{questionario.titulo}</CardTitle>\n                    <CardDescription className=\"mt-1\">\n                      {questionario.descricao || \"Sem descrição\"}\n                    </CardDescription>\n                    <div className=\"flex gap-4 mt-3\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        Tipo: <span className=\"font-medium\">{questionario.tipoDesligamento === \"funcionario\" ? \"Funcionário\" : \"Gestor\"}</span>\n                      </span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        Criado em: <span className=\"font-medium\">{new Date(questionario.dataCriacao).toLocaleDateString('pt-BR')}</span>\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => abrirPerguntasDialog(questionario.id)}\n                      data-testid={`button-editar-perguntas-${questionario.id}`}\n                    >\n                      <Edit className=\"h-4 w-4 mr-2\" />\n                      Gerenciar Perguntas\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => deletarQuestionarioMutation.mutate(questionario.id)}\n                      data-testid={`button-deletar-questionario-${questionario.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n            </Card>\n          ))}\n\n          {questionarios.length === 0 && (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <p className=\"text-muted-foreground\">Nenhum questionário criado ainda</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Clique em \"Novo Questionário\" para começar\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Dialog de perguntas */}\n        <Dialog open={perguntasDialogOpen} onOpenChange={setPerguntasDialogOpen}>\n          <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Gerenciar Perguntas</DialogTitle>\n              <DialogDescription>\n                Adicione e gerencie as perguntas deste questionário\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div className=\"border rounded-lg p-4 space-y-4\">\n                <h3 className=\"font-semibold\">Adicionar Nova Pergunta</h3>\n                <div>\n                  <Label htmlFor=\"texto-pergunta\">Texto da Pergunta</Label>\n                  <Textarea\n                    id=\"texto-pergunta\"\n                    data-testid=\"input-texto-pergunta\"\n                    value={novaPergunta.pergunta}\n                    onChange={(e) => setNovaPergunta({ ...novaPergunta, pergunta: e.target.value })}\n                    placeholder=\"Digite a pergunta...\"\n                    rows={2}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"tipo-pergunta\">Tipo</Label>\n                    <Select\n                      value={novaPergunta.tipo}\n                      onValueChange={(value: \"escala\" | \"multipla_escolha\" | \"texto_livre\") => \n                        setNovaPergunta({ ...novaPergunta, tipo: value })\n                      }\n                    >\n                      <SelectTrigger id=\"tipo-pergunta\" data-testid=\"select-tipo-pergunta\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"texto_livre\">Texto Livre</SelectItem>\n                        <SelectItem value=\"escala\">Escala (1-10)</SelectItem>\n                        <SelectItem value=\"multipla_escolha\">Múltipla Escolha</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"obrigatoria\">Obrigatória?</Label>\n                    <Select\n                      value={novaPergunta.obrigatoria.toString()}\n                      onValueChange={(value) => \n                        setNovaPergunta({ ...novaPergunta, obrigatoria: parseInt(value) })\n                      }\n                    >\n                      <SelectTrigger id=\"obrigatoria\" data-testid=\"select-obrigatoria-pergunta\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"1\">Sim</SelectItem>\n                        <SelectItem value=\"0\">Não</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <Button \n                  onClick={handleAdicionarPergunta}\n                  disabled={criarPerguntaMutation.isPending}\n                  className=\"w-full\"\n                  data-testid=\"button-adicionar-pergunta\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Adicionar Pergunta\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                <h3 className=\"font-semibold\">Perguntas ({perguntas.length})</h3>\n                {perguntas.map((pergunta, index) => (\n                  <div key={pergunta.id} className=\"border rounded-lg p-4 flex items-start justify-between hover-elevate\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"font-semibold text-sm\">#{index + 1}</span>\n                        <span className=\"text-sm\">{pergunta.pergunta}</span>\n                      </div>\n                      <div className=\"flex gap-4 mt-2\">\n                        <span className=\"text-xs text-muted-foreground\">\n                          Tipo: {pergunta.tipo === \"texto_livre\" ? \"Texto Livre\" : pergunta.tipo === \"escala\" ? \"Escala\" : \"Múltipla Escolha\"}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {pergunta.obrigatoria ? \"Obrigatória\" : \"Opcional\"}\n                        </span>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => deletarPerguntaMutation.mutate(pergunta.id)}\n                      data-testid={`button-deletar-pergunta-${pergunta.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n\n                {perguntas.length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground text-sm\">\n                    Nenhuma pergunta adicionada ainda\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setPerguntasDialogOpen(false);\n                  setSelectedQuestionario(null);\n                }}\n                data-testid=\"button-fechar-perguntas\"\n              >\n                Fechar\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16911},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/GestorDetalhesDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Plus, Trash2 } from \"lucide-react\";\n\ninterface GestorDetalhesDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  gestor: {\n    id: number;\n    nome: string;\n    empresaNome?: string;\n  } | null;\n}\n\nconst tiposDocumento = [\n  { value: \"CPF\", label: \"CPF\" },\n  { value: \"RG\", label: \"RG\" },\n  { value: \"CNH\", label: \"CNH\" },\n  { value: \"CTPS\", label: \"CTPS\" },\n  { value: \"Título de Eleitor\", label: \"Título de Eleitor\" },\n  { value: \"PIS/PASEP\", label: \"PIS/PASEP\" },\n  { value: \"Certificado Reservista\", label: \"Certificado Reservista\" },\n  { value: \"Outro\", label: \"Outro\" },\n];\n\nexport function GestorDetalhesDialog({\n  open,\n  onOpenChange,\n  gestor,\n}: GestorDetalhesDialogProps) {\n  const { toast } = useToast();\n  const [showAddDocumento, setShowAddDocumento] = useState(false);\n  const [novoDocumento, setNovoDocumento] = useState({\n    tipoDocumento: \"\",\n    numeroDocumento: \"\",\n    observacoes: \"\",\n  });\n\n  const { data: documentos = [], isLoading } = useQuery({\n    queryKey: [\"/api/gestores\", gestor?.id, \"documentos\"],\n    enabled: !!gestor?.id && open,\n  });\n\n  const addDocumentoMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\n        \"POST\",\n        `/api/gestores/${gestor?.id}/documentos`,\n        data\n      );\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/gestores\", gestor?.id, \"documentos\"],\n      });\n      toast({\n        title: \"Documento adicionado\",\n        description: \"O documento foi adicionado com sucesso.\",\n      });\n      setNovoDocumento({ tipoDocumento: \"\", numeroDocumento: \"\", observacoes: \"\" });\n      setShowAddDocumento(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao adicionar documento.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDocumentoMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/documentos-gestor/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/gestores\", gestor?.id, \"documentos\"],\n      });\n      toast({\n        title: \"Documento removido\",\n        description: \"O documento foi removido com sucesso.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao remover documento.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddDocumento = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!novoDocumento.tipoDocumento || !novoDocumento.numeroDocumento) {\n      toast({\n        title: \"Erro\",\n        description: \"Preencha todos os campos obrigatórios.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    addDocumentoMutation.mutate(novoDocumento);\n  };\n\n  if (!gestor) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\" data-testid=\"dialog-gestor-detalhes\">\n        <DialogHeader>\n          <DialogTitle>Detalhes do Gestor</DialogTitle>\n          <DialogDescription>\n            Visualize e gerencie os documentos do gestor\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Informações Básicas</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <div>\n                <span className=\"font-medium\">Nome:</span> {gestor.nome}\n              </div>\n              {gestor.empresaNome && (\n                <div>\n                  <span className=\"font-medium\">Empresa:</span> {gestor.empresaNome}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between gap-4 space-y-0\">\n              <CardTitle className=\"text-lg\">Documentos</CardTitle>\n              <Button\n                onClick={() => setShowAddDocumento(!showAddDocumento)}\n                size=\"sm\"\n                data-testid=\"button-toggle-add-documento\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Adicionar Documento\n              </Button>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {showAddDocumento && (\n                <form onSubmit={handleAddDocumento} className=\"space-y-4 p-4 border rounded-md\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"tipoDocumento\">\n                      Tipo de Documento <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Select\n                      value={novoDocumento.tipoDocumento}\n                      onValueChange={(value) =>\n                        setNovoDocumento({ ...novoDocumento, tipoDocumento: value })\n                      }\n                      required\n                    >\n                      <SelectTrigger data-testid=\"select-tipo-documento\">\n                        <SelectValue placeholder=\"Selecione o tipo\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {tiposDocumento.map((tipo) => (\n                          <SelectItem key={tipo.value} value={tipo.value}>\n                            {tipo.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"numeroDocumento\">\n                      Número do Documento <span className=\"text-destructive\">*</span>\n                    </Label>\n                    <Input\n                      id=\"numeroDocumento\"\n                      value={novoDocumento.numeroDocumento}\n                      onChange={(e) =>\n                        setNovoDocumento({ ...novoDocumento, numeroDocumento: e.target.value })\n                      }\n                      placeholder=\"Digite o número do documento\"\n                      required\n                      data-testid=\"input-numero-documento\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"observacoes\">Observações</Label>\n                    <Textarea\n                      id=\"observacoes\"\n                      value={novoDocumento.observacoes}\n                      onChange={(e) =>\n                        setNovoDocumento({ ...novoDocumento, observacoes: e.target.value })\n                      }\n                      placeholder=\"Observações adicionais (opcional)\"\n                      data-testid=\"input-observacoes\"\n                    />\n                  </div>\n\n                  <div className=\"flex justify-end gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setShowAddDocumento(false);\n                        setNovoDocumento({ tipoDocumento: \"\", numeroDocumento: \"\", observacoes: \"\" });\n                      }}\n                      data-testid=\"button-cancel-documento\"\n                    >\n                      Cancelar\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={addDocumentoMutation.isPending}\n                      data-testid=\"button-submit-documento\"\n                    >\n                      Adicionar\n                    </Button>\n                  </div>\n                </form>\n              )}\n\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Tipo</TableHead>\n                      <TableHead>Número</TableHead>\n                      <TableHead>Observações</TableHead>\n                      <TableHead>Ações</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {isLoading ? (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center\">\n                          Carregando...\n                        </TableCell>\n                      </TableRow>\n                    ) : documentos.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={4} className=\"text-center text-muted-foreground\">\n                          Nenhum documento cadastrado\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      documentos.map((doc: any) => (\n                        <TableRow key={doc.id} data-testid={`row-documento-${doc.id}`}>\n                          <TableCell>{doc.tipoDocumento}</TableCell>\n                          <TableCell>{doc.numeroDocumento}</TableCell>\n                          <TableCell>{doc.observacoes || \"-\"}</TableCell>\n                          <TableCell>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => deleteDocumentoMutation.mutate(doc.id)}\n                              disabled={deleteDocumentoMutation.isPending}\n                              data-testid={`button-delete-documento-${doc.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 text-destructive\" />\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10821},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/DashboardCharts.tsx":{"content":"import { Bar, BarChart, CartesianGrid, XAxis, YAxis } from \"recharts\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/components/ui/chart\";\n\ninterface ChartData {\n  name: string;\n  value: number;\n}\n\ninterface DashboardChartsProps {\n  gestoresData: ChartData[];\n  empresasData: ChartData[];\n}\n\nconst chartConfig = {\n  value: {\n    label: \"Desligamentos\",\n    color: \"hsl(var(--chart-1))\",\n  },\n} satisfies ChartConfig;\n\nexport function DashboardCharts({ gestoresData, empresasData }: DashboardChartsProps) {\n  return (\n    <div className=\"grid gap-6 md:grid-cols-2\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Desligamentos por Gestor</CardTitle>\n          <CardDescription>\n            Quantidade de funcionários desligados por gestor responsável\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ChartContainer config={chartConfig}>\n            <BarChart data={gestoresData} margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis\n                dataKey=\"name\"\n                tickLine={false}\n                tickMargin={10}\n                axisLine={false}\n                angle={-45}\n                textAnchor=\"end\"\n                height={100}\n              />\n              <YAxis />\n              <ChartTooltip content={<ChartTooltipContent />} />\n              <Bar dataKey=\"value\" fill=\"var(--color-value)\" radius={[8, 8, 0, 0]} />\n            </BarChart>\n          </ChartContainer>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Desligamentos por Empresa</CardTitle>\n          <CardDescription>\n            Quantidade total de desligamentos em cada empresa\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <ChartContainer config={chartConfig}>\n            <BarChart data={empresasData} margin={{ top: 20, right: 20, bottom: 20, left: 20 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis\n                dataKey=\"name\"\n                tickLine={false}\n                tickMargin={10}\n                axisLine={false}\n                angle={-45}\n                textAnchor=\"end\"\n                height={100}\n              />\n              <YAxis />\n              <ChartTooltip content={<ChartTooltipContent />} />\n              <Bar dataKey=\"value\" fill=\"var(--color-value)\" radius={[8, 8, 0, 0]} />\n            </BarChart>\n          </ChartContainer>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2702},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/Home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { DesligamentosTable } from \"@/components/DesligamentosTable\";\n\nexport default function Home() {\n  const { data: desligamentos = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/desligamentos\"],\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Gestão de Desligamentos</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Visualize e gerencie todos os desligamentos registrados\n          </p>\n        </div>\n        <Link href=\"/desligamento/novo\">\n          <Button data-testid=\"button-novo-desligamento\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Novo Desligamento\n          </Button>\n        </Link>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center text-muted-foreground py-8\">Carregando...</div>\n      ) : (\n        <DesligamentosTable desligamentos={desligamentos} />\n      )}\n    </div>\n  );\n}\n","size_bytes":1155},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/pages/TreinamentoDetalhes.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Calendar, Clock, Users, Plus, Trash2, CheckCircle, XCircle, Loader2 } from \"lucide-react\";\n\ntype TreinamentoDetalhes = {\n  id: number;\n  titulo: string;\n  tipo: string;\n  descricao: string | null;\n  gestorId: number;\n  gestorNome: string | null;\n  dataInicio: string;\n  dataFim: string;\n  cargaHoraria: number | null;\n  status: string;\n};\n\ntype ParticipanteItem = {\n  id: number;\n  treinamentoId: number;\n  funcionarioId: number;\n  funcionarioNome: string | null;\n  funcionarioCargo: string | null;\n  status: string;\n  dataInscricao: string;\n  dataConclusao: string | null;\n  avaliacaoNota: number | null;\n  observacoes: string | null;\n};\n\nconst participanteSchema = z.object({\n  funcionarioId: z.coerce.number().min(1, \"Funcionário obrigatório\"),\n  status: z.enum([\"inscrito\", \"em_progresso\", \"concluido\", \"reprovado\"]).default(\"inscrito\"),\n});\n\nconst avaliacaoSchema = z.object({\n  status: z.enum([\"concluido\", \"reprovado\"]),\n  avaliacaoNota: z.coerce.number().min(0).max(10).optional(),\n  observacoes: z.string().optional(),\n  dataConclusao: z.string(),\n});\n\nexport default function TreinamentoDetalhes() {\n  const [, params] = useRoute(\"/treinamentos/:id\");\n  const [, setLocation] = useLocation();\n  const [dialogAddOpen, setDialogAddOpen] = useState(false);\n  const [avaliarDialogOpen, setAvaliarDialogOpen] = useState(false);\n  const [selectedParticipante, setSelectedParticipante] = useState<ParticipanteItem | null>(null);\n  const { toast } = useToast();\n  const id = params?.id ? parseInt(params.id) : null;\n\n  const { data: treinamento } = useQuery<TreinamentoDetalhes>({\n    queryKey: [\"/api/treinamentos\", id],\n    enabled: !!id,\n  });\n\n  const { data: participantes = [] } = useQuery<ParticipanteItem[]>({\n    queryKey: [\"/api/treinamentos\", id, \"participantes\"],\n    enabled: !!id,\n  });\n\n  const { data: funcionarios = [] } = useQuery<{ id: number; nome: string; cargo: string | null }[]>({\n    queryKey: [\"/api/funcionarios\"],\n  });\n\n  const formAdd = useForm({\n    resolver: zodResolver(participanteSchema),\n    defaultValues: {\n      funcionarioId: 0,\n      status: \"inscrito\" as const,\n    },\n  });\n\n  const formAvaliacao = useForm({\n    resolver: zodResolver(avaliacaoSchema),\n    defaultValues: {\n      status: \"concluido\" as const,\n      avaliacaoNota: 0,\n      observacoes: \"\",\n      dataConclusao: new Date().toISOString().split(\"T\")[0],\n    },\n  });\n\n  const addParticipanteMutation = useMutation({\n    mutationFn: async (data: { funcionarioId: number; status: string }) => {\n      return await apiRequest(\"POST\", `/api/treinamentos/${id}/participantes`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/treinamentos\", id, \"participantes\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Participante adicionado com sucesso\",\n      });\n      setDialogAddOpen(false);\n      formAdd.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível adicionar o participante\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const avaliarMutation = useMutation({\n    mutationFn: async (data: { status: string; avaliacaoNota?: number; observacoes?: string; dataConclusao: string }) => {\n      if (!selectedParticipante) throw new Error(\"Nenhum participante selecionado\");\n      return await apiRequest(\"PATCH\", `/api/participantes/${selectedParticipante.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/treinamentos\", id, \"participantes\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Avaliação salva com sucesso\",\n      });\n      setAvaliarDialogOpen(false);\n      setSelectedParticipante(null);\n      formAvaliacao.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível salvar a avaliação\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeParticipanteMutation = useMutation({\n    mutationFn: async (participanteId: number) => {\n      return await apiRequest(\"DELETE\", `/api/participantes/${participanteId}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/treinamentos\", id, \"participantes\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Participante removido com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível remover o participante\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddParticipante = (data: { funcionarioId: number; status: string }) => {\n    addParticipanteMutation.mutate(data);\n  };\n\n  const handleAvaliar = (participante: ParticipanteItem) => {\n    setSelectedParticipante(participante);\n    formAvaliacao.setValue(\"status\", \"concluido\");\n    formAvaliacao.setValue(\"avaliacaoNota\", participante.avaliacaoNota || 0);\n    formAvaliacao.setValue(\"observacoes\", participante.observacoes || \"\");\n    formAvaliacao.setValue(\"dataConclusao\", new Date().toISOString().split(\"T\")[0]);\n    setAvaliarDialogOpen(true);\n  };\n\n  const handleSaveAvaliacao = (data: any) => {\n    avaliarMutation.mutate(data);\n  };\n\n  const getTipoLabel = (tipo: string) => {\n    const tipos = {\n      onboarding: \"Onboarding\",\n      tecnico: \"Técnico\",\n      comportamental: \"Comportamental\",\n    };\n    return tipos[tipo as keyof typeof tipos] || tipo;\n  };\n\n  const getStatusLabel = (status: string) => {\n    const statusMap = {\n      inscrito: \"Inscrito\",\n      em_progresso: \"Em Progresso\",\n      concluido: \"Concluído\",\n      reprovado: \"Reprovado\",\n    };\n    return statusMap[status as keyof typeof statusMap] || status;\n  };\n\n  const getStatusBadgeColor = (status: string) => {\n    const cores = {\n      inscrito: \"bg-blue-500/10 text-blue-500 border-blue-500/20\",\n      em_progresso: \"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\",\n      concluido: \"bg-green-500/10 text-green-500 border-green-500/20\",\n      reprovado: \"bg-red-500/10 text-red-500 border-red-500/20\",\n    };\n    return cores[status as keyof typeof cores] || \"\";\n  };\n\n  if (!id || !treinamento) {\n    return (\n      <div className=\"space-y-4\">\n        <Button variant=\"ghost\" onClick={() => setLocation(\"/treinamentos\")} data-testid=\"button-voltar\">\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Voltar\n        </Button>\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <p className=\"text-muted-foreground\">Treinamento não encontrado</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Button variant=\"ghost\" onClick={() => setLocation(\"/treinamentos\")} data-testid=\"button-voltar\">\n        <ArrowLeft className=\"h-4 w-4 mr-2\" />\n        Voltar\n      </Button>\n\n      <Card data-testid=\"card-treinamento-info\">\n        <CardHeader>\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <CardTitle className=\"text-2xl\">{treinamento.titulo}</CardTitle>\n              <CardDescription className=\"mt-2\">\n                {getTipoLabel(treinamento.tipo)} • Gestor: {treinamento.gestorNome}\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n              <div className=\"text-sm\">\n                <span className=\"font-semibold\">Período:</span>\n                <p>\n                  {new Date(treinamento.dataInicio).toLocaleDateString(\"pt-BR\")}\n                  {\" - \"}\n                  {new Date(treinamento.dataFim).toLocaleDateString(\"pt-BR\")}\n                </p>\n              </div>\n            </div>\n            {treinamento.cargaHoraria && (\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                <div className=\"text-sm\">\n                  <span className=\"font-semibold\">Carga Horária:</span>\n                  <p>{treinamento.cargaHoraria}h</p>\n                </div>\n              </div>\n            )}\n            <div className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n              <div className=\"text-sm\">\n                <span className=\"font-semibold\">Participantes:</span>\n                <p>{participantes.length}</p>\n              </div>\n            </div>\n          </div>\n          {treinamento.descricao && (\n            <div>\n              <p className=\"text-sm font-semibold mb-1\">Descrição:</p>\n              <p className=\"text-sm text-muted-foreground\">{treinamento.descricao}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <div>\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-2xl font-bold\" data-testid=\"text-participantes-title\">\n            Participantes\n          </h2>\n          <Dialog open={dialogAddOpen} onOpenChange={setDialogAddOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-adicionar-participante\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Adicionar Participante\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Adicionar Participante</DialogTitle>\n                <DialogDescription>Selecione o funcionário para inscrever no treinamento</DialogDescription>\n              </DialogHeader>\n              <Form {...formAdd}>\n                <form onSubmit={formAdd.handleSubmit(handleAddParticipante)} className=\"space-y-4\">\n                  <FormField\n                    control={formAdd.control}\n                    name=\"funcionarioId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Funcionário</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value?.toString()}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-funcionario\">\n                              <SelectValue placeholder=\"Selecione o funcionário\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {funcionarios\n                              .filter(\n                                (f) => !participantes.some((p) => p.funcionarioId === f.id)\n                              )\n                              .map((func) => (\n                                <SelectItem\n                                  key={func.id}\n                                  value={func.id.toString()}\n                                  data-testid={`option-funcionario-${func.id}`}\n                                >\n                                  {func.nome} {func.cargo && `- ${func.cargo}`}\n                                </SelectItem>\n                              ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex justify-end gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setDialogAddOpen(false)}\n                      data-testid=\"button-cancelar-add\"\n                    >\n                      Cancelar\n                    </Button>\n                    <Button type=\"submit\" disabled={addParticipanteMutation.isPending} data-testid=\"button-confirmar-add\">\n                      {addParticipanteMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                      Adicionar\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {participantes.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12 text-center\">\n              <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-2\" />\n              <p className=\"text-muted-foreground\" data-testid=\"text-empty-participantes\">\n                Nenhum participante inscrito\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-3\">\n            {participantes.map((participante) => (\n              <Card key={participante.id} data-testid={`card-participante-${participante.id}`}>\n                <CardContent className=\"py-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <p className=\"font-semibold\">{participante.funcionarioNome}</p>\n                        <Badge variant=\"outline\" className={getStatusBadgeColor(participante.status)}>\n                          {getStatusLabel(participante.status)}\n                        </Badge>\n                      </div>\n                      {participante.funcionarioCargo && (\n                        <p className=\"text-sm text-muted-foreground mt-1\">{participante.funcionarioCargo}</p>\n                      )}\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Inscrito em: {new Date(participante.dataInscricao).toLocaleDateString(\"pt-BR\")}\n                      </p>\n                      {participante.dataConclusao && (\n                        <p className=\"text-xs text-muted-foreground\">\n                          Concluído em: {new Date(participante.dataConclusao).toLocaleDateString(\"pt-BR\")}\n                        </p>\n                      )}\n                      {participante.avaliacaoNota !== null && (\n                        <p className=\"text-sm mt-1\">\n                          <span className=\"font-semibold\">Nota:</span> {participante.avaliacaoNota}/10\n                        </p>\n                      )}\n                      {participante.observacoes && (\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          {participante.observacoes}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      {participante.status !== \"concluido\" && participante.status !== \"reprovado\" && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleAvaliar(participante)}\n                          data-testid={`button-avaliar-${participante.id}`}\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-2\" />\n                          Avaliar\n                        </Button>\n                      )}\n                      <Button\n                        size=\"sm\"\n                        variant=\"destructive\"\n                        onClick={() => removeParticipanteMutation.mutate(participante.id)}\n                        disabled={removeParticipanteMutation.isPending}\n                        data-testid={`button-remover-${participante.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <Dialog open={avaliarDialogOpen} onOpenChange={setAvaliarDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Avaliar Participante</DialogTitle>\n            <DialogDescription>\n              Registre a conclusão e avaliação de {selectedParticipante?.funcionarioNome}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...formAvaliacao}>\n            <form onSubmit={formAvaliacao.handleSubmit(handleSaveAvaliacao)} className=\"space-y-4\">\n              <FormField\n                control={formAvaliacao.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Resultado</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-resultado\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"concluido\" data-testid=\"option-concluido\">Aprovado/Concluído</SelectItem>\n                        <SelectItem value=\"reprovado\" data-testid=\"option-reprovado\">Reprovado</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={formAvaliacao.control}\n                name=\"avaliacaoNota\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nota (0-10)</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" min=\"0\" max=\"10\" {...field} data-testid=\"input-nota\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={formAvaliacao.control}\n                name=\"observacoes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Observações (Opcional)</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} className=\"min-h-[80px]\" data-testid=\"textarea-observacoes-avaliacao\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setAvaliarDialogOpen(false)}\n                  data-testid=\"button-cancelar-avaliacao\"\n                >\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={avaliarMutation.isPending} data-testid=\"button-salvar-avaliacao\">\n                  {avaliarMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                  Salvar Avaliação\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":19993},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/pages/Treinamentos.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { GraduationCap, Plus, Loader2, Eye, Search } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { Link } from \"wouter\";\n\ntype TreinamentoItem = {\n  id: number;\n  titulo: string;\n  tipo: string;\n  descricao: string | null;\n  gestorId: number;\n  gestorNome: string | null;\n  dataInicio: string;\n  dataFim: string;\n  cargaHoraria: number | null;\n  status: string;\n};\n\nconst treinamentoSchema = z.object({\n  titulo: z.string().min(1, \"Título obrigatório\"),\n  tipo: z.enum([\"onboarding\", \"tecnico\", \"comportamental\"]),\n  descricao: z.string().optional(),\n  gestorId: z.coerce.number().min(1, \"Gestor obrigatório\"),\n  dataInicio: z.string().min(1, \"Data de início obrigatória\"),\n  dataFim: z.string().min(1, \"Data de fim obrigatória\"),\n  cargaHoraria: z.coerce.number().min(1, \"Carga horária obrigatória\"),\n  status: z.enum([\"planejado\", \"em_andamento\", \"concluido\"]).default(\"planejado\"),\n});\n\ntype TreinamentoFormData = z.infer<typeof treinamentoSchema>;\n\nexport default function Treinamentos() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: treinamentos = [], isLoading } = useQuery<TreinamentoItem[]>({\n    queryKey: [\"/api/treinamentos\"],\n  });\n\n  const { data: gestores = [] } = useQuery<{ id: number; nome: string }[]>({\n    queryKey: [\"/api/gestores\"],\n  });\n\n  const form = useForm<TreinamentoFormData>({\n    resolver: zodResolver(treinamentoSchema),\n    defaultValues: {\n      titulo: \"\",\n      tipo: \"onboarding\",\n      descricao: \"\",\n      gestorId: 0,\n      dataInicio: \"\",\n      dataFim: \"\",\n      cargaHoraria: 0,\n      status: \"planejado\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: TreinamentoFormData) => {\n      return await apiRequest(\"POST\", \"/api/treinamentos\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/treinamentos\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Treinamento criado com sucesso\",\n      });\n      setDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível criar o treinamento\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: TreinamentoFormData) => {\n    createMutation.mutate(data);\n  };\n\n  const getTipoLabel = (tipo: string) => {\n    const tipos = {\n      onboarding: \"Onboarding\",\n      tecnico: \"Técnico\",\n      comportamental: \"Comportamental\",\n    };\n    return tipos[tipo as keyof typeof tipos] || tipo;\n  };\n\n  const getTipoBadgeColor = (tipo: string) => {\n    const cores = {\n      onboarding: \"bg-blue-500/10 text-blue-500 border-blue-500/20\",\n      tecnico: \"bg-purple-500/10 text-purple-500 border-purple-500/20\",\n      comportamental: \"bg-green-500/10 text-green-500 border-green-500/20\",\n    };\n    return cores[tipo as keyof typeof cores] || \"\";\n  };\n\n  const getStatusLabel = (status: string) => {\n    const statusMap = {\n      planejado: \"Planejado\",\n      em_andamento: \"Em Andamento\",\n      concluido: \"Concluído\",\n    };\n    return statusMap[status as keyof typeof statusMap] || status;\n  };\n\n  const getStatusBadgeColor = (status: string) => {\n    const cores = {\n      planejado: \"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\",\n      em_andamento: \"bg-blue-500/10 text-blue-500 border-blue-500/20\",\n      concluido: \"bg-green-500/10 text-green-500 border-green-500/20\",\n    };\n    return cores[status as keyof typeof cores] || \"\";\n  };\n\n  // Filtrar por termo de busca\n  const treinamentosFiltrados = treinamentos.filter((treinamento) =>\n    treinamento.titulo.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n            Treinamentos e Desenvolvimento\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Gerencie programas de onboarding, capacitação técnica e treinamentos comportamentais\n          </p>\n        </div>\n        <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-novo-treinamento\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Novo Treinamento\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Criar Novo Treinamento</DialogTitle>\n              <DialogDescription>\n                Preencha os dados do programa de treinamento\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"titulo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Título</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Ex: Onboarding Novos Funcionários\" data-testid=\"input-titulo\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"tipo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Tipo de Treinamento</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-tipo\">\n                            <SelectValue placeholder=\"Selecione o tipo\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"onboarding\" data-testid=\"option-onboarding\">Onboarding</SelectItem>\n                          <SelectItem value=\"tecnico\" data-testid=\"option-tecnico\">Capacitação Técnica</SelectItem>\n                          <SelectItem value=\"comportamental\" data-testid=\"option-comportamental\">Treinamento Comportamental / Soft Skills</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"gestorId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Gestor Responsável</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value?.toString()}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-gestor\">\n                            <SelectValue placeholder=\"Selecione o gestor\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {gestores.map((gestor) => (\n                            <SelectItem key={gestor.id} value={gestor.id.toString()} data-testid={`option-gestor-${gestor.id}`}>\n                              {gestor.nome}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"dataInicio\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Data de Início</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-data-inicio\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"dataFim\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Data de Término</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-data-fim\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"cargaHoraria\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Carga Horária (horas)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" {...field} min=\"1\" data-testid=\"input-carga-horaria\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"descricao\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Descrição (Opcional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Descreva os objetivos e conteúdo do treinamento...\"\n                          className=\"min-h-[100px]\"\n                          data-testid=\"textarea-descricao\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setDialogOpen(false)}\n                    data-testid=\"button-cancelar\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-salvar\">\n                    {createMutation.isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                    Criar Treinamento\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Treinamentos Cadastrados</CardTitle>\n          <CardDescription>\n            Lista de todos os programas de treinamento e desenvolvimento\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Buscar treinamento...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-buscar-treinamento\"\n              />\n            </div>\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center text-muted-foreground py-8\">Carregando...</div>\n          ) : treinamentosFiltrados.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <GraduationCap className=\"h-16 w-16 text-muted-foreground mb-4 mx-auto\" />\n              <p className=\"text-lg text-muted-foreground\" data-testid=\"text-empty-state\">\n                {treinamentos.length === 0 \n                  ? \"Nenhum treinamento cadastrado\"\n                  : \"Nenhum treinamento encontrado com esse termo de busca\"}\n              </p>\n            </div>\n          ) : (\n            <div className=\"rounded-md border overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>ID</TableHead>\n                    <TableHead>Título</TableHead>\n                    <TableHead>Tipo</TableHead>\n                    <TableHead>Período</TableHead>\n                    <TableHead>Gestor</TableHead>\n                    <TableHead>Carga Horária</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead className=\"text-right\">Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {treinamentosFiltrados.map((treinamento) => (\n                    <TableRow key={treinamento.id} data-testid={`row-treinamento-${treinamento.id}`}>\n                      <TableCell>{treinamento.id}</TableCell>\n                      <TableCell className=\"font-medium\">{treinamento.titulo}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className={getTipoBadgeColor(treinamento.tipo)} data-testid={`badge-tipo-${treinamento.id}`}>\n                          {getTipoLabel(treinamento.tipo)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-sm\">\n                        {format(new Date(treinamento.dataInicio), \"dd/MM/yyyy\", { locale: ptBR })} -{\" \"}\n                        {format(new Date(treinamento.dataFim), \"dd/MM/yyyy\", { locale: ptBR })}\n                      </TableCell>\n                      <TableCell>{treinamento.gestorNome || \"N/A\"}</TableCell>\n                      <TableCell>{treinamento.cargaHoraria ? `${treinamento.cargaHoraria}h` : \"N/A\"}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className={getStatusBadgeColor(treinamento.status)} data-testid={`badge-status-${treinamento.id}`}>\n                          {getStatusLabel(treinamento.status)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <Link href={`/treinamentos/${treinamento.id}`}>\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`button-detalhes-${treinamento.id}`}>\n                            <Eye className=\"h-4 w-4 mr-2\" />\n                            Ver Detalhes\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16168},"client/src/components/CrudTable.tsx":{"content":"import { Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface Column<T> {\n  header: string;\n  accessor: keyof T | ((item: T) => React.ReactNode);\n}\n\ninterface CrudTableProps<T extends { id: number }> {\n  title: string;\n  data: T[];\n  columns: Column<T>[];\n  onAddClick: () => void;\n  emptyMessage?: string;\n  actions?: (item: T) => React.ReactNode;\n}\n\nexport function CrudTable<T extends { id: number }>({\n  title,\n  data,\n  columns,\n  onAddClick,\n  emptyMessage = \"Nenhum registro encontrado\",\n  actions,\n}: CrudTableProps<T>) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-4 space-y-0\">\n        <CardTitle>{title}</CardTitle>\n        <Button onClick={onAddClick} data-testid={`button-add-${title.toLowerCase()}`}>\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Adicionar\n        </Button>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                {columns.map((column, index) => (\n                  <TableHead key={index}>{column.header}</TableHead>\n                ))}\n                {actions && <TableHead>Ações</TableHead>}\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {data.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={columns.length + (actions ? 1 : 0)} className=\"text-center text-muted-foreground\">\n                    {emptyMessage}\n                  </TableCell>\n                </TableRow>\n              ) : (\n                data.map((item) => (\n                  <TableRow key={item.id} data-testid={`row-${title.toLowerCase()}-${item.id}`}>\n                    {columns.map((column, colIndex) => (\n                      <TableCell key={colIndex}>\n                        {typeof column.accessor === \"function\"\n                          ? column.accessor(item)\n                          : String(item[column.accessor])}\n                      </TableCell>\n                    ))}\n                    {actions && <TableCell>{actions(item)}</TableCell>}\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2517},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2133},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 222 47% 11%;\n\n  --border: 240 6% 90%;\n\n  --card: 240 5% 96%;\n\n  --card-foreground: 222 47% 11%;\n\n  --card-border: 240 6% 88%;\n\n  --sidebar: 240 5% 94%;\n\n  --sidebar-foreground: 222 47% 11%;\n\n  --sidebar-border: 240 6% 86%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 240 5% 90%;\n\n  --sidebar-accent-foreground: 222 47% 11%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 240 5% 92%;\n\n  --popover-foreground: 222 47% 11%;\n\n  --popover-border: 240 6% 84%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 240 5% 88%;\n\n  --secondary-foreground: 222 47% 11%;\n\n  --muted: 240 5% 90%;\n\n  --muted-foreground: 215 20% 45%;\n\n  --accent: 240 10% 88%;\n\n  --accent-foreground: 222 47% 11%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 240 6% 80%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 45 93% 47%;\n  --chart-4: 262 83% 58%;\n  --chart-5: 0 72% 51%;\n\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', monospace;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 6% 10% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 6% 10% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(240 6% 10% / 0.06), 0px 1px 2px -1px hsl(240 6% 10% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(240 6% 10% / 0.08), 0px 2px 4px -2px hsl(240 6% 10% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(240 6% 10% / 0.10), 0px 3px 6px -3px hsl(240 6% 10% / 0.06);\n  --shadow-lg: 0px 10px 20px -4px hsl(240 6% 10% / 0.12), 0px 4px 8px -4px hsl(240 6% 10% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(240 6% 10% / 0.15), 0px 8px 12px -6px hsl(240 6% 10% / 0.10);\n  --shadow-2xl: 0px 30px 50px -12px hsl(240 6% 10% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 217 33% 20%;\n\n  --card: 217 33% 17%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 217 33% 22%;\n\n  --sidebar: 217 33% 19%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 217 33% 24%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 217 33% 23%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 217 33% 21%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 217 33% 26%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 217 33% 25%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 217 20% 23%;\n\n  --muted-foreground: 215 20% 65%;\n\n  --accent: 217 15% 25%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 217 33% 28%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 45 93% 47%;\n  --chart-4: 262 83% 58%;\n  --chart-5: 0 72% 51%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.30);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.25), 0px 1px 2px -1px hsl(0 0% 0% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.30), 0px 2px 4px -2px hsl(0 0% 0% / 0.25);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.35), 0px 3px 6px -3px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.40), 0px 4px 8px -4px hsl(0 0% 0% / 0.35);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.45), 0px 8px 12px -6px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 30px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11191},"client/src/pages/Funcionarios.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { CrudTable } from \"@/components/CrudTable\";\nimport { AddDialog } from \"@/components/AddDialog\";\nimport { FuncionarioDetalhesDialog } from \"@/components/FuncionarioDetalhesDialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText } from \"lucide-react\";\n\nexport default function Funcionarios() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [detalhesDialogOpen, setDetalhesDialogOpen] = useState(false);\n  const [funcionarioSelecionado, setFuncionarioSelecionado] = useState<any>(null);\n  const { toast } = useToast();\n\n  const { data: gestores = [] } = useQuery({\n    queryKey: [\"/api/gestores\"],\n  });\n\n  const { data: funcionarios = [], isLoading } = useQuery({\n    queryKey: [\"/api/funcionarios\"],\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: Record<string, string>) => {\n      return await apiRequest(\"POST\", \"/api/funcionarios\", {\n        nome: data.nome,\n        cargo: data.cargo,\n        gestorId: parseInt(data.gestorId),\n      });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/funcionarios\"] });\n      toast({\n        title: \"Funcionário adicionado\",\n        description: `${variables.nome} foi adicionado com sucesso.`,\n      });\n      setDialogOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao adicionar funcionário.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const funcionariosWithGestor = funcionarios.map((funcionario: any) => {\n    const gestor = gestores.find((g: any) => g.id === funcionario.gestorId);\n    return {\n      ...funcionario,\n      gestorNome: gestor?.nome || \"N/A\",\n    };\n  });\n\n  const columns = [\n    { header: \"ID\", accessor: \"id\" as const },\n    { header: \"Nome do Funcionário\", accessor: \"nome\" as const },\n    { header: \"Cargo\", accessor: \"cargo\" as const },\n    { header: \"Gestor\", accessor: \"gestorNome\" as const },\n  ];\n\n  const fields = [\n    {\n      name: \"nome\",\n      label: \"Nome do Funcionário\",\n      type: \"text\" as const,\n      placeholder: \"Digite o nome do funcionário\",\n      required: true,\n    },\n    {\n      name: \"cargo\",\n      label: \"Cargo\",\n      type: \"text\" as const,\n      placeholder: \"Digite o cargo\",\n      required: true,\n    },\n    {\n      name: \"gestorId\",\n      label: \"Gestor\",\n      type: \"select\" as const,\n      placeholder: \"Selecione um gestor\",\n      required: true,\n      options: gestores.map((g: any) => ({\n        value: g.id.toString(),\n        label: g.nome,\n      })),\n    },\n  ];\n\n  const handleVerDetalhes = (funcionario: any) => {\n    setFuncionarioSelecionado(funcionario);\n    setDetalhesDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return <div className=\"text-center py-8\">Carregando...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Funcionários</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Gerencie os funcionários cadastrados no sistema\n        </p>\n      </div>\n\n      <CrudTable\n        title=\"Funcionários Cadastrados\"\n        data={funcionariosWithGestor}\n        columns={columns}\n        onAddClick={() => setDialogOpen(true)}\n        emptyMessage=\"Nenhum funcionário cadastrado\"\n        actions={(funcionario) => (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => handleVerDetalhes(funcionario)}\n            data-testid={`button-detalhes-${funcionario.id}`}\n          >\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Ver Detalhes\n          </Button>\n        )}\n      />\n\n      <AddDialog\n        open={dialogOpen}\n        onOpenChange={setDialogOpen}\n        title=\"Adicionar Funcionário\"\n        description=\"Preencha os dados para adicionar um novo funcionário\"\n        fields={fields}\n        onSubmit={(data) => mutation.mutate(data)}\n      />\n\n      <FuncionarioDetalhesDialog\n        open={detalhesDialogOpen}\n        onOpenChange={setDetalhesDialogOpen}\n        funcionario={funcionarioSelecionado}\n      />\n    </div>\n  );\n}\n","size_bytes":4288},"client/src/pages/Empresas.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { CrudTable } from \"@/components/CrudTable\";\nimport { AddDialog } from \"@/components/AddDialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nexport default function Empresas() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: empresas = [], isLoading } = useQuery({\n    queryKey: [\"/api/empresas\"],\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: Record<string, string>) => {\n      return await apiRequest(\"POST\", \"/api/empresas\", data);\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/empresas\"] });\n      toast({\n        title: \"Empresa adicionada\",\n        description: `${variables.nome} foi adicionada com sucesso.`,\n      });\n      setDialogOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao adicionar empresa.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const columns = [\n    { header: \"ID\", accessor: \"id\" as const },\n    { header: \"Nome da Empresa\", accessor: \"nome\" as const },\n  ];\n\n  const fields = [\n    {\n      name: \"nome\",\n      label: \"Nome da Empresa\",\n      type: \"text\" as const,\n      placeholder: \"Digite o nome da empresa\",\n      required: true,\n    },\n  ];\n\n  if (isLoading) {\n    return <div className=\"text-center py-8\">Carregando...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Empresas</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Gerencie as empresas cadastradas no sistema\n        </p>\n      </div>\n\n      <CrudTable\n        title=\"Empresas Cadastradas\"\n        data={empresas}\n        columns={columns}\n        onAddClick={() => setDialogOpen(true)}\n        emptyMessage=\"Nenhuma empresa cadastrada\"\n      />\n\n      <AddDialog\n        open={dialogOpen}\n        onOpenChange={setDialogOpen}\n        title=\"Adicionar Empresa\"\n        description=\"Preencha os dados para adicionar uma nova empresa\"\n        fields={fields}\n        onSubmit={(data) => mutation.mutate(data)}\n      />\n    </div>\n  );\n}\n","size_bytes":2282},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/pages/DesligamentosGestor.tsx":{"content":"import { Link } from \"wouter\";\nimport { Plus } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { DesligamentosTable, type DesligamentoData } from \"@/components/DesligamentosTable\";\nimport { EnviarQuestionario } from \"@/components/EnviarQuestionario\";\nimport { VisualizarPerguntasQuestionario } from \"@/components/VisualizarPerguntasQuestionario\";\nimport { useAuth } from \"@/contexts/AuthContext\";\n\ninterface DesligamentoCompleto extends DesligamentoData {\n  motivo: string | null;\n  tipoDesligamento: string;\n  funcionarioId: number;\n  empresaId: number;\n  gestorId: number;\n}\n\nexport default function DesligamentosGestor() {\n  const { usuario } = useAuth();\n  const { data: desligamentos = [], isLoading } = useQuery<DesligamentoCompleto[]>({\n    queryKey: [\"/api/desligamentos\"],\n  });\n\n  // Filtra desligamentos iniciados pelo gestor/empresa\n  const desligamentosPorGestor = desligamentos.filter((d) => \n    d.tipoDesligamento === \"gestor\"\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Entrevista de desligamento – por parte da empresa</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Desligamentos iniciados pela empresa (demissão, término de contrato, etc.)\n          </p>\n        </div>\n        <Link href=\"/desligamento/novo\">\n          <Button data-testid=\"button-novo-desligamento\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Novo Desligamento\n          </Button>\n        </Link>\n      </div>\n\n      {usuario?.role === \"admin\" && (\n        <VisualizarPerguntasQuestionario tipoDesligamento=\"gestor\" />\n      )}\n\n      <EnviarQuestionario tipoDesligamento=\"gestor\" />\n\n      {isLoading ? (\n        <div className=\"text-center text-muted-foreground py-8\">Carregando...</div>\n      ) : desligamentosPorGestor.length === 0 ? (\n        <div className=\"text-center text-muted-foreground py-8\">\n          Nenhum desligamento por gestor encontrado\n        </div>\n      ) : (\n        <DesligamentosTable desligamentos={desligamentosPorGestor} />\n      )}\n    </div>\n  );\n}\n","size_bytes":2212},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/pages/AmbienciaPerguntas.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, ArrowLeft, Trash2, MoveUp, MoveDown } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Switch } from \"@/components/ui/switch\";\n\ntype PerguntaClima = {\n  id: number;\n  pesquisaId: number;\n  texto: string;\n  tipo: string;\n  opcoes: string[] | null;\n  ordem: number;\n  obrigatoria: number;\n};\n\nconst perguntaSchema = z.object({\n  texto: z.string().min(1, \"Pergunta é obrigatória\"),\n  tipo: z.enum([\"escala\", \"multipla_escolha\", \"texto_livre\"]),\n  opcoes: z.string().optional(),\n  obrigatoria: z.boolean().default(true),\n});\n\ntype PerguntaFormData = z.infer<typeof perguntaSchema>;\n\nexport default function AmbienciaPerguntas() {\n  const { toast } = useToast();\n  const [, params] = useRoute(\"/ambiencia/:id/perguntas\");\n  const pesquisaId = params?.id ? parseInt(params.id) : 0;\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const { data: pesquisa } = useQuery({\n    queryKey: [\"/api/pesquisas-clima\", pesquisaId],\n    queryFn: () => fetch(`/api/pesquisas-clima/${pesquisaId}`).then(res => res.json()),\n    enabled: !!pesquisaId,\n  });\n\n  const { data: perguntas = [], isLoading } = useQuery<PerguntaClima[]>({\n    queryKey: [\"/api/pesquisas-clima\", pesquisaId, \"perguntas\"],\n    queryFn: () => fetch(`/api/pesquisas-clima/${pesquisaId}/perguntas`).then(res => res.json()),\n    enabled: !!pesquisaId,\n  });\n\n  const form = useForm<PerguntaFormData>({\n    resolver: zodResolver(perguntaSchema),\n    defaultValues: {\n      texto: \"\",\n      tipo: \"escala\",\n      opcoes: \"\",\n      obrigatoria: true,\n    },\n  });\n\n  const tipo = form.watch(\"tipo\");\n\n  const createMutation = useMutation({\n    mutationFn: async (data: PerguntaFormData) => {\n      const payload = {\n        texto: data.texto,\n        tipo: data.tipo,\n        opcoes: data.tipo === \"multipla_escolha\" && data.opcoes\n          ? data.opcoes.split(\",\").map(o => o.trim())\n          : null,\n        ordem: perguntas.length + 1,\n        obrigatoria: data.obrigatoria ? 1 : 0,\n      };\n      return await apiRequest(\"POST\", `/api/pesquisas-clima/${pesquisaId}/perguntas`, payload);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pesquisas-clima\", pesquisaId, \"perguntas\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Pergunta criada com sucesso\",\n      });\n      setDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível criar a pergunta\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/perguntas-clima/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pesquisas-clima\", pesquisaId, \"perguntas\"] });\n      toast({\n        title: \"Sucesso!\",\n        description: \"Pergunta deletada com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível deletar a pergunta\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: PerguntaFormData) => {\n    createMutation.mutate(data);\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Tem certeza que deseja deletar esta pergunta?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const getTipoBadge = (tipo: string) => {\n    const tipoConfig = {\n      escala: { label: \"Escala 1-10\", className: \"bg-blue-500/10 text-blue-500 border-blue-500/20\" },\n      multipla_escolha: { label: \"Múltipla Escolha\", className: \"bg-purple-500/10 text-purple-500 border-purple-500/20\" },\n      texto_livre: { label: \"Texto Livre\", className: \"bg-green-500/10 text-green-500 border-green-500/20\" },\n    };\n\n    const config = tipoConfig[tipo as keyof typeof tipoConfig] || tipoConfig.escala;\n    return (\n      <Badge variant=\"outline\" className={config.className}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  if (isLoading) {\n    return <div className=\"text-center py-8\">Carregando...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button\n          variant=\"outline\"\n          onClick={() => window.location.href = \"/ambiencia\"}\n          data-testid=\"button-voltar\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Voltar\n        </Button>\n        <div className=\"flex-1\">\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n            {pesquisa?.titulo || \"Perguntas da Pesquisa\"}\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Gerencie as perguntas desta pesquisa de clima\n          </p>\n        </div>\n        <Button onClick={() => setDialogOpen(true)} data-testid=\"button-adicionar-pergunta\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Adicionar Pergunta\n        </Button>\n      </div>\n\n      <div className=\"space-y-4\">\n        {perguntas.map((pergunta, index) => (\n          <Card key={pergunta.id} data-testid={`card-pergunta-${pergunta.id}`}>\n            <CardHeader>\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm font-semibold text-muted-foreground\">#{index + 1}</span>\n                    <CardTitle className=\"text-lg\">{pergunta.texto}</CardTitle>\n                  </div>\n                  {pergunta.opcoes && pergunta.opcoes.length > 0 && (\n                    <CardDescription className=\"mt-2\">\n                      Opções: {pergunta.opcoes.join(\", \")}\n                    </CardDescription>\n                  )}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  {getTipoBadge(pergunta.tipo)}\n                  {pergunta.obrigatoria === 1 && (\n                    <Badge variant=\"outline\" className=\"bg-red-500/10 text-red-500 border-red-500/20\">\n                      Obrigatória\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleDelete(pergunta.id)}\n                  data-testid={`button-deletar-${pergunta.id}`}\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {perguntas.length === 0 && (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <p className=\"text-lg text-muted-foreground\" data-testid=\"text-empty-state\">\n              Nenhuma pergunta criada ainda\n            </p>\n            <Button onClick={() => setDialogOpen(true)} className=\"mt-4\" data-testid=\"button-criar-primeira\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Criar Primeira Pergunta\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Nova Pergunta</DialogTitle>\n            <DialogDescription>\n              Adicione uma nova pergunta à pesquisa de clima\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"texto\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Pergunta</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        placeholder=\"Ex: Como você avalia o ambiente de trabalho?\"\n                        className=\"min-h-[80px]\"\n                        data-testid=\"textarea-pergunta\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"tipo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tipo de Resposta</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-tipo\">\n                          <SelectValue placeholder=\"Selecione o tipo\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"escala\" data-testid=\"option-escala\">Escala (1-10)</SelectItem>\n                        <SelectItem value=\"multipla_escolha\" data-testid=\"option-multipla\">Múltipla Escolha</SelectItem>\n                        <SelectItem value=\"texto_livre\" data-testid=\"option-texto\">Texto Livre</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      {tipo === \"escala\" && \"O funcionário avalia de 1 a 10\"}\n                      {tipo === \"multipla_escolha\" && \"O funcionário escolhe uma opção\"}\n                      {tipo === \"texto_livre\" && \"O funcionário escreve uma resposta livre\"}\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {tipo === \"multipla_escolha\" && (\n                <FormField\n                  control={form.control}\n                  name=\"opcoes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Opções</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Separe as opções por vírgula: Ótimo, Bom, Regular, Ruim\"\n                          data-testid=\"input-opcoes\"\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Separe as opções por vírgula\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"obrigatoria\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">Pergunta Obrigatória</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        O funcionário deve responder esta pergunta\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-obrigatoria\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end gap-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)} data-testid=\"button-cancelar\">\n                  Cancelar\n                </Button>\n                <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-salvar\">\n                  Adicionar Pergunta\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":13008},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/storage.ts":{"content":"import {\n  empresas,\n  gestores,\n  funcionarios,\n  desligamentos,\n  documentosFuncionario,\n  documentosGestor,\n  formulariosExperiencia,\n  pesquisasClima,\n  perguntasClima,\n  respostasClima,\n  treinamentos,\n  treinamentoParticipantes,\n  pdis,\n  pdiMetas,\n  pdiCompetencias,\n  pdiAcoes,\n  questionariosDesligamento,\n  perguntasDesligamento,\n  respostasDesligamento,\n  usuarios,\n  sessoesTokens,\n  type Empresa,\n  type InsertEmpresa,\n  type Gestor,\n  type InsertGestor,\n  type Funcionario,\n  type InsertFuncionario,\n  type Desligamento,\n  type InsertDesligamento,\n  type DocumentoFuncionario,\n  type InsertDocumentoFuncionario,\n  type DocumentoGestor,\n  type InsertDocumentoGestor,\n  type FormularioExperiencia,\n  type InsertFormularioExperiencia,\n  type PesquisaClima,\n  type InsertPesquisaClima,\n  type PerguntaClima,\n  type InsertPerguntaClima,\n  type RespostaClima,\n  type InsertRespostaClima,\n  type Treinamento,\n  type InsertTreinamento,\n  type TreinamentoParticipante,\n  type InsertTreinamentoParticipante,\n  type Pdi,\n  type InsertPdi,\n  type PdiMeta,\n  type InsertPdiMeta,\n  type PdiCompetencia,\n  type InsertPdiCompetencia,\n  type PdiAcao,\n  type InsertPdiAcao,\n  type QuestionarioDesligamento,\n  type InsertQuestionarioDesligamento,\n  type PerguntaDesligamento,\n  type InsertPerguntaDesligamento,\n  type RespostaDesligamento,\n  type InsertRespostaDesligamento,\n  type Usuario,\n  type InsertUsuario,\n  type SessaoToken,\n  type InsertSessaoToken,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, sql, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  createEmpresa(empresa: InsertEmpresa): Promise<Empresa>;\n  getEmpresas(): Promise<Empresa[]>;\n  getEmpresa(id: number): Promise<Empresa | undefined>;\n\n  createGestor(gestor: InsertGestor): Promise<Gestor>;\n  getGestores(): Promise<Gestor[]>;\n  getGestor(id: number): Promise<Gestor | undefined>;\n\n  createFuncionario(funcionario: InsertFuncionario): Promise<Funcionario>;\n  getFuncionarios(): Promise<Funcionario[]>;\n  getFuncionario(id: number): Promise<Funcionario | undefined>;\n\n  createDesligamento(desligamento: InsertDesligamento): Promise<Desligamento>;\n  getDesligamentos(): Promise<Desligamento[]>;\n  getDesligamento(id: number): Promise<Desligamento | undefined>;\n  getDesligamentoByToken(token: string): Promise<Desligamento | undefined>;\n  updateDesligamento(id: number, data: Partial<InsertDesligamento>): Promise<Desligamento>;\n\n  getDesligamentosComDetalhes(): Promise<any[]>;\n  getDesligamentosPorGestor(): Promise<{ labels: string[]; data: number[] }>;\n  getDesligamentosPorEmpresa(): Promise<{ labels: string[]; data: number[] }>;\n\n  createDocumentoFuncionario(documento: InsertDocumentoFuncionario): Promise<DocumentoFuncionario>;\n  getDocumentosByFuncionario(funcionarioId: number): Promise<DocumentoFuncionario[]>;\n  deleteDocumentoFuncionario(id: number): Promise<void>;\n\n  createDocumentoGestor(documento: InsertDocumentoGestor): Promise<DocumentoGestor>;\n  getDocumentosByGestor(gestorId: number): Promise<DocumentoGestor[]>;\n  deleteDocumentoGestor(id: number): Promise<void>;\n\n  createFormularioExperiencia(formulario: InsertFormularioExperiencia): Promise<FormularioExperiencia>;\n  getFormulariosExperiencia(): Promise<any[]>;\n  getFormularioExperiencia(id: number): Promise<FormularioExperiencia | undefined>;\n  getFormulariosExperienciaPendentes(): Promise<any[]>;\n  getFormulariosExperienciaByGestor(gestorId: number): Promise<any[]>;\n  updateFormularioExperiencia(id: number, data: Partial<InsertFormularioExperiencia>): Promise<FormularioExperiencia>;\n\n  createPesquisaClima(pesquisa: InsertPesquisaClima): Promise<PesquisaClima>;\n  getPesquisasClima(): Promise<PesquisaClima[]>;\n  getPesquisaClima(id: number): Promise<PesquisaClima | undefined>;\n  updatePesquisaClima(id: number, data: Partial<InsertPesquisaClima>): Promise<PesquisaClima>;\n  deletePesquisaClima(id: number): Promise<void>;\n\n  createPerguntaClima(pergunta: InsertPerguntaClima): Promise<PerguntaClima>;\n  getPerguntasByPesquisa(pesquisaId: number): Promise<PerguntaClima[]>;\n  updatePerguntaClima(id: number, data: Partial<InsertPerguntaClima>): Promise<PerguntaClima>;\n  deletePerguntaClima(id: number): Promise<void>;\n\n  createRespostaClima(resposta: InsertRespostaClima): Promise<RespostaClima>;\n  getRespostasByPesquisa(pesquisaId: number): Promise<any[]>;\n  getRespostasByFuncionario(funcionarioId: number, pesquisaId: number): Promise<RespostaClima[]>;\n  getAnalisePesquisa(pesquisaId: number): Promise<any>;\n\n  createTreinamento(treinamento: InsertTreinamento): Promise<Treinamento>;\n  getTreinamentos(): Promise<any[]>;\n  getTreinamento(id: number): Promise<any | undefined>;\n  updateTreinamento(id: number, data: Partial<InsertTreinamento>): Promise<Treinamento>;\n  deleteTreinamento(id: number): Promise<void>;\n\n  addParticipante(participante: InsertTreinamentoParticipante): Promise<TreinamentoParticipante>;\n  getParticipantesByTreinamento(treinamentoId: number): Promise<any[]>;\n  updateParticipante(id: number, data: Partial<InsertTreinamentoParticipante>): Promise<TreinamentoParticipante>;\n  removeParticipante(id: number): Promise<void>;\n\n  createPdi(pdi: InsertPdi): Promise<Pdi>;\n  getPdis(): Promise<any[]>;\n  getPdi(id: number): Promise<any | undefined>;\n  updatePdi(id: number, data: Partial<InsertPdi>): Promise<Pdi>;\n  deletePdi(id: number): Promise<void>;\n\n  createPdiMeta(meta: InsertPdiMeta): Promise<PdiMeta>;\n  getMetasByPdi(pdiId: number): Promise<PdiMeta[]>;\n  updatePdiMeta(id: number, data: Partial<InsertPdiMeta>): Promise<PdiMeta>;\n  deletePdiMeta(id: number): Promise<void>;\n\n  createPdiCompetencia(competencia: InsertPdiCompetencia): Promise<PdiCompetencia>;\n  getCompetenciasByPdi(pdiId: number): Promise<PdiCompetencia[]>;\n  updatePdiCompetencia(id: number, data: Partial<InsertPdiCompetencia>): Promise<PdiCompetencia>;\n  deletePdiCompetencia(id: number): Promise<void>;\n\n  createPdiAcao(acao: InsertPdiAcao): Promise<PdiAcao>;\n  getAcoesByPdi(pdiId: number): Promise<PdiAcao[]>;\n  updatePdiAcao(id: number, data: Partial<InsertPdiAcao>): Promise<PdiAcao>;\n  deletePdiAcao(id: number): Promise<void>;\n\n  createQuestionarioDesligamento(questionario: InsertQuestionarioDesligamento): Promise<QuestionarioDesligamento>;\n  getQuestionariosDesligamento(): Promise<QuestionarioDesligamento[]>;\n  getQuestionarioDesligamento(id: number): Promise<QuestionarioDesligamento | undefined>;\n  updateQuestionarioDesligamento(id: number, data: Partial<InsertQuestionarioDesligamento>): Promise<QuestionarioDesligamento>;\n  deleteQuestionarioDesligamento(id: number): Promise<void>;\n\n  createPerguntaDesligamento(pergunta: InsertPerguntaDesligamento): Promise<PerguntaDesligamento>;\n  getPerguntasByQuestionario(questionarioId: number): Promise<PerguntaDesligamento[]>;\n  updatePerguntaDesligamento(id: number, data: Partial<InsertPerguntaDesligamento>): Promise<PerguntaDesligamento>;\n  deletePerguntaDesligamento(id: number): Promise<void>;\n\n  createRespostaDesligamento(resposta: InsertRespostaDesligamento): Promise<RespostaDesligamento>;\n  getRespostasByDesligamento(desligamentoId: number): Promise<RespostaDesligamento[]>;\n  getQuestionarioAtivoByTipo(tipoDesligamento: string): Promise<QuestionarioDesligamento | undefined>;\n  getDesligamentosComRespostas(): Promise<{ desligamentoId: number }[]>;\n\n  createUsuario(usuario: InsertUsuario): Promise<Usuario>;\n  getUsuarios(): Promise<Usuario[]>;\n  getUsuario(id: number): Promise<Usuario | undefined>;\n  getUsuarioByEmail(email: string): Promise<Usuario | undefined>;\n  getUsuarioByNomeAndRole(nome: string, role: string): Promise<Usuario | undefined>;\n  updateUsuario(id: number, data: Partial<InsertUsuario>): Promise<Usuario>;\n  deleteUsuario(id: number): Promise<void>;\n\n  createSessaoToken(sessao: InsertSessaoToken): Promise<SessaoToken>;\n  getSessaoToken(tokenHash: string): Promise<SessaoToken | undefined>;\n  deleteSessaoToken(tokenHash: string): Promise<void>;\n  deleteExpiredTokens(): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async createEmpresa(data: InsertEmpresa): Promise<Empresa> {\n    const [empresa] = await db\n      .insert(empresas)\n      .values(data)\n      .returning();\n    return empresa;\n  }\n\n  async getEmpresas(): Promise<Empresa[]> {\n    return await db.select().from(empresas);\n  }\n\n  async getEmpresa(id: number): Promise<Empresa | undefined> {\n    const [empresa] = await db.select().from(empresas).where(eq(empresas.id, id));\n    return empresa || undefined;\n  }\n\n  async createGestor(data: InsertGestor): Promise<Gestor> {\n    const [gestor] = await db\n      .insert(gestores)\n      .values(data)\n      .returning();\n    return gestor;\n  }\n\n  async getGestores(): Promise<Gestor[]> {\n    return await db.select().from(gestores);\n  }\n\n  async getGestor(id: number): Promise<Gestor | undefined> {\n    const [gestor] = await db.select().from(gestores).where(eq(gestores.id, id));\n    return gestor || undefined;\n  }\n\n  async createFuncionario(data: InsertFuncionario): Promise<Funcionario> {\n    const [funcionario] = await db\n      .insert(funcionarios)\n      .values(data)\n      .returning();\n    return funcionario;\n  }\n\n  async getFuncionarios(): Promise<Funcionario[]> {\n    return await db.select().from(funcionarios);\n  }\n\n  async getFuncionario(id: number): Promise<Funcionario | undefined> {\n    const [funcionario] = await db.select().from(funcionarios).where(eq(funcionarios.id, id));\n    return funcionario || undefined;\n  }\n\n  async createDesligamento(data: InsertDesligamento): Promise<Desligamento> {\n    const [desligamento] = await db\n      .insert(desligamentos)\n      .values(data)\n      .returning();\n    return desligamento;\n  }\n\n  async getDesligamentos(): Promise<Desligamento[]> {\n    return await db.select().from(desligamentos);\n  }\n\n  async getDesligamento(id: number): Promise<Desligamento | undefined> {\n    const [desligamento] = await db.select().from(desligamentos).where(eq(desligamentos.id, id));\n    return desligamento || undefined;\n  }\n\n  async getDesligamentoByToken(token: string): Promise<Desligamento | undefined> {\n    const [desligamento] = await db.select().from(desligamentos).where(eq(desligamentos.tokenQuestionario, token));\n    return desligamento || undefined;\n  }\n\n  async updateDesligamento(id: number, data: Partial<InsertDesligamento>): Promise<Desligamento> {\n    const [updated] = await db.update(desligamentos).set(data).where(eq(desligamentos.id, id)).returning();\n    return updated;\n  }\n\n  async getDesligamentosComDetalhes(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: desligamentos.id,\n        dataDesligamento: desligamentos.dataDesligamento,\n        motivo: desligamentos.motivo,\n        tipoDesligamento: desligamentos.tipoDesligamento,\n        funcionarioId: desligamentos.funcionarioId,\n        funcionarioNome: funcionarios.nome,\n        cargo: funcionarios.cargo,\n        gestorId: desligamentos.gestorId,\n        gestorNome: gestores.nome,\n        empresaId: desligamentos.empresaId,\n        empresaNome: empresas.nome,\n      })\n      .from(desligamentos)\n      .innerJoin(funcionarios, eq(desligamentos.funcionarioId, funcionarios.id))\n      .innerJoin(gestores, eq(desligamentos.gestorId, gestores.id))\n      .innerJoin(empresas, eq(desligamentos.empresaId, empresas.id))\n      .orderBy(desligamentos.dataDesligamento);\n\n    return result;\n  }\n\n  async getDesligamentosPorGestor(): Promise<{ labels: string[]; data: number[] }> {\n    const result = await db\n      .select({\n        gestorNome: gestores.nome,\n        count: sql<number>`count(*)::int`,\n      })\n      .from(desligamentos)\n      .innerJoin(gestores, eq(desligamentos.gestorId, gestores.id))\n      .groupBy(gestores.id, gestores.nome)\n      .orderBy(gestores.nome);\n\n    return {\n      labels: result.map((r) => r.gestorNome),\n      data: result.map((r) => r.count),\n    };\n  }\n\n  async getDesligamentosPorEmpresa(): Promise<{ labels: string[]; data: number[] }> {\n    const result = await db\n      .select({\n        empresaNome: empresas.nome,\n        count: sql<number>`count(*)::int`,\n      })\n      .from(desligamentos)\n      .innerJoin(empresas, eq(desligamentos.empresaId, empresas.id))\n      .groupBy(empresas.id, empresas.nome)\n      .orderBy(empresas.nome);\n\n    return {\n      labels: result.map((r) => r.empresaNome),\n      data: result.map((r) => r.count),\n    };\n  }\n\n  async createDocumentoFuncionario(data: InsertDocumentoFuncionario): Promise<DocumentoFuncionario> {\n    const [documento] = await db\n      .insert(documentosFuncionario)\n      .values(data)\n      .returning();\n    return documento;\n  }\n\n  async getDocumentosByFuncionario(funcionarioId: number): Promise<DocumentoFuncionario[]> {\n    return await db\n      .select()\n      .from(documentosFuncionario)\n      .where(eq(documentosFuncionario.funcionarioId, funcionarioId));\n  }\n\n  async deleteDocumentoFuncionario(id: number): Promise<void> {\n    await db.delete(documentosFuncionario).where(eq(documentosFuncionario.id, id));\n  }\n\n  async createDocumentoGestor(data: InsertDocumentoGestor): Promise<DocumentoGestor> {\n    const [documento] = await db\n      .insert(documentosGestor)\n      .values(data)\n      .returning();\n    return documento;\n  }\n\n  async getDocumentosByGestor(gestorId: number): Promise<DocumentoGestor[]> {\n    return await db\n      .select()\n      .from(documentosGestor)\n      .where(eq(documentosGestor.gestorId, gestorId));\n  }\n\n  async deleteDocumentoGestor(id: number): Promise<void> {\n    await db.delete(documentosGestor).where(eq(documentosGestor.id, id));\n  }\n\n  async createFormularioExperiencia(data: InsertFormularioExperiencia): Promise<FormularioExperiencia> {\n    const [formulario] = await db\n      .insert(formulariosExperiencia)\n      .values(data)\n      .returning();\n    return formulario;\n  }\n\n  async getFormulariosExperiencia(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: formulariosExperiencia.id,\n        funcionarioId: formulariosExperiencia.funcionarioId,\n        funcionarioNome: funcionarios.nome,\n        gestorId: formulariosExperiencia.gestorId,\n        gestorNome: gestores.nome,\n        periodo: formulariosExperiencia.periodo,\n        dataLimite: formulariosExperiencia.dataLimite,\n        status: formulariosExperiencia.status,\n        dataPreenchimento: formulariosExperiencia.dataPreenchimento,\n        desempenho: formulariosExperiencia.desempenho,\n        pontosFortes: formulariosExperiencia.pontosFortes,\n        pontosMelhoria: formulariosExperiencia.pontosMelhoria,\n        recomendacao: formulariosExperiencia.recomendacao,\n        observacoes: formulariosExperiencia.observacoes,\n      })\n      .from(formulariosExperiencia)\n      .innerJoin(funcionarios, eq(formulariosExperiencia.funcionarioId, funcionarios.id))\n      .innerJoin(gestores, eq(formulariosExperiencia.gestorId, gestores.id))\n      .orderBy(formulariosExperiencia.dataLimite);\n\n    return result;\n  }\n\n  async getFormularioExperiencia(id: number): Promise<FormularioExperiencia | undefined> {\n    const [formulario] = await db\n      .select()\n      .from(formulariosExperiencia)\n      .where(eq(formulariosExperiencia.id, id));\n    return formulario || undefined;\n  }\n\n  async getFormulariosExperienciaPendentes(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: formulariosExperiencia.id,\n        funcionarioId: formulariosExperiencia.funcionarioId,\n        funcionarioNome: funcionarios.nome,\n        gestorId: formulariosExperiencia.gestorId,\n        gestorNome: gestores.nome,\n        periodo: formulariosExperiencia.periodo,\n        dataLimite: formulariosExperiencia.dataLimite,\n        status: formulariosExperiencia.status,\n      })\n      .from(formulariosExperiencia)\n      .innerJoin(funcionarios, eq(formulariosExperiencia.funcionarioId, funcionarios.id))\n      .innerJoin(gestores, eq(formulariosExperiencia.gestorId, gestores.id))\n      .where(eq(formulariosExperiencia.status, \"pendente\"))\n      .orderBy(formulariosExperiencia.dataLimite);\n\n    return result;\n  }\n\n  async getFormulariosExperienciaByGestor(gestorId: number): Promise<any[]> {\n    const result = await db\n      .select({\n        id: formulariosExperiencia.id,\n        funcionarioId: formulariosExperiencia.funcionarioId,\n        funcionarioNome: funcionarios.nome,\n        gestorId: formulariosExperiencia.gestorId,\n        gestorNome: gestores.nome,\n        periodo: formulariosExperiencia.periodo,\n        dataLimite: formulariosExperiencia.dataLimite,\n        status: formulariosExperiencia.status,\n        dataPreenchimento: formulariosExperiencia.dataPreenchimento,\n        desempenho: formulariosExperiencia.desempenho,\n        pontosFortes: formulariosExperiencia.pontosFortes,\n        pontosMelhoria: formulariosExperiencia.pontosMelhoria,\n        recomendacao: formulariosExperiencia.recomendacao,\n        observacoes: formulariosExperiencia.observacoes,\n      })\n      .from(formulariosExperiencia)\n      .innerJoin(funcionarios, eq(formulariosExperiencia.funcionarioId, funcionarios.id))\n      .innerJoin(gestores, eq(formulariosExperiencia.gestorId, gestores.id))\n      .where(eq(formulariosExperiencia.gestorId, gestorId))\n      .orderBy(formulariosExperiencia.dataLimite);\n\n    return result;\n  }\n\n  async updateFormularioExperiencia(id: number, data: Partial<InsertFormularioExperiencia>): Promise<FormularioExperiencia> {\n    const [formulario] = await db\n      .update(formulariosExperiencia)\n      .set(data)\n      .where(eq(formulariosExperiencia.id, id))\n      .returning();\n    return formulario;\n  }\n\n  async createPesquisaClima(data: InsertPesquisaClima): Promise<PesquisaClima> {\n    const [pesquisa] = await db\n      .insert(pesquisasClima)\n      .values(data)\n      .returning();\n    return pesquisa;\n  }\n\n  async getPesquisasClima(): Promise<PesquisaClima[]> {\n    return await db.select().from(pesquisasClima).orderBy(pesquisasClima.dataInicio);\n  }\n\n  async getPesquisaClima(id: number): Promise<PesquisaClima | undefined> {\n    const [pesquisa] = await db.select().from(pesquisasClima).where(eq(pesquisasClima.id, id));\n    return pesquisa || undefined;\n  }\n\n  async updatePesquisaClima(id: number, data: Partial<InsertPesquisaClima>): Promise<PesquisaClima> {\n    const [pesquisa] = await db\n      .update(pesquisasClima)\n      .set(data)\n      .where(eq(pesquisasClima.id, id))\n      .returning();\n    return pesquisa;\n  }\n\n  async deletePesquisaClima(id: number): Promise<void> {\n    await db.delete(respostasClima).where(eq(respostasClima.pesquisaId, id));\n    await db.delete(perguntasClima).where(eq(perguntasClima.pesquisaId, id));\n    await db.delete(pesquisasClima).where(eq(pesquisasClima.id, id));\n  }\n\n  async createPerguntaClima(data: InsertPerguntaClima): Promise<PerguntaClima> {\n    const [pergunta] = await db\n      .insert(perguntasClima)\n      .values(data)\n      .returning();\n    return pergunta;\n  }\n\n  async getPerguntasByPesquisa(pesquisaId: number): Promise<PerguntaClima[]> {\n    return await db\n      .select()\n      .from(perguntasClima)\n      .where(eq(perguntasClima.pesquisaId, pesquisaId))\n      .orderBy(perguntasClima.ordem);\n  }\n\n  async updatePerguntaClima(id: number, data: Partial<InsertPerguntaClima>): Promise<PerguntaClima> {\n    const [pergunta] = await db\n      .update(perguntasClima)\n      .set(data)\n      .where(eq(perguntasClima.id, id))\n      .returning();\n    return pergunta;\n  }\n\n  async deletePerguntaClima(id: number): Promise<void> {\n    await db.delete(respostasClima).where(eq(respostasClima.perguntaId, id));\n    await db.delete(perguntasClima).where(eq(perguntasClima.id, id));\n  }\n\n  async createRespostaClima(data: InsertRespostaClima): Promise<RespostaClima> {\n    const [resposta] = await db\n      .insert(respostasClima)\n      .values(data)\n      .returning();\n    return resposta;\n  }\n\n  async getRespostasByPesquisa(pesquisaId: number): Promise<any[]> {\n    const result = await db\n      .select({\n        id: respostasClima.id,\n        pesquisaId: respostasClima.pesquisaId,\n        perguntaId: respostasClima.perguntaId,\n        funcionarioId: respostasClima.funcionarioId,\n        funcionarioNome: funcionarios.nome,\n        valorEscala: respostasClima.valorEscala,\n        textoResposta: respostasClima.textoResposta,\n        dataResposta: respostasClima.dataResposta,\n        perguntaTexto: perguntasClima.texto,\n        perguntaTipo: perguntasClima.tipo,\n      })\n      .from(respostasClima)\n      .leftJoin(funcionarios, eq(respostasClima.funcionarioId, funcionarios.id))\n      .innerJoin(perguntasClima, eq(respostasClima.perguntaId, perguntasClima.id))\n      .where(eq(respostasClima.pesquisaId, pesquisaId))\n      .orderBy(respostasClima.dataResposta);\n\n    return result;\n  }\n\n  async getRespostasByFuncionario(funcionarioId: number, pesquisaId: number): Promise<RespostaClima[]> {\n    return await db\n      .select()\n      .from(respostasClima)\n      .where(and(\n        eq(respostasClima.funcionarioId, funcionarioId),\n        eq(respostasClima.pesquisaId, pesquisaId)\n      ));\n  }\n\n  async getAnalisePesquisa(pesquisaId: number): Promise<any> {\n    const perguntas = await this.getPerguntasByPesquisa(pesquisaId);\n    const respostas = await this.getRespostasByPesquisa(pesquisaId);\n\n    const totalRespondentes = new Set(respostas.map(r => r.funcionarioId).filter(id => id !== null)).size;\n\n    const analise = perguntas.map(pergunta => {\n      const respostasPergunta = respostas.filter(r => r.perguntaId === pergunta.id);\n      \n      if (pergunta.tipo === 'escala') {\n        const valores = respostasPergunta.map(r => r.valorEscala).filter(v => v !== null) as number[];\n        const media = valores.length > 0 ? valores.reduce((a, b) => a + b, 0) / valores.length : 0;\n        \n        return {\n          pergunta: pergunta.texto,\n          tipo: pergunta.tipo,\n          totalRespostas: valores.length,\n          media: Math.round(media * 10) / 10,\n          valores,\n        };\n      } else if (pergunta.tipo === 'multipla_escolha') {\n        const opcoes: { [key: string]: number } = {};\n        respostasPergunta.forEach(r => {\n          if (r.textoResposta) {\n            opcoes[r.textoResposta] = (opcoes[r.textoResposta] || 0) + 1;\n          }\n        });\n        \n        return {\n          pergunta: pergunta.texto,\n          tipo: pergunta.tipo,\n          totalRespostas: respostasPergunta.length,\n          opcoes,\n        };\n      } else {\n        return {\n          pergunta: pergunta.texto,\n          tipo: pergunta.tipo,\n          totalRespostas: respostasPergunta.length,\n          respostas: respostasPergunta.map(r => ({\n            texto: r.textoResposta,\n            funcionario: r.funcionarioNome,\n          })),\n        };\n      }\n    });\n\n    return {\n      totalRespondentes,\n      analise,\n    };\n  }\n\n  async createTreinamento(data: InsertTreinamento): Promise<Treinamento> {\n    const [treinamento] = await db\n      .insert(treinamentos)\n      .values(data)\n      .returning();\n    return treinamento;\n  }\n\n  async getTreinamentos(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: treinamentos.id,\n        titulo: treinamentos.titulo,\n        tipo: treinamentos.tipo,\n        descricao: treinamentos.descricao,\n        gestorId: treinamentos.gestorId,\n        gestorNome: gestores.nome,\n        dataInicio: treinamentos.dataInicio,\n        dataFim: treinamentos.dataFim,\n        cargaHoraria: treinamentos.cargaHoraria,\n        status: treinamentos.status,\n      })\n      .from(treinamentos)\n      .leftJoin(gestores, eq(treinamentos.gestorId, gestores.id))\n      .orderBy(treinamentos.dataInicio);\n    \n    return result;\n  }\n\n  async getTreinamento(id: number): Promise<any | undefined> {\n    const [result] = await db\n      .select({\n        id: treinamentos.id,\n        titulo: treinamentos.titulo,\n        tipo: treinamentos.tipo,\n        descricao: treinamentos.descricao,\n        gestorId: treinamentos.gestorId,\n        gestorNome: gestores.nome,\n        dataInicio: treinamentos.dataInicio,\n        dataFim: treinamentos.dataFim,\n        cargaHoraria: treinamentos.cargaHoraria,\n        status: treinamentos.status,\n      })\n      .from(treinamentos)\n      .leftJoin(gestores, eq(treinamentos.gestorId, gestores.id))\n      .where(eq(treinamentos.id, id));\n    \n    return result || undefined;\n  }\n\n  async updateTreinamento(id: number, data: Partial<InsertTreinamento>): Promise<Treinamento> {\n    const [updated] = await db\n      .update(treinamentos)\n      .set(data)\n      .where(eq(treinamentos.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteTreinamento(id: number): Promise<void> {\n    await db.delete(treinamentos).where(eq(treinamentos.id, id));\n  }\n\n  async addParticipante(data: InsertTreinamentoParticipante): Promise<TreinamentoParticipante> {\n    const [participante] = await db\n      .insert(treinamentoParticipantes)\n      .values(data)\n      .returning();\n    return participante;\n  }\n\n  async getParticipantesByTreinamento(treinamentoId: number): Promise<any[]> {\n    const result = await db\n      .select({\n        id: treinamentoParticipantes.id,\n        treinamentoId: treinamentoParticipantes.treinamentoId,\n        funcionarioId: treinamentoParticipantes.funcionarioId,\n        funcionarioNome: funcionarios.nome,\n        funcionarioCargo: funcionarios.cargo,\n        status: treinamentoParticipantes.status,\n        dataInscricao: treinamentoParticipantes.dataInscricao,\n        dataConclusao: treinamentoParticipantes.dataConclusao,\n        avaliacaoNota: treinamentoParticipantes.avaliacaoNota,\n        observacoes: treinamentoParticipantes.observacoes,\n      })\n      .from(treinamentoParticipantes)\n      .leftJoin(funcionarios, eq(treinamentoParticipantes.funcionarioId, funcionarios.id))\n      .where(eq(treinamentoParticipantes.treinamentoId, treinamentoId));\n    \n    return result;\n  }\n\n  async updateParticipante(id: number, data: Partial<InsertTreinamentoParticipante>): Promise<TreinamentoParticipante> {\n    const [updated] = await db\n      .update(treinamentoParticipantes)\n      .set(data)\n      .where(eq(treinamentoParticipantes.id, id))\n      .returning();\n    return updated;\n  }\n\n  async removeParticipante(id: number): Promise<void> {\n    await db.delete(treinamentoParticipantes).where(eq(treinamentoParticipantes.id, id));\n  }\n\n  async createPdi(data: InsertPdi): Promise<Pdi> {\n    const [pdi] = await db\n      .insert(pdis)\n      .values(data)\n      .returning();\n    return pdi;\n  }\n\n  async getPdis(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: pdis.id,\n        funcionarioId: pdis.funcionarioId,\n        funcionarioNome: funcionarios.nome,\n        funcionarioCargo: funcionarios.cargo,\n        gestorId: pdis.gestorId,\n        gestorNome: gestores.nome,\n        dataInicio: pdis.dataInicio,\n        dataFim: pdis.dataFim,\n        status: pdis.status,\n        observacoes: pdis.observacoes,\n      })\n      .from(pdis)\n      .leftJoin(funcionarios, eq(pdis.funcionarioId, funcionarios.id))\n      .leftJoin(gestores, eq(pdis.gestorId, gestores.id))\n      .orderBy(pdis.dataInicio);\n    \n    return result;\n  }\n\n  async getPdi(id: number): Promise<any | undefined> {\n    const [result] = await db\n      .select({\n        id: pdis.id,\n        funcionarioId: pdis.funcionarioId,\n        funcionarioNome: funcionarios.nome,\n        funcionarioCargo: funcionarios.cargo,\n        gestorId: pdis.gestorId,\n        gestorNome: gestores.nome,\n        dataInicio: pdis.dataInicio,\n        dataFim: pdis.dataFim,\n        status: pdis.status,\n        observacoes: pdis.observacoes,\n      })\n      .from(pdis)\n      .leftJoin(funcionarios, eq(pdis.funcionarioId, funcionarios.id))\n      .leftJoin(gestores, eq(pdis.gestorId, gestores.id))\n      .where(eq(pdis.id, id));\n    \n    return result || undefined;\n  }\n\n  async updatePdi(id: number, data: Partial<InsertPdi>): Promise<Pdi> {\n    const [updated] = await db\n      .update(pdis)\n      .set(data)\n      .where(eq(pdis.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePdi(id: number): Promise<void> {\n    await db.delete(pdis).where(eq(pdis.id, id));\n  }\n\n  async createPdiMeta(data: InsertPdiMeta): Promise<PdiMeta> {\n    const [meta] = await db\n      .insert(pdiMetas)\n      .values(data)\n      .returning();\n    return meta;\n  }\n\n  async getMetasByPdi(pdiId: number): Promise<PdiMeta[]> {\n    return await db\n      .select()\n      .from(pdiMetas)\n      .where(eq(pdiMetas.pdiId, pdiId))\n      .orderBy(pdiMetas.prazo);\n  }\n\n  async updatePdiMeta(id: number, data: Partial<InsertPdiMeta>): Promise<PdiMeta> {\n    const [updated] = await db\n      .update(pdiMetas)\n      .set(data)\n      .where(eq(pdiMetas.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePdiMeta(id: number): Promise<void> {\n    await db.delete(pdiMetas).where(eq(pdiMetas.id, id));\n  }\n\n  async createPdiCompetencia(data: InsertPdiCompetencia): Promise<PdiCompetencia> {\n    const [competencia] = await db\n      .insert(pdiCompetencias)\n      .values(data)\n      .returning();\n    return competencia;\n  }\n\n  async getCompetenciasByPdi(pdiId: number): Promise<PdiCompetencia[]> {\n    return await db\n      .select()\n      .from(pdiCompetencias)\n      .where(eq(pdiCompetencias.pdiId, pdiId));\n  }\n\n  async updatePdiCompetencia(id: number, data: Partial<InsertPdiCompetencia>): Promise<PdiCompetencia> {\n    const [updated] = await db\n      .update(pdiCompetencias)\n      .set(data)\n      .where(eq(pdiCompetencias.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePdiCompetencia(id: number): Promise<void> {\n    await db.delete(pdiCompetencias).where(eq(pdiCompetencias.id, id));\n  }\n\n  async createPdiAcao(data: InsertPdiAcao): Promise<PdiAcao> {\n    const [acao] = await db\n      .insert(pdiAcoes)\n      .values(data)\n      .returning();\n    return acao;\n  }\n\n  async getAcoesByPdi(pdiId: number): Promise<PdiAcao[]> {\n    return await db\n      .select()\n      .from(pdiAcoes)\n      .where(eq(pdiAcoes.pdiId, pdiId))\n      .orderBy(pdiAcoes.prazo);\n  }\n\n  async updatePdiAcao(id: number, data: Partial<InsertPdiAcao>): Promise<PdiAcao> {\n    const [updated] = await db\n      .update(pdiAcoes)\n      .set(data)\n      .where(eq(pdiAcoes.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePdiAcao(id: number): Promise<void> {\n    await db.delete(pdiAcoes).where(eq(pdiAcoes.id, id));\n  }\n\n  async createQuestionarioDesligamento(data: InsertQuestionarioDesligamento): Promise<QuestionarioDesligamento> {\n    const [questionario] = await db\n      .insert(questionariosDesligamento)\n      .values(data)\n      .returning();\n    return questionario;\n  }\n\n  async getQuestionariosDesligamento(): Promise<QuestionarioDesligamento[]> {\n    return await db.select().from(questionariosDesligamento).orderBy(questionariosDesligamento.dataCriacao);\n  }\n\n  async getQuestionarioDesligamento(id: number): Promise<QuestionarioDesligamento | undefined> {\n    const [questionario] = await db\n      .select()\n      .from(questionariosDesligamento)\n      .where(eq(questionariosDesligamento.id, id));\n    return questionario || undefined;\n  }\n\n  async updateQuestionarioDesligamento(id: number, data: Partial<InsertQuestionarioDesligamento>): Promise<QuestionarioDesligamento> {\n    const [updated] = await db\n      .update(questionariosDesligamento)\n      .set(data)\n      .where(eq(questionariosDesligamento.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteQuestionarioDesligamento(id: number): Promise<void> {\n    await db.delete(perguntasDesligamento).where(eq(perguntasDesligamento.questionarioId, id));\n    await db.delete(questionariosDesligamento).where(eq(questionariosDesligamento.id, id));\n  }\n\n  async createPerguntaDesligamento(data: InsertPerguntaDesligamento): Promise<PerguntaDesligamento> {\n    const [pergunta] = await db\n      .insert(perguntasDesligamento)\n      .values(data)\n      .returning();\n    return pergunta;\n  }\n\n  async getPerguntasByQuestionario(questionarioId: number): Promise<PerguntaDesligamento[]> {\n    return await db\n      .select()\n      .from(perguntasDesligamento)\n      .where(eq(perguntasDesligamento.questionarioId, questionarioId))\n      .orderBy(perguntasDesligamento.ordem);\n  }\n\n  async updatePerguntaDesligamento(id: number, data: Partial<InsertPerguntaDesligamento>): Promise<PerguntaDesligamento> {\n    const [updated] = await db\n      .update(perguntasDesligamento)\n      .set(data)\n      .where(eq(perguntasDesligamento.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePerguntaDesligamento(id: number): Promise<void> {\n    await db.delete(perguntasDesligamento).where(eq(perguntasDesligamento.id, id));\n  }\n\n  async createRespostaDesligamento(data: InsertRespostaDesligamento): Promise<RespostaDesligamento> {\n    const [resposta] = await db\n      .insert(respostasDesligamento)\n      .values(data)\n      .returning();\n    return resposta;\n  }\n\n  async getRespostasByDesligamento(desligamentoId: number): Promise<RespostaDesligamento[]> {\n    return await db\n      .select()\n      .from(respostasDesligamento)\n      .where(eq(respostasDesligamento.desligamentoId, desligamentoId));\n  }\n\n  async getQuestionarioAtivoByTipo(tipoDesligamento: string): Promise<QuestionarioDesligamento | undefined> {\n    const [questionario] = await db\n      .select()\n      .from(questionariosDesligamento)\n      .where(\n        and(\n          eq(questionariosDesligamento.tipoDesligamento, tipoDesligamento),\n          eq(questionariosDesligamento.ativo, 1)\n        )\n      )\n      .orderBy(questionariosDesligamento.dataCriacao)\n      .limit(1);\n    return questionario || undefined;\n  }\n\n  async getDesligamentosComRespostas(): Promise<{ desligamentoId: number }[]> {\n    const result = await db\n      .selectDistinct({\n        desligamentoId: respostasDesligamento.desligamentoId\n      })\n      .from(respostasDesligamento);\n    return result;\n  }\n\n  async createUsuario(data: InsertUsuario): Promise<Usuario> {\n    const [usuario] = await db\n      .insert(usuarios)\n      .values(data)\n      .returning();\n    return usuario;\n  }\n\n  async getUsuarios(): Promise<Usuario[]> {\n    return await db.select().from(usuarios);\n  }\n\n  async getUsuario(id: number): Promise<Usuario | undefined> {\n    const [usuario] = await db.select().from(usuarios).where(eq(usuarios.id, id));\n    return usuario || undefined;\n  }\n\n  async getUsuarioByEmail(email: string): Promise<Usuario | undefined> {\n    const [usuario] = await db.select().from(usuarios).where(eq(usuarios.email, email));\n    return usuario || undefined;\n  }\n\n  async getUsuarioByNomeAndRole(nome: string, role: string): Promise<Usuario | undefined> {\n    const [usuario] = await db\n      .select()\n      .from(usuarios)\n      .where(and(eq(usuarios.nome, nome), eq(usuarios.role, role)));\n    return usuario || undefined;\n  }\n\n  async updateUsuario(id: number, data: Partial<InsertUsuario>): Promise<Usuario> {\n    const [updated] = await db\n      .update(usuarios)\n      .set({\n        ...data,\n        atualizadoEm: sql`CURRENT_TIMESTAMP`,\n      })\n      .where(eq(usuarios.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteUsuario(id: number): Promise<void> {\n    await db.delete(sessoesTokens).where(eq(sessoesTokens.usuarioId, id));\n    await db.delete(usuarios).where(eq(usuarios.id, id));\n  }\n\n  async createSessaoToken(data: InsertSessaoToken): Promise<SessaoToken> {\n    const [sessao] = await db\n      .insert(sessoesTokens)\n      .values(data)\n      .returning();\n    return sessao;\n  }\n\n  async getSessaoToken(tokenHash: string): Promise<SessaoToken | undefined> {\n    const [sessao] = await db\n      .select()\n      .from(sessoesTokens)\n      .where(\n        and(\n          eq(sessoesTokens.tokenHash, tokenHash),\n          sql`${sessoesTokens.expiraEm} > CURRENT_TIMESTAMP`\n        )\n      );\n    return sessao || undefined;\n  }\n\n  async deleteSessaoToken(tokenHash: string): Promise<void> {\n    await db.delete(sessoesTokens).where(eq(sessoesTokens.tokenHash, tokenHash));\n  }\n\n  async deleteExpiredTokens(): Promise<void> {\n    await db.delete(sessoesTokens).where(sql`${sessoesTokens.expiraEm} < CURRENT_TIMESTAMP`);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":36214},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/AmbienciaAnalise.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Users, BarChart as BarChartIcon } from \"lucide-react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\n\ntype AnalisePesquisa = {\n  totalRespondentes: number;\n  analise: {\n    pergunta: string;\n    tipo: string;\n    totalRespostas: number;\n    media?: number;\n    valores?: number[];\n    opcoes?: { [key: string]: number };\n    respostas?: { texto: string; funcionario: string | null }[];\n  }[];\n};\n\nexport default function AmbienciaAnalise() {\n  const [, params] = useRoute(\"/ambiencia/:id/analise\");\n  const pesquisaId = params?.id ? parseInt(params.id) : 0;\n\n  const { data: pesquisa } = useQuery({\n    queryKey: [\"/api/pesquisas-clima\", pesquisaId],\n    queryFn: () => fetch(`/api/pesquisas-clima/${pesquisaId}`).then(res => res.json()),\n    enabled: !!pesquisaId,\n  });\n\n  const { data: analise, isLoading } = useQuery<AnalisePesquisa>({\n    queryKey: [\"/api/pesquisas-clima\", pesquisaId, \"analise\"],\n    queryFn: () => fetch(`/api/pesquisas-clima/${pesquisaId}/analise`).then(res => res.json()),\n    enabled: !!pesquisaId,\n  });\n\n  if (isLoading) {\n    return <div className=\"text-center py-8\">Carregando análise...</div>;\n  }\n\n  if (!analise) {\n    return <div className=\"text-center py-8\">Nenhuma resposta encontrada</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button\n          variant=\"outline\"\n          onClick={() => window.location.href = \"/ambiencia\"}\n          data-testid=\"button-voltar\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Voltar\n        </Button>\n        <div className=\"flex-1\">\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n            Análise: {pesquisa?.titulo || \"Pesquisa\"}\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Resultados e análises da pesquisa de clima\n          </p>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Users className=\"h-5 w-5\" />\n            Resumo da Pesquisa\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 bg-muted rounded-lg\">\n              <div className=\"text-3xl font-bold\" data-testid=\"text-total-respondentes\">{analise.totalRespondentes}</div>\n              <div className=\"text-sm text-muted-foreground\">Respondentes</div>\n            </div>\n            <div className=\"text-center p-4 bg-muted rounded-lg\">\n              <div className=\"text-3xl font-bold\">{analise.analise.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Perguntas</div>\n            </div>\n            <div className=\"text-center p-4 bg-muted rounded-lg\">\n              <div className=\"text-3xl font-bold\">\n                {Math.round(analise.analise.reduce((acc, a) => acc + (a.media || 0), 0) / analise.analise.filter(a => a.media).length * 10) / 10 || 0}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Média Geral</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"space-y-6\">\n        {analise.analise.map((item, index) => (\n          <Card key={index} data-testid={`card-analise-${index}`}>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">\n                {index + 1}. {item.pergunta}\n              </CardTitle>\n              <CardDescription>\n                {item.totalRespostas} resposta(s) · Tipo: {getTipoLabel(item.tipo)}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {item.tipo === \"escala\" && item.media !== undefined && (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"text-center p-4 bg-primary/10 rounded-lg flex-shrink-0\">\n                      <div className=\"text-4xl font-bold text-primary\" data-testid={`media-${index}`}>\n                        {item.media}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Média</div>\n                    </div>\n                    <div className=\"flex-1\">\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <BarChart data={getDistribuicaoData(item.valores || [])}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"nota\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"quantidade\" fill=\"hsl(var(--primary))\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {item.tipo === \"multipla_escolha\" && item.opcoes && (\n                <div>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={Object.entries(item.opcoes).map(([opcao, count]) => ({ opcao, votos: count }))}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"opcao\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"votos\" fill=\"hsl(var(--primary))\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              )}\n\n              {item.tipo === \"texto_livre\" && item.respostas && (\n                <div className=\"space-y-2\">\n                  {item.respostas.map((resposta, idx) => (\n                    <div key={idx} className=\"p-3 bg-muted rounded-lg\" data-testid={`resposta-${index}-${idx}`}>\n                      <p className=\"text-sm\">{resposta.texto}</p>\n                      {resposta.funcionario && (\n                        <p className=\"text-xs text-muted-foreground mt-1\">- {resposta.funcionario}</p>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {analise.analise.length === 0 && (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <BarChartIcon className=\"h-16 w-16 text-muted-foreground mb-4\" />\n            <p className=\"text-lg text-muted-foreground\" data-testid=\"text-empty-state\">\n              Ainda não há respostas para esta pesquisa\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\nfunction getTipoLabel(tipo: string): string {\n  const labels: { [key: string]: string } = {\n    escala: \"Escala 1-10\",\n    multipla_escolha: \"Múltipla Escolha\",\n    texto_livre: \"Texto Livre\",\n  };\n  return labels[tipo] || tipo;\n}\n\nfunction getDistribuicaoData(valores: number[]): { nota: number; quantidade: number }[] {\n  const distribuicao: { [key: number]: number } = {};\n  \n  for (let i = 1; i <= 10; i++) {\n    distribuicao[i] = 0;\n  }\n  \n  valores.forEach(valor => {\n    if (valor >= 1 && valor <= 10) {\n      distribuicao[valor]++;\n    }\n  });\n\n  return Object.entries(distribuicao).map(([nota, quantidade]) => ({\n    nota: parseInt(nota),\n    quantidade,\n  }));\n}\n","size_bytes":7605},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertEmpresaSchema, insertGestorSchema, insertFuncionarioSchema, insertDesligamentoSchema, insertDocumentoFuncionarioSchema, insertDocumentoGestorSchema, insertFormularioExperienciaSchema, insertPesquisaClimaSchema, insertPerguntaClimaSchema, insertRespostaClimaSchema, insertTreinamentoSchema, insertTreinamentoParticipanteSchema, insertPdiSchema, insertPdiMetaSchema, insertPdiCompetenciaSchema, insertPdiAcaoSchema, insertQuestionarioDesligamentoSchema, insertPerguntaDesligamentoSchema, insertRespostaDesligamentoSchema, insertUsuarioSchema } from \"@shared/schema\";\nimport { hashPassword, comparePassword, generateAccessToken, generateRefreshToken, hashToken, getRefreshTokenExpiry, verifyAccessToken } from \"./auth\";\nimport { requireAuth, requireRole, requireNotAdmin } from \"./middleware\";\nimport { z } from \"zod\";\nimport { queryExternalDb, getExternalDbConnection } from \"./externalDb\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Rotas públicas (sem autenticação) - devem vir ANTES das rotas protegidas\n  \n  // Buscar questionário por token (público)\n  app.get(\"/api/public/questionario/:token\", async (req, res) => {\n    try {\n      const { token } = req.params;\n      \n      const desligamento = await storage.getDesligamentoByToken(token);\n      if (!desligamento) {\n        return res.status(404).json({ error: \"Questionário não encontrado ou token inválido\" });\n      }\n      \n      // Verificar se o token expirou\n      if (desligamento.tokenExpiraEm && new Date(desligamento.tokenExpiraEm) < new Date()) {\n        return res.status(410).json({ error: \"Token expirado\" });\n      }\n      \n      // Buscar questionário ativo pelo tipo de desligamento\n      const questionario = await storage.getQuestionarioAtivoByTipo(desligamento.tipoDesligamento);\n      if (!questionario) {\n        return res.status(404).json({ error: \"Questionário não encontrado para este tipo de desligamento\" });\n      }\n      \n      const perguntas = await storage.getPerguntasByQuestionario(questionario.id);\n      \n      // Buscar dados da empresa e funcionário\n      const empresa = await storage.getEmpresa(desligamento.empresaId);\n      const funcionario = desligamento.funcionarioId \n        ? await storage.getFuncionario(desligamento.funcionarioId)\n        : null;\n      \n      res.json({\n        desligamento: {\n          id: desligamento.id,\n          funcionarioNome: funcionario?.nome || \"N/A\",\n          empresaNome: empresa?.nome || \"N/A\",\n          dataDesligamento: desligamento.dataDesligamento,\n        },\n        questionario: {\n          id: questionario.id,\n          titulo: questionario.titulo,\n          descricao: questionario.descricao,\n        },\n        perguntas: perguntas.sort((a, b) => a.ordem - b.ordem),\n        jaRespondido: desligamento.questionarioRespondido === 1,\n      });\n    } catch (error) {\n      console.error(\"Erro ao buscar questionário:\", error);\n      res.status(500).json({ error: \"Erro ao buscar questionário\", details: error instanceof Error ? error.message : String(error) });\n    }\n  });\n  \n  // Salvar respostas do questionário (público)\n  app.post(\"/api/public/questionario/responder\", async (req, res) => {\n    try {\n      const responseSchema = z.object({\n        token: z.string(),\n        respostas: z.array(z.object({\n          perguntaId: z.number(),\n          valorEscala: z.number().optional(),\n          textoResposta: z.string().optional(),\n          valorData: z.string().optional(),\n        })),\n      });\n      \n      const { token, respostas } = responseSchema.parse(req.body);\n      \n      const desligamento = await storage.getDesligamentoByToken(token);\n      if (!desligamento) {\n        return res.status(404).json({ error: \"Token inválido\" });\n      }\n      \n      // Verificar se já respondeu\n      if (desligamento.questionarioRespondido === 1) {\n        return res.status(400).json({ error: \"Questionário já foi respondido\" });\n      }\n      \n      // Verificar se o token expirou\n      if (desligamento.tokenExpiraEm && new Date(desligamento.tokenExpiraEm) < new Date()) {\n        return res.status(410).json({ error: \"Token expirado\" });\n      }\n      \n      // Buscar questionário ativo pelo tipo\n      const questionario = await storage.getQuestionarioAtivoByTipo(desligamento.tipoDesligamento);\n      if (!questionario) {\n        return res.status(404).json({ error: \"Questionário não encontrado\" });\n      }\n      \n      // Salvar respostas\n      for (const resposta of respostas) {\n        await storage.createRespostaDesligamento({\n          desligamentoId: desligamento.id,\n          questionarioId: questionario.id,\n          perguntaId: resposta.perguntaId,\n          valorEscala: resposta.valorEscala || null,\n          textoResposta: resposta.textoResposta || null,\n          valorData: resposta.valorData || null,\n        });\n      }\n      \n      // Marcar como respondido\n      await storage.updateDesligamento(desligamento.id, {\n        questionarioRespondido: 1,\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Erro ao salvar respostas:\", error);\n      res.status(500).json({ error: \"Erro ao salvar respostas\" });\n    }\n  });\n  \n  // Rotas de autenticação\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const loginSchema = z.object({\n        email: z.string().email(),\n        senha: z.string().min(6),\n      });\n      \n      const { email, senha } = loginSchema.parse(req.body);\n      \n      const usuario = await storage.getUsuarioByEmail(email);\n      if (!usuario || !usuario.ativo) {\n        return res.status(401).json({ error: \"Credenciais inválidas\" });\n      }\n      \n      const senhaValida = await comparePassword(senha, usuario.senhaHash);\n      if (!senhaValida) {\n        return res.status(401).json({ error: \"Credenciais inválidas\" });\n      }\n      \n      // Limpar tokens expirados globalmente\n      await storage.deleteExpiredTokens();\n      \n      // Gerar tokens\n      const accessToken = generateAccessToken(usuario);\n      const refreshToken = generateRefreshToken();\n      const refreshTokenHash = hashToken(refreshToken);\n      \n      // Salvar refresh token no banco\n      await storage.createSessaoToken({\n        usuarioId: usuario.id,\n        tokenHash: refreshTokenHash,\n        expiraEm: getRefreshTokenExpiry(),\n      });\n      \n      // Configurar cookies\n      res.cookie(\"accessToken\", accessToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"lax\",\n        maxAge: 15 * 60 * 1000, // 15 minutos\n      });\n      \n      res.cookie(\"refreshToken\", refreshToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"lax\",\n        maxAge: 30 * 24 * 60 * 60 * 1000, // 30 dias\n      });\n      \n      res.json({\n        usuario: {\n          id: usuario.id,\n          nome: usuario.nome,\n          email: usuario.email,\n          role: usuario.role,\n        },\n      });\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n  \n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      const refreshToken = req.cookies?.refreshToken;\n      \n      if (refreshToken) {\n        const refreshTokenHash = hashToken(refreshToken);\n        await storage.deleteSessaoToken(refreshTokenHash);\n      }\n      \n      res.clearCookie(\"accessToken\");\n      res.clearCookie(\"refreshToken\");\n      \n      res.json({ message: \"Logout realizado com sucesso\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao fazer logout\" });\n    }\n  });\n  \n  app.post(\"/api/auth/refresh\", async (req, res) => {\n    try {\n      const refreshToken = req.cookies?.refreshToken;\n      \n      if (!refreshToken) {\n        return res.status(401).json({ error: \"Token não fornecido\" });\n      }\n      \n      const refreshTokenHash = hashToken(refreshToken);\n      const sessao = await storage.getSessaoToken(refreshTokenHash);\n      \n      if (!sessao) {\n        return res.status(401).json({ error: \"Token inválido ou expirado\" });\n      }\n      \n      // Verificar se o token expirou (double-check além da query)\n      if (new Date(sessao.expiraEm) <= new Date()) {\n        await storage.deleteSessaoToken(refreshTokenHash);\n        return res.status(401).json({ error: \"Token expirado\" });\n      }\n      \n      const usuario = await storage.getUsuario(sessao.usuarioId);\n      if (!usuario || !usuario.ativo) {\n        await storage.deleteSessaoToken(refreshTokenHash);\n        return res.status(401).json({ error: \"Usuário inválido\" });\n      }\n      \n      // Rotacionar refresh token (gerar novo e invalidar o antigo)\n      const novoRefreshToken = generateRefreshToken();\n      const novoRefreshTokenHash = hashToken(novoRefreshToken);\n      \n      // Deletar token antigo\n      await storage.deleteSessaoToken(refreshTokenHash);\n      \n      // Criar novo token\n      await storage.createSessaoToken({\n        usuarioId: usuario.id,\n        tokenHash: novoRefreshTokenHash,\n        expiraEm: getRefreshTokenExpiry(),\n      });\n      \n      // Gerar novo access token\n      const accessToken = generateAccessToken(usuario);\n      \n      // Atualizar cookies com novos tokens\n      res.cookie(\"accessToken\", accessToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"lax\",\n        maxAge: 15 * 60 * 1000,\n      });\n      \n      res.cookie(\"refreshToken\", novoRefreshToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"lax\",\n        maxAge: 30 * 24 * 60 * 60 * 1000,\n      });\n      \n      res.json({\n        usuario: {\n          id: usuario.id,\n          nome: usuario.nome,\n          email: usuario.email,\n          role: usuario.role,\n        },\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao atualizar token\" });\n    }\n  });\n  \n  app.get(\"/api/auth/me\", requireAuth, async (req, res) => {\n    try {\n      const accessToken = req.cookies?.accessToken;\n      \n      if (!accessToken) {\n        return res.status(401).json({ error: \"Não autenticado\" });\n      }\n      \n      const payload = verifyAccessToken(accessToken);\n      if (!payload) {\n        return res.status(401).json({ error: \"Token inválido\" });\n      }\n      \n      const usuario = await storage.getUsuario(payload.usuarioId);\n      if (!usuario || !usuario.ativo) {\n        return res.status(401).json({ error: \"Usuário inválido\" });\n      }\n      \n      res.json({\n        usuario: {\n          id: usuario.id,\n          nome: usuario.nome,\n          email: usuario.email,\n          role: usuario.role,\n        },\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar usuário\" });\n    }\n  });\n\n  // Rotas protegidas - requerem autenticação\n  app.get(\"/api/empresas\", requireAuth, async (req, res) => {\n    try {\n      const empresas = await storage.getEmpresas();\n      res.json(empresas);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar empresas\" });\n    }\n  });\n\n  app.post(\"/api/empresas\", requireAuth, async (req, res) => {\n    try {\n      const validated = insertEmpresaSchema.parse(req.body);\n      const empresa = await storage.createEmpresa(validated);\n      res.json(empresa);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.get(\"/api/gestores\", requireAuth, async (req, res) => {\n    try {\n      const gestores = await storage.getGestores();\n      res.json(gestores);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar gestores\" });\n    }\n  });\n\n  app.post(\"/api/gestores\", requireAuth, async (req, res) => {\n    try {\n      const validated = insertGestorSchema.parse(req.body);\n      const gestor = await storage.createGestor(validated);\n      res.json(gestor);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.get(\"/api/funcionarios\", requireAuth, async (req, res) => {\n    try {\n      const funcionarios = await storage.getFuncionarios();\n      res.json(funcionarios);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar funcionários\" });\n    }\n  });\n\n  app.post(\"/api/funcionarios\", requireAuth, async (req, res) => {\n    try {\n      const validated = insertFuncionarioSchema.parse(req.body);\n      const funcionario = await storage.createFuncionario(validated);\n      res.json(funcionario);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.get(\"/api/desligamentos\", requireAuth, async (req, res) => {\n    try {\n      const desligamentos = await storage.getDesligamentosComDetalhes();\n      res.json(desligamentos);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar desligamentos\" });\n    }\n  });\n\n  // Enviar questionário por email\n  app.post(\"/api/desligamentos/:id/enviar-questionario\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const desligamento = await storage.getDesligamento(Number(id));\n      \n      if (!desligamento) {\n        return res.status(404).json({ error: \"Desligamento não encontrado\" });\n      }\n      \n      if (!desligamento.emailColaborador) {\n        return res.status(400).json({ error: \"Email do colaborador não informado\" });\n      }\n      \n      // Importar funções de email\n      const { generateQuestionarioToken, getTokenExpiry, sendEmail, criarEmailQuestionario } = await import(\"./email\");\n      \n      // Gerar token e data de expiração\n      const token = generateQuestionarioToken();\n      const tokenExpiry = getTokenExpiry();\n      \n      // Atualizar desligamento com token\n      await storage.updateDesligamento(Number(id), {\n        tokenQuestionario: token,\n        tokenExpiraEm: tokenExpiry,\n        questionarioEnviado: 1,\n      });\n      \n      // Buscar dados da empresa\n      const empresa = await storage.getEmpresa(desligamento.empresaId);\n      \n      // Construir URL do questionário\n      const baseUrl = process.env.REPLIT_DEV_DOMAIN \n        ? `https://${process.env.REPLIT_DEV_DOMAIN}` \n        : `http://localhost:5000`;\n      const questionarioUrl = `${baseUrl}/questionario/${token}`;\n      \n      // Criar HTML do email\n      const emailHtml = criarEmailQuestionario(\n        desligamento.funcionarioNome,\n        empresa?.nome || \"Empresa\",\n        desligamento.tipoDesligamento,\n        questionarioUrl\n      );\n      \n      // Enviar email\n      await sendEmail({\n        to: desligamento.emailColaborador,\n        subject: \"Questionário de Desligamento\",\n        html: emailHtml,\n      });\n      \n      res.json({ \n        success: true, \n        message: \"Questionário enviado por email com sucesso\",\n        linkQuestionario: questionarioUrl // Para debug/teste\n      });\n    } catch (error) {\n      console.error(\"Erro ao enviar questionário:\", error);\n      res.status(500).json({ error: \"Erro ao enviar questionário\" });\n    }\n  });\n\n  app.post(\"/api/desligamentos\", requireAuth, async (req, res) => {\n    try {\n      const validated = insertDesligamentoSchema.parse(req.body);\n      const desligamento = await storage.createDesligamento(validated);\n      \n      // Se o funcionário desligado for também um gestor, remover acesso de gestor\n      if (desligamento.funcionarioId) {\n        try {\n          const funcionario = await storage.getFuncionario(desligamento.funcionarioId);\n          if (funcionario) {\n            // Buscar se existe um usuário com role=\"gestor\" e nome do funcionário desligado\n            const usuarioGestor = await storage.getUsuarioByNomeAndRole(funcionario.nome, \"gestor\");\n            \n            if (usuarioGestor) {\n              // Atualizar role para \"funcionario\" (perde acesso de gestor)\n              await storage.updateUsuario(usuarioGestor.id, { role: \"funcionario\" });\n              console.log(`✅ Acesso de gestor removido para: ${funcionario.nome} (agora é apenas funcionário)`);\n            }\n          }\n        } catch (gestorError) {\n          console.error(\"Erro ao remover acesso de gestor:\", gestorError);\n          // Não falha a criação do desligamento se houver erro ao remover acesso\n        }\n      }\n      \n      // Enviar email automaticamente se houver email do colaborador\n      if (desligamento.emailColaborador) {\n        try {\n          // Importar funções de email\n          const { generateQuestionarioToken, getTokenExpiry, sendEmail, criarEmailQuestionario } = await import(\"./email\");\n          \n          // Gerar token e data de expiração\n          const token = generateQuestionarioToken();\n          const tokenExpiry = getTokenExpiry();\n          \n          // Atualizar desligamento com token\n          await storage.updateDesligamento(desligamento.id, {\n            tokenQuestionario: token,\n            tokenExpiraEm: tokenExpiry,\n            questionarioEnviado: 1,\n          });\n          \n          // Buscar dados da empresa e funcionário\n          const empresa = await storage.getEmpresa(desligamento.empresaId);\n          const funcionario = desligamento.funcionarioId \n            ? await storage.getFuncionario(desligamento.funcionarioId)\n            : null;\n          \n          // Construir URL do questionário\n          const baseUrl = process.env.REPLIT_DEV_DOMAIN \n            ? `https://${process.env.REPLIT_DEV_DOMAIN}` \n            : `http://localhost:5000`;\n          const questionarioUrl = `${baseUrl}/questionario/${token}`;\n          \n          // Criar HTML do email\n          const emailHtml = criarEmailQuestionario(\n            funcionario?.nome || \"Colaborador\",\n            empresa?.nome || \"Empresa\",\n            desligamento.tipoDesligamento,\n            questionarioUrl\n          );\n          \n          // Enviar email\n          await sendEmail({\n            to: desligamento.emailColaborador,\n            subject: \"Questionário de Desligamento\",\n            html: emailHtml,\n          });\n          \n          console.log(`✅ Email enviado automaticamente para: ${desligamento.emailColaborador}`);\n        } catch (emailError) {\n          console.error(\"Erro ao enviar email automático:\", emailError);\n          // Não falha a criação do desligamento se o email falhar\n        }\n      }\n      \n      res.json(desligamento);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.get(\"/api/dados/desligamentos_por_gestor\", requireAuth, async (req, res) => {\n    try {\n      const data = await storage.getDesligamentosPorGestor();\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar dados\" });\n    }\n  });\n\n  app.get(\"/api/dados/desligamentos_por_empresa\", requireAuth, async (req, res) => {\n    try {\n      const data = await storage.getDesligamentosPorEmpresa();\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar dados\" });\n    }\n  });\n\n  app.get(\"/api/funcionarios/:id/documentos\", requireAuth, async (req, res) => {\n    try {\n      const funcionarioId = parseInt(req.params.id);\n      const documentos = await storage.getDocumentosByFuncionario(funcionarioId);\n      res.json(documentos);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar documentos\" });\n    }\n  });\n\n  app.post(\"/api/funcionarios/:id/documentos\", requireAuth, async (req, res) => {\n    try {\n      const funcionarioId = parseInt(req.params.id);\n      const validated = insertDocumentoFuncionarioSchema.parse({\n        ...req.body,\n        funcionarioId,\n      });\n      const documento = await storage.createDocumentoFuncionario(validated);\n      res.json(documento);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.delete(\"/api/documentos/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteDocumentoFuncionario(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar documento\" });\n    }\n  });\n\n  app.get(\"/api/gestores/:id/documentos\", requireAuth, async (req, res) => {\n    try {\n      const gestorId = parseInt(req.params.id);\n      const documentos = await storage.getDocumentosByGestor(gestorId);\n      res.json(documentos);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar documentos\" });\n    }\n  });\n\n  app.post(\"/api/gestores/:id/documentos\", requireAuth, async (req, res) => {\n    try {\n      const gestorId = parseInt(req.params.id);\n      const validated = insertDocumentoGestorSchema.parse({\n        ...req.body,\n        gestorId,\n      });\n      const documento = await storage.createDocumentoGestor(validated);\n      res.json(documento);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.delete(\"/api/documentos-gestor/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteDocumentoGestor(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar documento\" });\n    }\n  });\n\n  app.get(\"/api/formularios-experiencia\", requireAuth, async (req, res) => {\n    try {\n      const formularios = await storage.getFormulariosExperiencia();\n      res.json(formularios);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar formulários\" });\n    }\n  });\n\n  app.get(\"/api/formularios-experiencia/pendentes\", requireAuth, async (req, res) => {\n    try {\n      const formularios = await storage.getFormulariosExperienciaPendentes();\n      res.json(formularios);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar formulários pendentes\" });\n    }\n  });\n\n  app.get(\"/api/formularios-experiencia/gestor/:gestorId\", requireAuth, async (req, res) => {\n    try {\n      const gestorId = parseInt(req.params.gestorId);\n      const formularios = await storage.getFormulariosExperienciaByGestor(gestorId);\n      res.json(formularios);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar formulários do gestor\" });\n    }\n  });\n\n  app.get(\"/api/formularios-experiencia/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const formulario = await storage.getFormularioExperiencia(id);\n      if (!formulario) {\n        return res.status(404).json({ error: \"Formulário não encontrado\" });\n      }\n      res.json(formulario);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar formulário\" });\n    }\n  });\n\n  app.post(\"/api/formularios-experiencia\", requireAuth, async (req, res) => {\n    try {\n      const validated = insertFormularioExperienciaSchema.parse(req.body);\n      const formulario = await storage.createFormularioExperiencia(validated);\n      res.json(formulario);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.patch(\"/api/formularios-experiencia/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const data = req.body;\n\n      if (data.desempenho !== undefined) {\n        const desempenho = Number(data.desempenho);\n        if (isNaN(desempenho) || desempenho < 0 || desempenho > 10) {\n          return res.status(400).json({ error: \"Desempenho deve ser um número entre 0 e 10\" });\n        }\n        data.desempenho = desempenho;\n      }\n\n      if (data.recomendacao !== undefined) {\n        if (![\"aprovado\", \"reprovado\"].includes(data.recomendacao)) {\n          return res.status(400).json({ error: \"Recomendação deve ser 'aprovado' ou 'reprovado'\" });\n        }\n      }\n\n      if (data.desempenho !== undefined || data.pontosFortes !== undefined || data.pontosMelhoria !== undefined) {\n        data.status = \"preenchido\";\n        data.dataPreenchimento = new Date().toISOString().split(\"T\")[0];\n      }\n\n      const formulario = await storage.updateFormularioExperiencia(id, data);\n      res.json(formulario);\n    } catch (error) {\n      res.status(400).json({ error: \"Erro ao atualizar formulário\" });\n    }\n  });\n\n  app.get(\"/api/pesquisas-clima\", requireAuth, async (req, res) => {\n    try {\n      const pesquisas = await storage.getPesquisasClima();\n      res.json(pesquisas);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar pesquisas\" });\n    }\n  });\n\n  app.get(\"/api/pesquisas-clima/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const pesquisa = await storage.getPesquisaClima(id);\n      if (!pesquisa) {\n        return res.status(404).json({ error: \"Pesquisa não encontrada\" });\n      }\n      res.json(pesquisa);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar pesquisa\" });\n    }\n  });\n\n  app.post(\"/api/pesquisas-clima\", requireAuth, async (req, res) => {\n    try {\n      const validated = insertPesquisaClimaSchema.parse(req.body);\n      const pesquisa = await storage.createPesquisaClima(validated);\n      res.json(pesquisa);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.patch(\"/api/pesquisas-clima/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const pesquisa = await storage.updatePesquisaClima(id, req.body);\n      res.json(pesquisa);\n    } catch (error) {\n      res.status(400).json({ error: \"Erro ao atualizar pesquisa\" });\n    }\n  });\n\n  app.delete(\"/api/pesquisas-clima/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePesquisaClima(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar pesquisa\" });\n    }\n  });\n\n  app.get(\"/api/pesquisas-clima/:id/perguntas\", requireAuth, async (req, res) => {\n    try {\n      const pesquisaId = parseInt(req.params.id);\n      const perguntas = await storage.getPerguntasByPesquisa(pesquisaId);\n      res.json(perguntas);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar perguntas\" });\n    }\n  });\n\n  app.post(\"/api/pesquisas-clima/:id/perguntas\", requireAuth, async (req, res) => {\n    try {\n      const pesquisaId = parseInt(req.params.id);\n      const validated = insertPerguntaClimaSchema.parse({\n        ...req.body,\n        pesquisaId,\n      });\n      const pergunta = await storage.createPerguntaClima(validated);\n      res.json(pergunta);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.patch(\"/api/perguntas-clima/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const pergunta = await storage.updatePerguntaClima(id, req.body);\n      res.json(pergunta);\n    } catch (error) {\n      res.status(400).json({ error: \"Erro ao atualizar pergunta\" });\n    }\n  });\n\n  app.delete(\"/api/perguntas-clima/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePerguntaClima(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar pergunta\" });\n    }\n  });\n\n  app.get(\"/api/pesquisas-clima/:id/respostas\", requireAuth, async (req, res) => {\n    try {\n      const pesquisaId = parseInt(req.params.id);\n      const respostas = await storage.getRespostasByPesquisa(pesquisaId);\n      res.json(respostas);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar respostas\" });\n    }\n  });\n\n  app.post(\"/api/pesquisas-clima/:id/respostas\", requireAuth, requireNotAdmin, async (req, res) => {\n    try {\n      const pesquisaId = parseInt(req.params.id);\n      const validated = insertRespostaClimaSchema.parse({\n        ...req.body,\n        pesquisaId,\n        dataResposta: new Date().toISOString().split(\"T\")[0],\n      });\n      const resposta = await storage.createRespostaClima(validated);\n      res.json(resposta);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.get(\"/api/pesquisas-clima/:id/analise\", requireAuth, async (req, res) => {\n    try {\n      const pesquisaId = parseInt(req.params.id);\n      const analise = await storage.getAnalisePesquisa(pesquisaId);\n      res.json(analise);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar análise\" });\n    }\n  });\n\n  app.get(\"/api/treinamentos\", requireAuth, async (req, res) => {\n    try {\n      const treinamentos = await storage.getTreinamentos();\n      res.json(treinamentos);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar treinamentos\" });\n    }\n  });\n\n  app.get(\"/api/treinamentos/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const treinamento = await storage.getTreinamento(id);\n      if (!treinamento) {\n        return res.status(404).json({ error: \"Treinamento não encontrado\" });\n      }\n      res.json(treinamento);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar treinamento\" });\n    }\n  });\n\n  app.post(\"/api/treinamentos\", requireAuth, async (req, res) => {\n    try {\n      const validated = insertTreinamentoSchema.parse(req.body);\n      const treinamento = await storage.createTreinamento(validated);\n      res.json(treinamento);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.patch(\"/api/treinamentos/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const treinamento = await storage.updateTreinamento(id, req.body);\n      res.json(treinamento);\n    } catch (error) {\n      res.status(400).json({ error: \"Erro ao atualizar treinamento\" });\n    }\n  });\n\n  app.delete(\"/api/treinamentos/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteTreinamento(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar treinamento\" });\n    }\n  });\n\n  app.get(\"/api/treinamentos/:id/participantes\", requireAuth, async (req, res) => {\n    try {\n      const treinamentoId = parseInt(req.params.id);\n      const participantes = await storage.getParticipantesByTreinamento(treinamentoId);\n      res.json(participantes);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar participantes\" });\n    }\n  });\n\n  app.post(\"/api/treinamentos/:id/participantes\", requireAuth, async (req, res) => {\n    try {\n      const treinamentoId = parseInt(req.params.id);\n      const validated = insertTreinamentoParticipanteSchema.parse({\n        ...req.body,\n        treinamentoId,\n        dataInscricao: new Date().toISOString().split(\"T\")[0],\n      });\n      const participante = await storage.addParticipante(validated);\n      res.json(participante);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.patch(\"/api/participantes/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const participante = await storage.updateParticipante(id, req.body);\n      res.json(participante);\n    } catch (error) {\n      res.status(400).json({ error: \"Erro ao atualizar participante\" });\n    }\n  });\n\n  app.delete(\"/api/participantes/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.removeParticipante(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar participante\" });\n    }\n  });\n\n  app.get(\"/api/pdis\", requireAuth, async (req, res) => {\n    try {\n      const pdis = await storage.getPdis();\n      res.json(pdis);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar PDIs\" });\n    }\n  });\n\n  app.get(\"/api/pdis/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const pdi = await storage.getPdi(id);\n      if (!pdi) {\n        return res.status(404).json({ error: \"PDI não encontrado\" });\n      }\n      res.json(pdi);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar PDI\" });\n    }\n  });\n\n  app.post(\"/api/pdis\", requireAuth, async (req, res) => {\n    try {\n      const validated = insertPdiSchema.parse(req.body);\n      const pdi = await storage.createPdi(validated);\n      res.json(pdi);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.patch(\"/api/pdis/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const pdi = await storage.updatePdi(id, req.body);\n      res.json(pdi);\n    } catch (error) {\n      res.status(400).json({ error: \"Erro ao atualizar PDI\" });\n    }\n  });\n\n  app.delete(\"/api/pdis/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePdi(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar PDI\" });\n    }\n  });\n\n  app.get(\"/api/pdis/:id/metas\", requireAuth, async (req, res) => {\n    try {\n      const pdiId = parseInt(req.params.id);\n      const metas = await storage.getMetasByPdi(pdiId);\n      res.json(metas);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar metas\" });\n    }\n  });\n\n  app.post(\"/api/pdis/:id/metas\", requireAuth, async (req, res) => {\n    try {\n      const pdiId = parseInt(req.params.id);\n      const validated = insertPdiMetaSchema.parse({\n        ...req.body,\n        pdiId,\n      });\n      const meta = await storage.createPdiMeta(validated);\n      res.json(meta);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.patch(\"/api/pdi-metas/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const meta = await storage.updatePdiMeta(id, req.body);\n      res.json(meta);\n    } catch (error) {\n      res.status(400).json({ error: \"Erro ao atualizar meta\" });\n    }\n  });\n\n  app.delete(\"/api/pdi-metas/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePdiMeta(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar meta\" });\n    }\n  });\n\n  app.get(\"/api/pdis/:id/competencias\", requireAuth, async (req, res) => {\n    try {\n      const pdiId = parseInt(req.params.id);\n      const competencias = await storage.getCompetenciasByPdi(pdiId);\n      res.json(competencias);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar competências\" });\n    }\n  });\n\n  app.post(\"/api/pdis/:id/competencias\", requireAuth, async (req, res) => {\n    try {\n      const pdiId = parseInt(req.params.id);\n      const validated = insertPdiCompetenciaSchema.parse({\n        ...req.body,\n        pdiId,\n      });\n      const competencia = await storage.createPdiCompetencia(validated);\n      res.json(competencia);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.patch(\"/api/pdi-competencias/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const competencia = await storage.updatePdiCompetencia(id, req.body);\n      res.json(competencia);\n    } catch (error) {\n      res.status(400).json({ error: \"Erro ao atualizar competência\" });\n    }\n  });\n\n  app.delete(\"/api/pdi-competencias/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePdiCompetencia(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar competência\" });\n    }\n  });\n\n  app.get(\"/api/pdis/:id/acoes\", requireAuth, async (req, res) => {\n    try {\n      const pdiId = parseInt(req.params.id);\n      const acoes = await storage.getAcoesByPdi(pdiId);\n      res.json(acoes);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar ações\" });\n    }\n  });\n\n  app.post(\"/api/pdis/:id/acoes\", requireAuth, async (req, res) => {\n    try {\n      const pdiId = parseInt(req.params.id);\n      const validated = insertPdiAcaoSchema.parse({\n        ...req.body,\n        pdiId,\n      });\n      const acao = await storage.createPdiAcao(validated);\n      res.json(acao);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.patch(\"/api/pdi-acoes/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const acao = await storage.updatePdiAcao(id, req.body);\n      res.json(acao);\n    } catch (error) {\n      res.status(400).json({ error: \"Erro ao atualizar ação\" });\n    }\n  });\n\n  app.delete(\"/api/pdi-acoes/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePdiAcao(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar ação\" });\n    }\n  });\n\n  app.post(\"/api/enviar-questionario\", requireAuth, async (req, res) => {\n    try {\n      const { funcionarioId, email, tipoDesligamento } = req.body;\n\n      // Buscar dados do funcionário\n      const funcionarios = await storage.getFuncionarios();\n      const funcionario = funcionarios.find((f) => f.id === funcionarioId);\n\n      if (!funcionario) {\n        return res.status(404).json({ error: \"Funcionário não encontrado\" });\n      }\n\n      // Links do Microsoft Forms\n      const linkFormGestor = \"https://forms.office.com/pages/responsepage.aspx?id=fKhs6GEk4keMILRXyHexKD9hUGoTJTBAh3e6AfxsqZRUMkJPVzBTM1VCN0VNVFg5QjZJTFZPV1YwSyQlQCN0PWcu&route=shorturl\";\n      const linkFormFuncionario = \"https://forms.office.com/pages/responsepage.aspx?id=fKhs6GEk4keMILRXyHexKD9hUGoTJTBAh3e6AfxsqZRUN1NMOEdNUjRLNk9aVFQ0UEFVOVRMMTFJWSQlQCN0PWcu&route=shorturl\";\n\n      const link = tipoDesligamento === \"gestor\" ? linkFormGestor : linkFormFuncionario;\n\n      // TODO: Implementar integração de email (Gmail, SendGrid, Resend, etc.)\n      // Por enquanto, apenas registra a solicitação no console\n      console.log(`[ENVIO DE QUESTIONÁRIO]`);\n      console.log(`Funcionário: ${funcionario.nome}`);\n      console.log(`Email: ${email}`);\n      console.log(`Tipo: ${tipoDesligamento}`);\n      console.log(`Link do formulário: ${link}`);\n      console.log(`\\nMensagem a ser enviada:`);\n      console.log(`Prezado(a) ${funcionario.nome},`);\n      console.log(`\\nPor favor, acesse o link abaixo para responder o questionário de desligamento:`);\n      console.log(link);\n      console.log(`Data: ${new Date().toISOString()}`);\n\n      // Simula sucesso\n      res.json({\n        success: true,\n        message: \"Questionário preparado para envio com link do Microsoft Forms\",\n        funcionario: funcionario.nome,\n        email,\n        link,\n      });\n    } catch (error) {\n      console.error(\"Erro ao enviar questionário:\", error);\n      res.status(500).json({ error: \"Erro ao enviar questionário\" });\n    }\n  });\n\n  // Rotas para questionários de desligamento\n  app.get(\"/api/questionarios-desligamento\", requireAuth, async (req, res) => {\n    try {\n      const questionarios = await storage.getQuestionariosDesligamento();\n      res.json(questionarios);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar questionários\" });\n    }\n  });\n\n  app.post(\"/api/questionarios-desligamento\", requireAuth, async (req, res) => {\n    try {\n      const validated = insertQuestionarioDesligamentoSchema.parse(req.body);\n      const questionario = await storage.createQuestionarioDesligamento(validated);\n      res.json(questionario);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.get(\"/api/questionarios-desligamento/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const questionario = await storage.getQuestionarioDesligamento(id);\n      if (!questionario) {\n        return res.status(404).json({ error: \"Questionário não encontrado\" });\n      }\n      res.json(questionario);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar questionário\" });\n    }\n  });\n\n  app.patch(\"/api/questionarios-desligamento/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const questionario = await storage.updateQuestionarioDesligamento(id, req.body);\n      res.json(questionario);\n    } catch (error) {\n      res.status(400).json({ error: \"Erro ao atualizar questionário\" });\n    }\n  });\n\n  app.delete(\"/api/questionarios-desligamento/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deleteQuestionarioDesligamento(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar questionário\" });\n    }\n  });\n\n  // Rotas para perguntas do questionário de desligamento\n  app.get(\"/api/questionarios-desligamento/:id/perguntas\", requireAuth, async (req, res) => {\n    try {\n      const questionarioId = parseInt(req.params.id);\n      const perguntas = await storage.getPerguntasByQuestionario(questionarioId);\n      res.json(perguntas);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar perguntas\" });\n    }\n  });\n\n  app.post(\"/api/questionarios-desligamento/:id/perguntas\", requireAuth, async (req, res) => {\n    try {\n      const questionarioId = parseInt(req.params.id);\n      const validated = insertPerguntaDesligamentoSchema.parse({\n        ...req.body,\n        questionarioId,\n      });\n      const pergunta = await storage.createPerguntaDesligamento(validated);\n      res.json(pergunta);\n    } catch (error) {\n      res.status(400).json({ error: \"Dados inválidos\" });\n    }\n  });\n\n  app.patch(\"/api/perguntas-desligamento/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const pergunta = await storage.updatePerguntaDesligamento(id, req.body);\n      res.json(pergunta);\n    } catch (error) {\n      res.status(400).json({ error: \"Erro ao atualizar pergunta\" });\n    }\n  });\n\n  app.delete(\"/api/perguntas-desligamento/:id\", requireAuth, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      await storage.deletePerguntaDesligamento(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao deletar pergunta\" });\n    }\n  });\n\n  // Rotas para respostas de questionário de desligamento\n  app.get(\"/api/questionarios-desligamento/tipo/:tipoDesligamento\", requireAuth, async (req, res) => {\n    try {\n      const tipoDesligamento = req.params.tipoDesligamento;\n      const questionario = await storage.getQuestionarioAtivoByTipo(tipoDesligamento);\n      \n      if (!questionario) {\n        return res.status(404).json({ error: \"Questionário não encontrado para este tipo de desligamento\" });\n      }\n\n      const perguntas = await storage.getPerguntasByQuestionario(questionario.id);\n      res.json({\n        questionario,\n        perguntas,\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar questionário\" });\n    }\n  });\n\n  app.post(\"/api/respostas-desligamento\", requireAuth, requireNotAdmin, async (req, res) => {\n    try {\n      const { desligamentoId, questionarioId, respostas } = req.body;\n\n      if (!Array.isArray(respostas)) {\n        return res.status(400).json({ error: \"Respostas deve ser um array\" });\n      }\n\n      const respostasSalvas = [];\n      \n      for (const resposta of respostas) {\n        const validated = insertRespostaDesligamentoSchema.parse({\n          desligamentoId,\n          questionarioId,\n          perguntaId: resposta.perguntaId,\n          valorEscala: resposta.valorEscala,\n          textoResposta: resposta.textoResposta,\n          valorData: resposta.valorData,\n        });\n        const respostaSalva = await storage.createRespostaDesligamento(validated);\n        respostasSalvas.push(respostaSalva);\n      }\n\n      res.json({\n        success: true,\n        respostas: respostasSalvas,\n      });\n    } catch (error) {\n      console.error(\"Erro ao salvar respostas:\", error);\n      res.status(400).json({ error: \"Erro ao salvar respostas\" });\n    }\n  });\n\n  app.get(\"/api/respostas-desligamento/:desligamentoId\", requireAuth, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const desligamentoId = parseInt(req.params.desligamentoId);\n      const respostas = await storage.getRespostasByDesligamento(desligamentoId);\n      res.json(respostas);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar respostas\" });\n    }\n  });\n\n  app.get(\"/api/desligamentos-com-respostas\", requireAuth, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const desligamentosComRespostas = await storage.getDesligamentosComRespostas();\n      res.json(desligamentosComRespostas);\n    } catch (error) {\n      res.status(500).json({ error: \"Erro ao buscar desligamentos com respostas\" });\n    }\n  });\n\n  // Rota de teste de conexão SQL Server externo\n  app.get(\"/api/external-db/test\", requireAuth, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      await getExternalDbConnection();\n      res.json({ \n        success: true, \n        message: \"Conexão com banco SQL Server externo estabelecida com sucesso!\" \n      });\n    } catch (error) {\n      console.error(\"Erro ao conectar ao banco externo:\", error);\n      res.status(500).json({ \n        success: false, \n        error: \"Erro ao conectar ao banco SQL Server externo\",\n        details: error instanceof Error ? error.message : \"Erro desconhecido\"\n      });\n    }\n  });\n\n  // Rota para buscar dados da tabela r34fun\n  app.get(\"/api/external-db/r34fun\", requireAuth, async (req, res) => {\n    try {\n      const result = await queryExternalDb(\"SELECT * FROM r34fun\");\n      res.json({ \n        success: true, \n        data: result,\n        rowCount: result.length \n      });\n    } catch (error) {\n      console.error(\"Erro ao buscar dados da tabela r34fun:\", error);\n      res.status(500).json({ \n        success: false, \n        error: \"Erro ao buscar dados da tabela r34fun\",\n        details: error instanceof Error ? error.message : \"Erro desconhecido\"\n      });\n    }\n  });\n\n  // Rota para executar query no banco externo\n  app.post(\"/api/external-db/query\", requireAuth, requireRole([\"admin\"]), async (req, res) => {\n    try {\n      const { query } = req.body;\n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ error: \"Query inválida\" });\n      }\n      \n      const result = await queryExternalDb(query);\n      res.json({ \n        success: true, \n        data: result,\n        rowCount: result.length \n      });\n    } catch (error) {\n      console.error(\"Erro ao executar query:\", error);\n      res.status(500).json({ \n        success: false, \n        error: \"Erro ao executar query no banco externo\",\n        details: error instanceof Error ? error.message : \"Erro desconhecido\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":47481},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/EnviarQuestionario.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { QuestionarioDesligamentoForm } from \"./QuestionarioDesligamentoForm\";\n\ninterface Funcionario {\n  id: number;\n  nome: string;\n  cpf: string | null;\n  cargo: string | null;\n  gestorId: number;\n}\n\ninterface Gestor {\n  id: number;\n  nome: string;\n  empresaId: number;\n}\n\ninterface Desligamento {\n  id: number;\n  funcionarioId: number;\n  empresaId: number;\n  gestorId: number;\n  dataDesligamento: string;\n  motivo: string | null;\n  tipoDesligamento: string;\n}\n\ninterface EnviarQuestionarioProps {\n  tipoDesligamento: \"funcionario\" | \"gestor\";\n}\n\nexport function EnviarQuestionario({ tipoDesligamento }: EnviarQuestionarioProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [questionarioDialogOpen, setQuestionarioDialogOpen] = useState(false);\n  const [selectedDesligamento, setSelectedDesligamento] = useState<{ id: number; funcionarioNome: string } | null>(null);\n\n  const { data: funcionarios = [], isLoading: loadingFuncionarios } = useQuery<Funcionario[]>({\n    queryKey: [\"/api/funcionarios\"],\n  });\n\n  const { data: gestores = [], isLoading: loadingGestores } = useQuery<Gestor[]>({\n    queryKey: [\"/api/gestores\"],\n  });\n\n  const { data: desligamentos = [], isLoading: loadingDesligamentos } = useQuery<Desligamento[]>({\n    queryKey: [\"/api/desligamentos\"],\n  });\n\n  const filteredDesligamentos = desligamentos\n    .filter((d) => d.tipoDesligamento === tipoDesligamento)\n    .map((d) => {\n      const funcionario = funcionarios.find((f) => f.id === d.funcionarioId);\n      return {\n        ...d,\n        funcionarioNome: funcionario?.nome || \"N/A\",\n        funcionarioCpf: funcionario?.cpf || \"\",\n        funcionarioCargo: funcionario?.cargo || \"N/A\",\n        gestorNome: gestores.find((g) => g.id === d.gestorId)?.nome || \"N/A\",\n      };\n    })\n    .filter((d) =>\n      d.funcionarioNome.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      d.funcionarioCpf.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      d.funcionarioCargo.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n  const handleAbrirQuestionario = (desligamentoId: number, funcionarioNome: string) => {\n    setSelectedDesligamento({ id: desligamentoId, funcionarioNome });\n    setQuestionarioDialogOpen(true);\n  };\n\n  const handleQuestionarioSuccess = () => {\n    setQuestionarioDialogOpen(false);\n    setSelectedDesligamento(null);\n  };\n\n  const isLoading = loadingFuncionarios || loadingGestores || loadingDesligamentos;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Questionário de Desligamento</CardTitle>\n        <CardDescription>\n          Preencha o questionário de desligamento para funcionários que foram desligados\n          {tipoDesligamento === \"gestor\" ? \" pela empresa\" : \" por iniciativa própria\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Pesquisar por nome, CPF ou cargo...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-funcionario\"\n            />\n          </div>\n        </div>\n\n        {isLoading ? (\n          <div className=\"text-center text-muted-foreground py-8\">Carregando...</div>\n        ) : filteredDesligamentos.length === 0 ? (\n          <div className=\"text-center text-muted-foreground py-8\">\n            Nenhum desligamento encontrado\n          </div>\n        ) : (\n          <div className=\"border rounded-md overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nome</TableHead>\n                  <TableHead>Cargo</TableHead>\n                  <TableHead>Gestor</TableHead>\n                  <TableHead>Data Desligamento</TableHead>\n                  <TableHead className=\"text-right\">Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredDesligamentos.map((desligamento) => (\n                  <TableRow key={desligamento.id} data-testid={`row-desligamento-${desligamento.id}`}>\n                    <TableCell className=\"font-medium\">{desligamento.funcionarioNome}</TableCell>\n                    <TableCell>{desligamento.funcionarioCargo}</TableCell>\n                    <TableCell>{desligamento.gestorNome}</TableCell>\n                    <TableCell>\n                      {new Date(desligamento.dataDesligamento).toLocaleDateString('pt-BR')}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleAbrirQuestionario(desligamento.id, desligamento.funcionarioNome)}\n                        data-testid={`button-abrir-questionario-${desligamento.id}`}\n                      >\n                        Preencher Questionário\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        )}\n      </CardContent>\n\n      <Dialog open={questionarioDialogOpen} onOpenChange={setQuestionarioDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Questionário de Desligamento</DialogTitle>\n            <DialogDescription>\n              {selectedDesligamento?.funcionarioNome && (\n                <>Respondendo questionário para: {selectedDesligamento.funcionarioNome}</>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedDesligamento && (\n            <QuestionarioDesligamentoForm\n              desligamentoId={selectedDesligamento.id}\n              tipoDesligamento={tipoDesligamento}\n              onSuccess={handleQuestionarioSuccess}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </Card>\n  );\n}\n","size_bytes":6747},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/pages/Gestores.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { CrudTable } from \"@/components/CrudTable\";\nimport { AddDialog } from \"@/components/AddDialog\";\nimport { GestorDetalhesDialog } from \"@/components/GestorDetalhesDialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Eye } from \"lucide-react\";\n\nexport default function Gestores() {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [detalhesDialogOpen, setDetalhesDialogOpen] = useState(false);\n  const [gestorSelecionado, setGestorSelecionado] = useState<any>(null);\n  const { toast } = useToast();\n\n  const { data: empresas = [] } = useQuery({\n    queryKey: [\"/api/empresas\"],\n  });\n\n  const { data: gestores = [], isLoading } = useQuery({\n    queryKey: [\"/api/gestores\"],\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: Record<string, string>) => {\n      return await apiRequest(\"POST\", \"/api/gestores\", {\n        nome: data.nome,\n        empresaId: parseInt(data.empresaId),\n      });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/gestores\"] });\n      toast({\n        title: \"Gestor adicionado\",\n        description: `${variables.nome} foi adicionado com sucesso.`,\n      });\n      setDialogOpen(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao adicionar gestor.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const gestoresWithEmpresa = gestores.map((gestor: any) => {\n    const empresa = empresas.find((e: any) => e.id === gestor.empresaId);\n    return {\n      ...gestor,\n      empresaNome: empresa?.nome || \"N/A\",\n    };\n  });\n\n  const columns = [\n    { header: \"ID\", accessor: \"id\" as const },\n    { header: \"Nome do Gestor\", accessor: \"nome\" as const },\n    { header: \"Empresa\", accessor: \"empresaNome\" as const },\n  ];\n\n  const fields = [\n    {\n      name: \"nome\",\n      label: \"Nome do Gestor\",\n      type: \"text\" as const,\n      placeholder: \"Digite o nome do gestor\",\n      required: true,\n    },\n    {\n      name: \"empresaId\",\n      label: \"Empresa\",\n      type: \"select\" as const,\n      placeholder: \"Selecione uma empresa\",\n      required: true,\n      options: empresas.map((e: any) => ({\n        value: e.id.toString(),\n        label: e.nome,\n      })),\n    },\n  ];\n\n  if (isLoading) {\n    return <div className=\"text-center py-8\">Carregando...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Gestores</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Gerencie os gestores cadastrados no sistema\n        </p>\n      </div>\n\n      <CrudTable\n        title=\"Gestores Cadastrados\"\n        data={gestoresWithEmpresa}\n        columns={columns}\n        onAddClick={() => setDialogOpen(true)}\n        emptyMessage=\"Nenhum gestor cadastrado\"\n        actions={(row) => (\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => {\n              setGestorSelecionado(row);\n              setDetalhesDialogOpen(true);\n            }}\n            data-testid={`button-ver-detalhes-${row.id}`}\n          >\n            <Eye className=\"h-4 w-4 mr-2\" />\n            Ver Detalhes\n          </Button>\n        )}\n      />\n\n      <AddDialog\n        open={dialogOpen}\n        onOpenChange={setDialogOpen}\n        title=\"Adicionar Gestor\"\n        description=\"Preencha os dados para adicionar um novo gestor\"\n        fields={fields}\n        onSubmit={(data) => mutation.mutate(data)}\n      />\n\n      <GestorDetalhesDialog\n        open={detalhesDialogOpen}\n        onOpenChange={setDetalhesDialogOpen}\n        gestor={gestorSelecionado}\n      />\n    </div>\n  );\n}\n","size_bytes":3847},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/FormulariosExperiencia.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle, FileText } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { EnviarFormularioExperiencia } from \"@/components/EnviarFormularioExperiencia\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\ntype FormularioExperienciaItem = {\n  id: number;\n  funcionarioId: number;\n  funcionarioNome: string;\n  gestorId: number;\n  gestorNome: string;\n  periodo: string;\n  dataLimite: string;\n  status: \"pendente\" | \"preenchido\" | \"aprovado\" | \"reprovado\";\n  dataPreenchimento?: string | null;\n  desempenho?: number | null;\n  pontosFortes?: string | null;\n  pontosMelhoria?: string | null;\n  recomendacao?: string | null;\n  observacoes?: string | null;\n};\n\ninterface FormulariosExperienciaProps {\n  periodo?: string;\n}\n\nexport default function FormulariosExperiencia({ periodo }: FormulariosExperienciaProps = {}) {\n  const { data: allFormularios = [], isLoading } = useQuery<FormularioExperienciaItem[]>({\n    queryKey: [\"/api/formularios-experiencia\"],\n  });\n\n  const formularios = periodo \n    ? allFormularios.filter(f => f.periodo === periodo)\n    : allFormularios;\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pendente: { label: \"Pendente\", className: \"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\" },\n      preenchido: { label: \"Preenchido\", className: \"bg-blue-500/10 text-blue-500 border-blue-500/20\" },\n      aprovado: { label: \"Aprovado\", className: \"bg-green-500/10 text-green-500 border-green-500/20\" },\n      reprovado: { label: \"Reprovado\", className: \"bg-red-500/10 text-red-500 border-red-500/20\" },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig];\n    return (\n      <Badge variant=\"outline\" className={config.className} data-testid={`badge-status-${status}`}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const isVencido = (dataLimite: string) => {\n    return new Date(dataLimite) < new Date();\n  };\n\n  const getPeriodoTitulo = () => {\n    if (periodo === \"1\") return \"Formulários de Experiência - 01° Período\";\n    if (periodo === \"2\") return \"Formulários de Experiência - 02° Período\";\n    return \"Formulários de Experiência\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n            {getPeriodoTitulo()}\n          </h1>\n        </div>\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"h-16 bg-muted rounded animate-pulse\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const pendentes = formularios.filter((f) => f.status === \"pendente\");\n  const preenchidos = formularios.filter((f) => f.status !== \"pendente\");\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n            {getPeriodoTitulo()}\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            {periodo ? `Avaliações do ${periodo === \"1\" ? \"primeiro\" : \"segundo\"} período de experiência` : \"Avaliações de período de experiência dos funcionários\"}\n          </p>\n        </div>\n      </div>\n\n      {pendentes.length > 0 && (\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4 flex items-center gap-2\" data-testid=\"text-section-pendentes\">\n            <AlertCircle className=\"h-5 w-5 text-yellow-500\" />\n            Pendentes ({pendentes.length})\n          </h2>\n          <div className=\"rounded-md border overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-16\">ID</TableHead>\n                  <TableHead>Nome do Funcionário</TableHead>\n                  <TableHead>Nome do Gestor</TableHead>\n                  <TableHead className=\"w-32\">Período</TableHead>\n                  <TableHead className=\"w-36\">Data Limite</TableHead>\n                  <TableHead className=\"w-32\">Status</TableHead>\n                  <TableHead className=\"w-48\">Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {pendentes.map((formulario) => {\n                  const vencido = isVencido(formulario.dataLimite);\n                  \n                  return (\n                    <TableRow\n                      key={formulario.id}\n                      className={vencido ? \"bg-red-500/5\" : \"\"}\n                      data-testid={`row-formulario-${formulario.id}`}\n                    >\n                      <TableCell className=\"font-medium\" data-testid={`text-id-${formulario.id}`}>\n                        {formulario.id}\n                      </TableCell>\n                      <TableCell data-testid={`text-funcionario-${formulario.id}`}>\n                        {formulario.funcionarioNome}\n                      </TableCell>\n                      <TableCell data-testid={`text-gestor-${formulario.id}`}>\n                        {formulario.gestorNome}\n                      </TableCell>\n                      <TableCell>\n                        {formulario.periodo === \"1\" ? \"01° Período\" : \"02° Período\"}\n                      </TableCell>\n                      <TableCell className={vencido ? \"text-red-500 font-semibold\" : \"\"}>\n                        {format(new Date(formulario.dataLimite), \"dd/MM/yyyy\", { locale: ptBR })}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(formulario.status)}\n                      </TableCell>\n                      <TableCell>\n                        <EnviarFormularioExperiencia\n                          formularioId={formulario.id}\n                          gestorNome={formulario.gestorNome}\n                          funcionarioNome={formulario.funcionarioNome}\n                          periodo={formulario.periodo}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      )}\n\n      {preenchidos.length > 0 && (\n        <div>\n          <h2 className=\"text-xl font-semibold mb-4\" data-testid=\"text-section-preenchidos\">\n            Preenchidos ({preenchidos.length})\n          </h2>\n          <div className=\"rounded-md border overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-16\">ID</TableHead>\n                  <TableHead>Nome do Funcionário</TableHead>\n                  <TableHead>Nome do Gestor</TableHead>\n                  <TableHead className=\"w-32\">Período</TableHead>\n                  <TableHead className=\"w-36\">Data Preenchimento</TableHead>\n                  <TableHead className=\"w-32\">Desempenho</TableHead>\n                  <TableHead className=\"w-32\">Status</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {preenchidos.map((formulario) => {\n                  return (\n                    <TableRow key={formulario.id} data-testid={`row-formulario-${formulario.id}`}>\n                      <TableCell className=\"font-medium\" data-testid={`text-id-${formulario.id}`}>\n                        {formulario.id}\n                      </TableCell>\n                      <TableCell data-testid={`text-funcionario-${formulario.id}`}>\n                        {formulario.funcionarioNome}\n                      </TableCell>\n                      <TableCell data-testid={`text-gestor-${formulario.id}`}>\n                        {formulario.gestorNome}\n                      </TableCell>\n                      <TableCell>\n                        {formulario.periodo === \"1\" ? \"01° Período\" : \"02° Período\"}\n                      </TableCell>\n                      <TableCell>\n                        {formulario.dataPreenchimento\n                          ? format(new Date(formulario.dataPreenchimento), \"dd/MM/yyyy\", { locale: ptBR })\n                          : \"-\"}\n                      </TableCell>\n                      <TableCell>\n                        {formulario.desempenho ? `${formulario.desempenho}/10` : \"-\"}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(formulario.status)}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n      )}\n\n      {formularios.length === 0 && (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <FileText className=\"h-16 w-16 text-muted-foreground mb-4\" />\n            <p className=\"text-lg text-muted-foreground\" data-testid=\"text-empty-state\">\n              Nenhum formulário de experiência encontrado\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":9348},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/pages/Dashboard.tsx":{"content":"import { UserX, Building2, UserCog, TrendingUp } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { StatCard } from \"@/components/StatCard\";\nimport { DashboardCharts } from \"@/components/DashboardCharts\";\n\nexport default function Dashboard() {\n  const { data: gestoresData } = useQuery({\n    queryKey: [\"/api/dados/desligamentos_por_gestor\"],\n  });\n\n  const { data: empresasData } = useQuery({\n    queryKey: [\"/api/dados/desligamentos_por_empresa\"],\n  });\n\n  const { data: desligamentos = [] } = useQuery({\n    queryKey: [\"/api/desligamentos\"],\n  });\n\n  const { data: empresas = [] } = useQuery({\n    queryKey: [\"/api/empresas\"],\n  });\n\n  const { data: gestores = [] } = useQuery({\n    queryKey: [\"/api/gestores\"],\n  });\n\n  const chartGestoresData = gestoresData\n    ? gestoresData.labels.map((label: string, i: number) => ({\n        name: label,\n        value: gestoresData.data[i],\n      }))\n    : [];\n\n  const chartEmpresasData = empresasData\n    ? empresasData.labels.map((label: string, i: number) => ({\n        name: label,\n        value: empresasData.data[i],\n      }))\n    : [];\n\n  const totalDesligamentos = desligamentos.length;\n  const totalEmpresas = empresas.length;\n  const totalGestores = gestores.length;\n\n  const now = new Date();\n  const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n  const desligamentosLastMonth = desligamentos.filter((d: any) => {\n    const date = new Date(d.dataDesligamento);\n    return date >= lastMonth && date < now;\n  }).length;\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Dashboard</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Análise de dados e estatísticas de desligamentos\n        </p>\n      </div>\n\n      <div className=\"grid gap-4 md:grid-cols-4\">\n        <StatCard\n          title=\"Total Desligamentos\"\n          value={totalDesligamentos}\n          icon={UserX}\n          description=\"Total registrado\"\n        />\n        <StatCard\n          title=\"Empresas\"\n          value={totalEmpresas}\n          icon={Building2}\n          description=\"Ativas no sistema\"\n        />\n        <StatCard\n          title=\"Gestores\"\n          value={totalGestores}\n          icon={UserCog}\n          description=\"Cadastrados\"\n        />\n        <StatCard\n          title=\"Último Mês\"\n          value={desligamentosLastMonth}\n          icon={TrendingUp}\n          description=\"Desligamentos\"\n        />\n      </div>\n\n      {gestoresData && empresasData && (\n        <DashboardCharts gestoresData={chartGestoresData} empresasData={chartEmpresasData} />\n      )}\n    </div>\n  );\n}\n","size_bytes":2641},"client/src/components/StatCard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  description?: string;\n}\n\nexport function StatCard({ title, value, icon: Icon, description }: StatCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\" data-testid={`stat-${title.toLowerCase().replace(/\\s+/g, \"-\")}`}>\n          {value}\n        </div>\n        {description && (\n          <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":911},"client/src/components/EnviarFormularioExperiencia.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Send, Copy, ExternalLink, Check } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface EnviarFormularioExperienciaProps {\n  formularioId: number;\n  gestorNome: string;\n  funcionarioNome: string;\n  periodo: string;\n}\n\nconst FORMULARIO_EXPERIENCIA_URL = \"https://forms.office.com/pages/responsepage.aspx?id=fKhs6GEk4keMILRXyHexKD9hUGoTJTBAh3e6AfxsqZRUREcxQzk3SUJNMkFYMVVKWE04R1IzRjJNUSQlQCN0PWcu&route=shorturl\";\n\nexport function EnviarFormularioExperiencia({\n  formularioId,\n  gestorNome,\n  funcionarioNome,\n  periodo,\n}: EnviarFormularioExperienciaProps) {\n  const [open, setOpen] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const { toast } = useToast();\n\n  const periodoTexto = periodo === \"1\" ? \"01° Período (30 dias)\" : \"02° Período (60 dias)\";\n\n  const handleCopyLink = async () => {\n    try {\n      await navigator.clipboard.writeText(FORMULARIO_EXPERIENCIA_URL);\n      setCopied(true);\n      toast({\n        title: \"Link copiado!\",\n        description: \"O link do formulário foi copiado para a área de transferência.\",\n      });\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      toast({\n        title: \"Erro ao copiar\",\n        description: \"Não foi possível copiar o link.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleOpenForm = () => {\n    window.open(FORMULARIO_EXPERIENCIA_URL, \"_blank\");\n    toast({\n      title: \"Formulário aberto\",\n      description: \"O formulário foi aberto em uma nova aba.\",\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          data-testid={`button-enviar-formulario-${formularioId}`}\n        >\n          <Send className=\"h-4 w-4 mr-2\" />\n          Enviar Formulário ao Gestor\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Enviar Formulário de Avaliação de Experiência</DialogTitle>\n          <DialogDescription className=\"space-y-2 pt-2\">\n            <p>\n              <strong>Gestor:</strong> {gestorNome}\n            </p>\n            <p>\n              <strong>Funcionário:</strong> {funcionarioNome}\n            </p>\n            <p>\n              <strong>Período:</strong> {periodoTexto}\n            </p>\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <div className=\"bg-muted p-4 rounded-md\">\n            <p className=\"text-sm text-muted-foreground mb-3\">\n              Envie o link abaixo para o gestor preencher a avaliação de experiência:\n            </p>\n            <div className=\"flex items-center gap-2\">\n              <code className=\"flex-1 text-xs bg-background p-2 rounded border break-all\">\n                {FORMULARIO_EXPERIENCIA_URL}\n              </code>\n            </div>\n          </div>\n        </div>\n        <DialogFooter className=\"flex-col sm:flex-row gap-2\">\n          <Button\n            variant=\"outline\"\n            onClick={handleCopyLink}\n            data-testid=\"button-copy-link\"\n            className=\"w-full sm:w-auto\"\n          >\n            {copied ? (\n              <Check className=\"h-4 w-4 mr-2\" />\n            ) : (\n              <Copy className=\"h-4 w-4 mr-2\" />\n            )}\n            {copied ? \"Copiado!\" : \"Copiar Link\"}\n          </Button>\n          <Button\n            onClick={handleOpenForm}\n            data-testid=\"button-open-form\"\n            className=\"w-full sm:w-auto\"\n          >\n            <ExternalLink className=\"h-4 w-4 mr-2\" />\n            Abrir Formulário\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3981},"client/src/components/QuestionarioDesligamentoForm.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Loader2, Send } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype Pergunta = {\n  id: number;\n  questionarioId: number;\n  pergunta: string;\n  tipo: string;\n  opcoes: string[] | null;\n  obrigatoria: number;\n  ordem: number;\n};\n\ntype Questionario = {\n  id: number;\n  titulo: string;\n  descricao: string | null;\n  tipoDesligamento: string;\n  ativo: number;\n  dataCriacao: string;\n};\n\ntype QuestionarioData = {\n  questionario: Questionario;\n  perguntas: Pergunta[];\n};\n\ninterface QuestionarioDesligamentoFormProps {\n  desligamentoId: number;\n  tipoDesligamento: string;\n  onSuccess?: () => void;\n}\n\nexport function QuestionarioDesligamentoForm({\n  desligamentoId,\n  tipoDesligamento,\n  onSuccess,\n}: QuestionarioDesligamentoFormProps) {\n  const { toast } = useToast();\n  const [respostas, setRespostas] = useState<Record<number, { valorEscala?: number; textoResposta?: string; valorData?: string }>>({});\n\n  const { data, isLoading } = useQuery<QuestionarioData>({\n    queryKey: [`/api/questionarios-desligamento/tipo/${tipoDesligamento}`],\n  });\n\n  const salvarMutation = useMutation({\n    mutationFn: async () => {\n      if (!data) return;\n\n      const respostasArray = data.perguntas.map((pergunta) => ({\n        perguntaId: pergunta.id,\n        valorEscala: respostas[pergunta.id]?.valorEscala || null,\n        textoResposta: respostas[pergunta.id]?.textoResposta || null,\n        valorData: respostas[pergunta.id]?.valorData || null,\n      }));\n\n      const response = await apiRequest(\"POST\", \"/api/respostas-desligamento\", {\n        desligamentoId,\n        questionarioId: data.questionario.id,\n        respostas: respostasArray,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Questionário enviado\",\n        description: \"Suas respostas foram registradas com sucesso.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/desligamentos\"] });\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao enviar\",\n        description: \"Não foi possível salvar suas respostas. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleResposta = (perguntaId: number, valor: { valorEscala?: number; textoResposta?: string; valorData?: string }) => {\n    setRespostas((prev) => ({\n      ...prev,\n      [perguntaId]: valor,\n    }));\n  };\n\n  const handleSubmit = () => {\n    if (!data) return;\n\n    const obrigatoriasFaltando = data.perguntas\n      .filter((p) => p.obrigatoria === 1)\n      .some((p) => !respostas[p.id]?.textoResposta && !respostas[p.id]?.valorEscala && !respostas[p.id]?.valorData);\n\n    if (obrigatoriasFaltando) {\n      toast({\n        title: \"Campos obrigatórios\",\n        description: \"Por favor, responda todas as perguntas obrigatórias.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    salvarMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-12\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!data) {\n    return (\n      <Card>\n        <CardContent className=\"flex flex-col items-center justify-center py-12\">\n          <p className=\"text-lg text-muted-foreground\">\n            Nenhum questionário ativo encontrado para este tipo de desligamento.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle data-testid=\"text-questionario-titulo\">{data.questionario.titulo}</CardTitle>\n          {data.questionario.descricao && (\n            <CardDescription>{data.questionario.descricao}</CardDescription>\n          )}\n        </CardHeader>\n      </Card>\n\n      <div className=\"space-y-4\">\n        {data.perguntas.map((pergunta) => (\n          <Card key={pergunta.id} data-testid={`card-pergunta-${pergunta.id}`}>\n            <CardHeader>\n              <CardTitle className=\"text-base\">\n                {pergunta.pergunta}\n                {pergunta.obrigatoria === 1 && <span className=\"text-red-500 ml-1\">*</span>}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {pergunta.tipo === \"texto\" && (\n                <Textarea\n                  placeholder=\"Digite sua resposta...\"\n                  value={respostas[pergunta.id]?.textoResposta || \"\"}\n                  onChange={(e) =>\n                    handleResposta(pergunta.id, { textoResposta: e.target.value })\n                  }\n                  className=\"min-h-24\"\n                  data-testid={`textarea-resposta-${pergunta.id}`}\n                />\n              )}\n\n              {pergunta.tipo === \"multipla_escolha\" && pergunta.opcoes && (\n                <RadioGroup\n                  value={respostas[pergunta.id]?.textoResposta || \"\"}\n                  onValueChange={(value) =>\n                    handleResposta(pergunta.id, { textoResposta: value })\n                  }\n                  data-testid={`radiogroup-resposta-${pergunta.id}`}\n                >\n                  {pergunta.opcoes.map((opcao, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <RadioGroupItem\n                        value={opcao}\n                        id={`${pergunta.id}-${index}`}\n                        data-testid={`radio-opcao-${pergunta.id}-${index}`}\n                      />\n                      <Label htmlFor={`${pergunta.id}-${index}`} className=\"cursor-pointer\">\n                        {opcao}\n                      </Label>\n                    </div>\n                  ))}\n                </RadioGroup>\n              )}\n\n              {pergunta.tipo === \"escala\" && (\n                <RadioGroup\n                  value={respostas[pergunta.id]?.valorEscala?.toString() || \"\"}\n                  onValueChange={(value) =>\n                    handleResposta(pergunta.id, { valorEscala: parseInt(value) })\n                  }\n                  className=\"flex gap-2\"\n                  data-testid={`radiogroup-escala-${pergunta.id}`}\n                >\n                  {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((valor) => (\n                    <div key={valor} className=\"flex flex-col items-center\">\n                      <RadioGroupItem\n                        value={valor.toString()}\n                        id={`${pergunta.id}-${valor}`}\n                        data-testid={`radio-escala-${pergunta.id}-${valor}`}\n                      />\n                      <Label\n                        htmlFor={`${pergunta.id}-${valor}`}\n                        className=\"text-xs mt-1 cursor-pointer\"\n                      >\n                        {valor}\n                      </Label>\n                    </div>\n                  ))}\n                </RadioGroup>\n              )}\n\n              {pergunta.tipo === \"data\" && (\n                <Input\n                  type=\"date\"\n                  value={respostas[pergunta.id]?.valorData || \"\"}\n                  onChange={(e) =>\n                    handleResposta(pergunta.id, { valorData: e.target.value })\n                  }\n                  data-testid={`input-data-${pergunta.id}`}\n                />\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"flex justify-end\">\n        <Button\n          onClick={handleSubmit}\n          disabled={salvarMutation.isPending}\n          size=\"lg\"\n          data-testid=\"button-enviar-questionario\"\n        >\n          {salvarMutation.isPending ? (\n            <>\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              Enviando...\n            </>\n          ) : (\n            <>\n              <Send className=\"h-4 w-4 mr-2\" />\n              Enviar Questionário\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8485},"server/auth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport crypto from \"crypto\";\nimport type { Usuario } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"sua-chave-secreta-super-segura-aqui\";\nconst REFRESH_TOKEN_EXPIRY_DAYS = 30;\nconst ACCESS_TOKEN_EXPIRY = \"15m\";\n\nexport interface JWTPayload {\n  usuarioId: number;\n  email: string;\n  role: string;\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, 10);\n}\n\nexport async function comparePassword(password: string, hash: string): Promise<boolean> {\n  return await bcrypt.compare(password, hash);\n}\n\nexport function generateAccessToken(usuario: Usuario): string {\n  const payload: JWTPayload = {\n    usuarioId: usuario.id,\n    email: usuario.email,\n    role: usuario.role,\n  };\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: ACCESS_TOKEN_EXPIRY });\n}\n\nexport function verifyAccessToken(token: string): JWTPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as JWTPayload;\n  } catch {\n    return null;\n  }\n}\n\nexport function generateRefreshToken(): string {\n  return crypto.randomBytes(64).toString(\"hex\");\n}\n\nexport function hashToken(token: string): string {\n  return crypto.createHash(\"sha256\").update(token).digest(\"hex\");\n}\n\nexport function getRefreshTokenExpiry(): Date {\n  const expiry = new Date();\n  expiry.setDate(expiry.getDate() + REFRESH_TOKEN_EXPIRY_DAYS);\n  return expiry;\n}\n","size_bytes":1448},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Usuario {\n  id: number;\n  nome: string;\n  email: string;\n  role: string;\n}\n\ninterface AuthContextType {\n  usuario: Usuario | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const refreshTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Buscar dados do usuário autenticado\n  const { data, isLoading, error, refetch } = useQuery<{ usuario: Usuario }>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutos\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/auth/logout\", {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n      setLocation(\"/login\");\n      toast({\n        title: \"Logout realizado\",\n        description: \"Você foi desconectado do sistema\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro ao fazer logout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Função para refresh do token\n  const refreshToken = async () => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/refresh\", {});\n      if (response.ok) {\n        // Token renovado com sucesso, atualizar dados do usuário\n        await refetch();\n        // Programar próximo refresh (14 minutos)\n        scheduleTokenRefresh();\n      } else {\n        // Falha no refresh, fazer logout\n        queryClient.setQueryData([\"/api/auth/me\"], null);\n        setLocation(\"/login\");\n      }\n    } catch (error) {\n      // Erro no refresh, fazer logout\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n      setLocation(\"/login\");\n    }\n  };\n\n  // Programar refresh automático do token\n  const scheduleTokenRefresh = () => {\n    // Limpar timeout anterior se existir\n    if (refreshTimeoutRef.current) {\n      clearTimeout(refreshTimeoutRef.current);\n    }\n    \n    // Programar refresh para 14 minutos (1 minuto antes da expiração)\n    refreshTimeoutRef.current = setTimeout(() => {\n      refreshToken();\n    }, 14 * 60 * 1000);\n  };\n\n  // Configurar refresh automático quando usuário estiver autenticado\n  useEffect(() => {\n    if (data?.usuario) {\n      scheduleTokenRefresh();\n    }\n    \n    // Cleanup ao desmontar\n    return () => {\n      if (refreshTimeoutRef.current) {\n        clearTimeout(refreshTimeoutRef.current);\n      }\n    };\n  }, [data?.usuario]);\n\n  // Redirecionar para login se não autenticado\n  useEffect(() => {\n    if (!isLoading && error && location !== \"/login\") {\n      setLocation(\"/login\");\n    }\n  }, [isLoading, error, location, setLocation]);\n\n  // Redirecionar do login para home se já autenticado\n  useEffect(() => {\n    if (!isLoading && data?.usuario && location === \"/login\") {\n      setLocation(\"/\");\n    }\n  }, [isLoading, data, location, setLocation]);\n\n  const value: AuthContextType = {\n    usuario: data?.usuario || null,\n    isLoading,\n    isAuthenticated: !!data?.usuario,\n    logout: () => logoutMutation.mutate(),\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3832},"server/middleware.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport { verifyAccessToken, type JWTPayload } from \"./auth\";\nimport { storage } from \"./storage\";\n\n// Extend Express Request type to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: JWTPayload;\n    }\n  }\n}\n\nexport async function requireAuth(req: Request, res: Response, next: NextFunction) {\n  try {\n    const accessToken = req.cookies?.accessToken;\n    \n    if (!accessToken) {\n      return res.status(401).json({ error: \"Não autenticado\" });\n    }\n    \n    const payload = verifyAccessToken(accessToken);\n    if (!payload) {\n      return res.status(401).json({ error: \"Token inválido\" });\n    }\n    \n    // Verificar se o usuário ainda existe e está ativo\n    const usuario = await storage.getUsuario(payload.usuarioId);\n    if (!usuario || !usuario.ativo) {\n      return res.status(401).json({ error: \"Usuário inválido\" });\n    }\n    \n    req.user = payload;\n    next();\n  } catch (error) {\n    res.status(500).json({ error: \"Erro ao verificar autenticação\" });\n  }\n}\n\nexport function requireRole(roles: string[]) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ error: \"Não autenticado\" });\n    }\n    \n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ error: \"Acesso negado\" });\n    }\n    \n    next();\n  };\n}\n\nexport function requireNotAdmin(req: Request, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ error: \"Não autenticado\" });\n  }\n  \n  if (req.user.role === \"admin\") {\n    return res.status(403).json({ error: \"Administradores não podem preencher questionários\" });\n  }\n  \n  next();\n}\n","size_bytes":1755},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Email inválido\"),\n  senha: z.string().min(6, \"A senha deve ter pelo menos 6 caracteres\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      senha: \"\",\n    },\n  });\n\n  async function onSubmit(data: LoginForm) {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Erro ao fazer login\");\n      }\n\n      // Invalidar cache e atualizar dados do usuário\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      \n      toast({\n        title: \"Login realizado com sucesso\",\n        description: \"Redirecionando...\",\n      });\n      \n      // Redirecionar para a página inicial\n      setTimeout(() => setLocation(\"/\"), 100);\n    } catch (error) {\n      toast({\n        title: \"Erro ao fazer login\",\n        description: error instanceof Error ? error.message : \"Verifique suas credenciais\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-background\">\n      <Card className=\"w-full max-w-md\" data-testid=\"card-login\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl\" data-testid=\"text-titulo-login\">Sistema de Gestão de RH</CardTitle>\n          <CardDescription data-testid=\"text-subtitulo-login\">\n            Entre com suas credenciais para acessar o sistema\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"seu@email.com\"\n                        disabled={isLoading}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"senha\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Senha</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        placeholder=\"Sua senha\"\n                        disabled={isLoading}\n                        data-testid=\"input-senha\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-entrar\"\n              >\n                {isLoading ? \"Entrando...\" : \"Entrar\"}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4283},"client/src/components/VisualizarPerguntasQuestionario.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Eye, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState } from \"react\";\nimport type { QuestionarioDesligamento, PerguntaDesligamento } from \"@shared/schema\";\n\ninterface VisualizarPerguntasQuestionarioProps {\n  tipoDesligamento: \"funcionario\" | \"gestor\";\n}\n\nexport function VisualizarPerguntasQuestionario({ tipoDesligamento }: VisualizarPerguntasQuestionarioProps) {\n  const [expandido, setExpandido] = useState(false);\n\n  const { data: questionarios = [] } = useQuery<QuestionarioDesligamento[]>({\n    queryKey: [\"/api/questionarios-desligamento\"],\n  });\n\n  // Filtra questionários ativos do tipo especificado\n  const questionarioAtivo = questionarios.find(\n    (q) => q.ativo === 1 && q.tipoDesligamento === tipoDesligamento\n  );\n\n  const { data: perguntas = [] } = useQuery<PerguntaDesligamento[]>({\n    queryKey: [\"/api/questionarios-desligamento\", questionarioAtivo?.id, \"perguntas\"],\n    enabled: !!questionarioAtivo,\n  });\n\n  if (!questionarioAtivo) {\n    return (\n      <Card className=\"border-yellow-200 bg-yellow-50/50 dark:border-yellow-900 dark:bg-yellow-950/20\">\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Eye className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400\" />\n            <div>\n              <CardTitle className=\"text-lg\">Questionário Não Configurado</CardTitle>\n              <CardDescription className=\"mt-1\">\n                Não há questionário ativo para este tipo de desligamento. \n                Configure um questionário na seção de gerenciamento.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n    );\n  }\n\n  const getTipoPerguntaLabel = (tipo: string) => {\n    switch (tipo) {\n      case \"texto_livre\":\n        return \"Texto Livre\";\n      case \"multipla_escolha\":\n        return \"Múltipla Escolha\";\n      case \"escala\":\n        return \"Escala (1-10)\";\n      default:\n        return tipo;\n    }\n  };\n\n  return (\n    <Card className=\"border-blue-200 bg-blue-50/50 dark:border-blue-900 dark:bg-blue-950/20\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Eye className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n            <div>\n              <CardTitle className=\"text-lg\">Perguntas do Questionário</CardTitle>\n              <CardDescription className=\"mt-1\">\n                {questionarioAtivo.titulo} - Visualização apenas para Admin\n              </CardDescription>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setExpandido(!expandido)}\n            data-testid=\"button-toggle-perguntas\"\n          >\n            {expandido ? (\n              <>\n                <ChevronUp className=\"h-4 w-4 mr-2\" />\n                Recolher\n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"h-4 w-4 mr-2\" />\n                Ver Perguntas ({perguntas.length})\n              </>\n            )}\n          </Button>\n        </div>\n      </CardHeader>\n      \n      {expandido && (\n        <CardContent>\n          {perguntas.length === 0 ? (\n            <p className=\"text-muted-foreground text-sm text-center py-4\">\n              Nenhuma pergunta cadastrada neste questionário\n            </p>\n          ) : (\n            <div className=\"space-y-3\">\n              {[...perguntas]\n                .sort((a, b) => a.ordem - b.ordem)\n                .map((pergunta, index) => (\n                  <div\n                    key={pergunta.id}\n                    className=\"p-4 bg-white dark:bg-gray-900 rounded-lg border\"\n                    data-testid={`pergunta-${index + 1}`}\n                  >\n                    <div className=\"flex items-start justify-between gap-3\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Pergunta {index + 1}\n                          </Badge>\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {getTipoPerguntaLabel(pergunta.tipo)}\n                          </Badge>\n                          {pergunta.obrigatoria === 1 && (\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              Obrigatória\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-sm font-medium\">{pergunta.pergunta}</p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          )}\n        </CardContent>\n      )}\n    </Card>\n  );\n}\n","size_bytes":5086},"client/src/pages/QuestionariosPreenchidos.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Eye, AlertCircle } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/contexts/AuthContext\";\nimport { useLocation } from \"wouter\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n\ninterface Funcionario {\n  id: number;\n  nome: string;\n  cargo: string | null;\n}\n\ninterface Gestor {\n  id: number;\n  nome: string;\n}\n\ninterface Desligamento {\n  id: number;\n  funcionarioId: number;\n  gestorId: number;\n  dataDesligamento: string;\n  tipoDesligamento: string;\n}\n\ninterface RespostaDesligamento {\n  id: number;\n  desligamentoId: number;\n  questionarioId: number;\n  perguntaId: number;\n  valorEscala: number | null;\n  textoResposta: string | null;\n  dataResposta: string;\n}\n\ninterface DesligamentoComRespostas {\n  desligamentoId: number;\n}\n\ninterface Pergunta {\n  id: number;\n  pergunta: string;\n  tipo: string;\n}\n\ninterface QuestionariosPreenchidosProps {\n  tipoDesligamento: \"funcionario\" | \"gestor\";\n}\n\nexport default function QuestionariosPreenchidos({ tipoDesligamento }: QuestionariosPreenchidosProps) {\n  const { usuario } = useAuth();\n  const [, navigate] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [respostasDialogOpen, setRespostasDialogOpen] = useState(false);\n  const [selectedDesligamento, setSelectedDesligamento] = useState<{ \n    id: number; \n    funcionarioNome: string;\n    gestorNome: string;\n    dataDesligamento: string;\n  } | null>(null);\n\n  // Redirect non-admin users\n  useEffect(() => {\n    if (usuario && usuario.role !== \"admin\") {\n      navigate(\"/dashboard\");\n    }\n  }, [usuario, navigate]);\n\n  // Show nothing while checking permissions\n  if (!usuario || usuario.role !== \"admin\") {\n    return null;\n  }\n\n  const { data: funcionarios = [] } = useQuery<Funcionario[]>({\n    queryKey: [\"/api/funcionarios\"],\n  });\n\n  const { data: gestores = [] } = useQuery<Gestor[]>({\n    queryKey: [\"/api/gestores\"],\n  });\n\n  const { data: desligamentos = [] } = useQuery<Desligamento[]>({\n    queryKey: [\"/api/desligamentos\"],\n  });\n\n  const { data: todosDesligamentosComRespostas = [], isError: errorDesligamentosComRespostas } = useQuery<DesligamentoComRespostas[]>({\n    queryKey: [\"/api/desligamentos-com-respostas\"],\n  });\n\n  // Filtrar desligamentos com respostas\n  const desligamentosComRespostas = desligamentos\n    .filter((d) => d.tipoDesligamento === tipoDesligamento)\n    .filter((d) => todosDesligamentosComRespostas.some((dr) => dr.desligamentoId === d.id))\n    .map((d) => {\n      const funcionario = funcionarios.find((f) => f.id === d.funcionarioId);\n      const gestor = gestores.find((g) => g.id === d.gestorId);\n      return {\n        ...d,\n        funcionarioNome: funcionario?.nome || \"N/A\",\n        funcionarioCargo: funcionario?.cargo || \"N/A\",\n        gestorNome: gestor?.nome || \"N/A\",\n      };\n    })\n    .filter((d) =>\n      d.funcionarioNome.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      d.funcionarioCargo.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n  const handleVisualizarRespostas = (\n    desligamentoId: number, \n    funcionarioNome: string,\n    gestorNome: string,\n    dataDesligamento: string\n  ) => {\n    setSelectedDesligamento({ \n      id: desligamentoId, \n      funcionarioNome,\n      gestorNome,\n      dataDesligamento \n    });\n    setRespostasDialogOpen(true);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n          Questionários Preenchidos - {tipoDesligamento === \"funcionario\" ? \"Iniciativa do Funcionário\" : \"Iniciativa da Empresa\"}\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Visualize os questionários de desligamento que foram preenchidos\n        </p>\n      </div>\n\n      {errorDesligamentosComRespostas && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertTitle>Erro de Permissão</AlertTitle>\n          <AlertDescription>\n            Você não tem permissão para acessar esta funcionalidade. Apenas administradores podem visualizar questionários preenchidos.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Questionários Preenchidos</CardTitle>\n          <CardDescription>\n            Lista de questionários de desligamento respondidos\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Pesquisar por nome ou cargo...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-funcionario\"\n              />\n            </div>\n          </div>\n\n          {desligamentosComRespostas.length === 0 ? (\n            <div className=\"text-center text-muted-foreground py-8\">\n              Nenhum questionário preenchido encontrado\n            </div>\n          ) : (\n            <div className=\"border rounded-md overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>ID</TableHead>\n                    <TableHead>Funcionário</TableHead>\n                    <TableHead>Cargo</TableHead>\n                    <TableHead>Gestor</TableHead>\n                    <TableHead>Data Desligamento</TableHead>\n                    <TableHead className=\"text-right\">Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {desligamentosComRespostas.map((desligamento) => (\n                    <TableRow key={desligamento.id} data-testid={`row-desligamento-${desligamento.id}`}>\n                      <TableCell>{desligamento.id}</TableCell>\n                      <TableCell className=\"font-medium\">{desligamento.funcionarioNome}</TableCell>\n                      <TableCell>{desligamento.funcionarioCargo}</TableCell>\n                      <TableCell>{desligamento.gestorNome}</TableCell>\n                      <TableCell>\n                        {new Date(desligamento.dataDesligamento).toLocaleDateString('pt-BR')}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleVisualizarRespostas(\n                            desligamento.id, \n                            desligamento.funcionarioNome,\n                            desligamento.gestorNome,\n                            desligamento.dataDesligamento\n                          )}\n                          data-testid={`button-visualizar-${desligamento.id}`}\n                        >\n                          <Eye className=\"h-4 w-4 mr-2\" />\n                          Visualizar Respostas\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Dialog open={respostasDialogOpen} onOpenChange={setRespostasDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Respostas do Questionário</DialogTitle>\n            <DialogDescription>\n              {selectedDesligamento && (\n                <>\n                  <div className=\"mt-2 space-y-1\">\n                    <div><strong>Funcionário:</strong> {selectedDesligamento.funcionarioNome}</div>\n                    <div><strong>Gestor:</strong> {selectedDesligamento.gestorNome}</div>\n                    <div><strong>Data do Desligamento:</strong> {new Date(selectedDesligamento.dataDesligamento).toLocaleDateString('pt-BR')}</div>\n                  </div>\n                </>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n          {selectedDesligamento && (\n            <RespostasView desligamentoId={selectedDesligamento.id} />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction RespostasView({ desligamentoId }: { desligamentoId: number }) {\n  const { data: respostas = [], isLoading: loadingRespostas } = useQuery<RespostaDesligamento[]>({\n    queryKey: [\"/api/respostas-desligamento\", desligamentoId],\n    queryFn: () => fetch(`/api/respostas-desligamento/${desligamentoId}`).then(res => res.json()),\n  });\n\n  // Buscar perguntas do questionário usado nas respostas\n  const questionarioId = respostas[0]?.questionarioId;\n  \n  const { data: perguntas = [], isLoading: loadingPerguntas } = useQuery<Pergunta[]>({\n    queryKey: [\"/api/questionarios-desligamento\", questionarioId, \"perguntas\"],\n    queryFn: () => fetch(`/api/questionarios-desligamento/${questionarioId}/perguntas`).then(res => res.json()),\n    enabled: !!questionarioId,\n  });\n\n  if (loadingRespostas || loadingPerguntas) {\n    return <div className=\"text-center py-8\">Carregando respostas...</div>;\n  }\n\n  if (respostas.length === 0) {\n    return <div className=\"text-center py-8 text-muted-foreground\">Nenhuma resposta encontrada</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {respostas.map((resposta, index) => {\n        const pergunta = perguntas.find(p => p.id === resposta.perguntaId);\n        \n        return (\n          <div key={resposta.id} className=\"border-b pb-4 last:border-0\" data-testid={`resposta-${resposta.id}`}>\n            <div className=\"mb-2\">\n              <span className=\"font-semibold text-sm text-muted-foreground\">Pergunta {index + 1}</span>\n            </div>\n            <div className=\"mb-3\">\n              <p className=\"font-medium\">{pergunta?.pergunta || \"Pergunta não encontrada\"}</p>\n            </div>\n            <div className=\"bg-muted/50 p-3 rounded-md\">\n              <span className=\"text-sm text-muted-foreground\">Resposta:</span>\n              <div className=\"mt-1\">\n                {pergunta?.tipo === \"escala\" && resposta.valorEscala !== null ? (\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"secondary\" className=\"text-base px-3 py-1\">\n                      {resposta.valorEscala}\n                    </Badge>\n                    <span className=\"text-sm text-muted-foreground\">de 10</span>\n                  </div>\n                ) : resposta.textoResposta ? (\n                  <p className=\"text-foreground whitespace-pre-wrap\">{resposta.textoResposta}</p>\n                ) : (\n                  <p className=\"text-muted-foreground italic\">Sem resposta</p>\n                )}\n              </div>\n            </div>\n            <div className=\"mt-2 text-xs text-muted-foreground\">\n              Respondido em: {new Date(resposta.dataResposta).toLocaleDateString('pt-BR')}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":11713},"client/src/pages/AvaliacaoEficacia.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Search, Eye, CheckCircle } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { Link } from \"wouter\";\n\ntype TreinamentoComParticipantes = {\n  id: number;\n  titulo: string;\n  tipo: string;\n  dataInicio: string;\n  dataFim: string;\n  status: string;\n  gestorNome: string | null;\n  totalParticipantes: number;\n  participantesAvaliados: number;\n};\n\nexport default function AvaliacaoEficacia() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: treinamentos = [], isLoading } = useQuery<TreinamentoComParticipantes[]>({\n    queryKey: [\"/api/treinamentos\"],\n  });\n\n  // Filtrar apenas treinamentos concluídos\n  const treinamentosConcluidos = treinamentos.filter((t) => t.status === \"concluido\");\n\n  // Filtrar por termo de busca\n  const treinamentosFiltrados = treinamentosConcluidos.filter((treinamento) =>\n    treinamento.titulo.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getTipoLabel = (tipo: string) => {\n    const tipos = {\n      onboarding: \"Onboarding\",\n      tecnico: \"Técnico\",\n      comportamental: \"Comportamental\",\n    };\n    return tipos[tipo as keyof typeof tipos] || tipo;\n  };\n\n  const getStatusBadge = (participantesAvaliados: number, totalParticipantes: number) => {\n    if (totalParticipantes === 0) return null;\n    \n    const percentual = (participantesAvaliados / totalParticipantes) * 100;\n    \n    if (percentual === 100) {\n      return <Badge variant=\"default\" className=\"bg-green-500\">Completo</Badge>;\n    } else if (percentual > 0) {\n      return <Badge variant=\"secondary\">Parcial ({participantesAvaliados}/{totalParticipantes})</Badge>;\n    } else {\n      return <Badge variant=\"destructive\">Pendente</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Avaliação de Eficácia de Treinamento</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Avalie a eficácia dos treinamentos concluídos através das avaliações dos participantes\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Treinamentos Concluídos</CardTitle>\n          <CardDescription>\n            Lista de treinamentos concluídos disponíveis para avaliação de eficácia\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Buscar treinamento...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-buscar-treinamento\"\n              />\n            </div>\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center text-muted-foreground py-8\">Carregando...</div>\n          ) : treinamentosFiltrados.length === 0 ? (\n            <div className=\"text-center text-muted-foreground py-8\">\n              {treinamentosConcluidos.length === 0 \n                ? \"Nenhum treinamento concluído encontrado\"\n                : \"Nenhum treinamento encontrado com esse termo de busca\"}\n            </div>\n          ) : (\n            <div className=\"rounded-md border overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>ID</TableHead>\n                    <TableHead>Título</TableHead>\n                    <TableHead>Tipo</TableHead>\n                    <TableHead>Período</TableHead>\n                    <TableHead>Gestor</TableHead>\n                    <TableHead>Avaliações</TableHead>\n                    <TableHead className=\"text-right\">Ações</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {treinamentosFiltrados.map((treinamento) => (\n                    <TableRow key={treinamento.id} data-testid={`row-treinamento-${treinamento.id}`}>\n                      <TableCell>{treinamento.id}</TableCell>\n                      <TableCell className=\"font-medium\">{treinamento.titulo}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{getTipoLabel(treinamento.tipo)}</Badge>\n                      </TableCell>\n                      <TableCell className=\"text-sm\">\n                        {format(new Date(treinamento.dataInicio), \"dd/MM/yyyy\", { locale: ptBR })} -{\" \"}\n                        {format(new Date(treinamento.dataFim), \"dd/MM/yyyy\", { locale: ptBR })}\n                      </TableCell>\n                      <TableCell>{treinamento.gestorNome || \"N/A\"}</TableCell>\n                      <TableCell>\n                        {getStatusBadge(treinamento.participantesAvaliados || 0, treinamento.totalParticipantes || 0)}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <Link href={`/treinamentos/${treinamento.id}`}>\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`button-avaliar-${treinamento.id}`}>\n                            <Eye className=\"h-4 w-4 mr-2\" />\n                            Ver Detalhes\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-blue-50/50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-900\">\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <CheckCircle className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n            <CardTitle className=\"text-lg\">Sobre a Avaliação de Eficácia</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-2 text-sm\">\n          <p className=\"text-muted-foreground\">\n            A avaliação de eficácia permite analisar os resultados dos treinamentos concluídos:\n          </p>\n          <ul className=\"list-disc list-inside space-y-1 text-muted-foreground ml-2\">\n            <li>Visualize as notas e feedback dos participantes</li>\n            <li>Acompanhe o percentual de avaliações completadas</li>\n            <li>Identifique pontos de melhoria nos treinamentos</li>\n            <li>Gere relatórios de efetividade</li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7072}},"version":2}